[{"filePath":"/workspace/resources/js/Pages/production/bom/import.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/bom/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4183,4186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4183,4186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5175,5178],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5175,5178],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":121,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":124,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6455,6458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6455,6458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6681,6684],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6681,6684],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":180,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":180,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7135,7138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7135,7138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { router } from '@inertiajs/react';\nimport { GitBranch, Copy, Download, Upload } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport AppLayout from '@/layouts/app-layout';\nimport { ColumnConfig } from '@/types/shared';\nimport { BillOfMaterial } from '@/types/production';\ninterface Props {\n    boms: {\n        data: BillOfMaterial[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search?: string;\n        status?: string;\n    };\n}\nexport default function BomIndex({ boms, filters }: Props) {\n    const [searchValue, setSearchValue] = useState(filters.search || '');\n    const [deleteBom, setDeleteBom] = useState<BillOfMaterial | null>(null);\n    const handleSearchChange = (value: string) => {\n        setSearchValue(value);\n        router.get(route('production.bom.index'), { search: value }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['boms']\n        });\n    };\n    const handlePageChange = (page: number) => {\n        router.get(route('production.bom.index'), { ...filters, page }, {\n            preserveState: true,\n            preserveScroll: true\n        });\n    };\n    const handlePerPageChange = (perPage: number) => {\n        router.get(route('production.bom.index'), { ...filters, per_page: perPage }, {\n            preserveState: true,\n            preserveScroll: true\n        });\n    };\n    // Use data from server\n    const data = boms.data;\n    const pagination = {\n        current_page: boms.current_page,\n        last_page: boms.last_page,\n        per_page: boms.per_page,\n        total: boms.total,\n        from: boms.from,\n        to: boms.to,\n    };\n    const handleDelete = async () => {\n        if (!deleteBom) return;\n        try {\n            await router.delete(route('production.bom.destroy', deleteBom.id), {\n                preserveScroll: true,\n                onSuccess: () => {\n                    setDeleteBom(null);\n                },\n                onError: () => {\n                    console.error('Failed to delete BOM');\n                }\n            });\n        } catch (error) {\n            console.error('Delete error:', error);\n        }\n    };\n    const handleDuplicate = (bom: BillOfMaterial) => {\n        router.post(route('production.bom.duplicate', bom.id), {}, {\n            preserveScroll: true\n        });\n    };\n    const handleExport = (bom: BillOfMaterial) => {\n        window.open(route('production.bom.export', bom.id), '_blank');\n    };\n    const columns: ColumnConfig[] = [\n        {\n            key: 'bom_number',\n            label: 'Número',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value: unknown) => <>{value || '-'}</>\n        },\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value: unknown, row: Record<string, unknown>) => (\n                <div>\n                    <div className=\"font-medium\">{value as React.ReactNode}</div>\n                    {row.description ? (\n                        <div className=\"text-muted-foreground text-sm\">\n                            {(row.description as string).length > 40 ? `${(row.description as string).substring(0, 40)}...` : row.description as React.ReactNode}\n                        </div>\n                    ) : null}\n                </div>\n            )\n        },\n        {\n            key: 'version',\n            label: 'Versão',\n            width: 'w-[100px]',\n            render: (value: unknown, row: Record<string, unknown>) => {\n                const currentVersion = (row.current_version as any)?.version_number;\n                return currentVersion ? `v${currentVersion}` : '-';\n            }\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            sortable: true,\n            width: 'w-[120px]',\n            render: (value: unknown) => {\n                const labels: Record<string, string> = {\n                    'active': 'Ativa',\n                    'inactive': 'Inativa',\n                    'draft': 'Rascunho'\n                };\n                return <>{labels[value as string] || value || '-'}</>;\n            }\n        },\n        {\n            key: 'versions_count',\n            label: 'Versões',\n            width: 'w-[100px]',\n            render: (value: unknown, row: Record<string, unknown>) => <>{row.versions_count || 0}</>\n        },\n        {\n            key: 'item_masters_count',\n            label: 'Componentes',\n            width: 'w-[120px]',\n            render: (value: unknown, row: Record<string, unknown>) => <>{(row as any).item_masters_count || 0}</>\n        }\n    ];\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'BOMs', href: '' }\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <ListLayout\n                title=\"Bills of Materials\"\n                description=\"Gerencie estruturas de produtos e montagens\"\n                searchPlaceholder=\"Buscar por número ou nome...\"\n                searchValue={searchValue}\n                onSearchChange={handleSearchChange}\n                createRoute={route('production.bom.create')}\n                createButtonText=\"Nova BOM\"\n                actions={\n                    <Button variant=\"outline\" onClick={() => router.visit(route('production.bom.import.wizard'))}>\n                        <Upload className=\"h-4 w-4 mr-2\" />\n                        Importar\n                    </Button>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data as unknown as Record<string, unknown>[]}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(row: Record<string, unknown>) => router.visit(route('production.bom.show', (row as any).id))}\n                        actions={(row: Record<string, unknown>) => (\n                            <EntityActionDropdown\n                                onEdit={() => router.visit(route('production.bom.edit', (row as any).id))}\n                                onDelete={() => setDeleteBom(row as unknown as BillOfMaterial)}\n                                additionalActions={[\n                                    {\n                                        label: 'Ver Hierarquia',\n                                        icon: <GitBranch className=\"h-4 w-4\" />,\n                                        onClick: () => router.visit(route('production.bom.hierarchy', (row as any).id))\n                                    },\n                                    {\n                                        label: 'Duplicar',\n                                        icon: <Copy className=\"h-4 w-4\" />,\n                                        onClick: () => handleDuplicate(row as unknown as BillOfMaterial)\n                                    },\n                                    {\n                                        label: 'Exportar',\n                                        icon: <Download className=\"h-4 w-4\" />,\n                                        onClick: () => handleExport(row as unknown as BillOfMaterial)\n                                    }\n                                ]}\n                            />\n                        )}\n                    />\n                    <EntityPagination\n                        pagination={pagination}\n                        onPageChange={handlePageChange}\n                        onPerPageChange={handlePerPageChange}\n                    />\n                </div>\n            </ListLayout>\n            <EntityDeleteDialog\n                open={!!deleteBom}\n                onOpenChange={(open) => !open && setDeleteBom(null)}\n                entityLabel={deleteBom ? `a BOM ${deleteBom.name}` : ''}\n                onConfirm={handleDelete}\n            />\n        </AppLayout>\n    );\n}\n","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/bom/show.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/item-categories/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/item-categories/show.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/items/import.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/items/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/items/show.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7474,7477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7474,7477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9198,9201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9198,9201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":477,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16431,16434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16431,16434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":487,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17018,17021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17018,17021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":565,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22193,22196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22193,22196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":580,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":580,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22953,22956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22953,22956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":588,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":588,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23435,23438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23435,23438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":637,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":637,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26282,26285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26282,26285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":645,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[26835,26838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[26835,26838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":693,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":693,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29646,29649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29646,29649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":701,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":701,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30221,30224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30221,30224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":709,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":709,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30799,30802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30799,30802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":717,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":717,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31344,31347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31344,31347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":765,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":765,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34148,34151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34148,34151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":877,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":877,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40122,40125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40122,40125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":883,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40483,40486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40483,40486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":883,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":883,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[40493,40496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[40493,40496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":896,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":896,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41416,41419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41416,41419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":896,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":896,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41426,41429],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41426,41429],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":909,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":909,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42366,42369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42366,42369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":909,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":909,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[42376,42379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[42376,42379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":924,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":924,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43460,43463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43460,43463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":924,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":924,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[43470,43473],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[43470,43473],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":932,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":932,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44047,44050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44047,44050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":983,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":983,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[46990,46993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[46990,46993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":993,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":993,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47586,47589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47586,47589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":993,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":993,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47596,47599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47596,47599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1017,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1017,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49679,49682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49679,49682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1017,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1017,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49689,49692],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49689,49692],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1030,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1030,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50611,50614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50611,50614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1030,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1030,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50621,50624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50621,50624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1045,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1045,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51771,51774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51771,51774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1045,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1045,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51781,51784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51781,51784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1055,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1055,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52586,52589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52586,52589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1055,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1055,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[52596,52599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[52596,52599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":1063,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1063,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[53184,53187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[53184,53187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":36,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useForm } from '@inertiajs/react';\nimport { router, usePage } from '@inertiajs/react';\nimport { Head } from '@inertiajs/react';\nimport { ShoppingCart, Factory, Package, Ghost, QrCode, Lightbulb, Camera, Search } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { TextInput } from '@/components/TextInput';\nimport { ItemSelect } from '@/components/ItemSelect';\nimport StateButton from '@/components/StateButton';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport EmptyCard from '@/components/ui/empty-card';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/show-layout';\nimport { Item, BillOfMaterial, ItemCategory, ManufacturingOrder } from '@/types/production';\nimport { User } from '@/types';\nimport { formatCurrency, cn } from '@/lib/utils';\n\nimport CreateItemCategorySheet from '@/components/production/CreateItemCategorySheet';\nimport { ItemImageUploader } from '@/components/production/ItemImageUploader';\nimport { ItemImageGrid } from '@/components/production/ItemImageGrid';\nimport { toast } from 'sonner';\nimport axios from 'axios';\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n} from '@/components/ui/dialog';\n\nimport { Label } from '@/components/ui/label';\nimport {\n    Tooltip,\n    TooltipContent,\n    TooltipProvider,\n    TooltipTrigger,\n} from '@/components/ui/tooltip';\n\ninterface Props {\n    item?: Item;\n    whereUsedBoms?: {\n        data: BillOfMaterial[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    bomFilters?: {\n        bom_search?: string;\n        bom_per_page?: number;\n    };\n    manufacturingOrders?: {\n        data: ManufacturingOrder[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    moFilters?: {\n        mo_search?: string;\n        mo_per_page?: number;\n    };\n    categories?: ItemCategory[];\n    itemTypes?: Array<{ id: number; name: string; value: string }>;\n    itemStatuses?: Array<{ id: number; name: string; value: string }>;\n    can?: {\n        update: boolean;\n        delete: boolean;\n    };\n    isCreating?: boolean;\n}\n\nconst defaultCategories: ItemCategory[] = [];\n\n// DEPRECATED: item_type is no longer used\n// const defaultItemTypes = [\n//     { id: 1, name: 'Manufaturado', value: 'manufactured' },\n//     { id: 2, name: 'Comprado', value: 'purchased' },\n//     { id: 3, name: 'Fantasma', value: 'phantom' },\n//     { id: 4, name: 'Serviço', value: 'service' }\n// ];\n\nconst defaultItemStatuses = [\n    { id: 1, name: 'Ativo', value: 'active' },\n    { id: 2, name: 'Inativo', value: 'inactive' },\n    { id: 3, name: 'Protótipo', value: 'prototype' },\n    { id: 4, name: 'Descontinuado', value: 'discontinued' }\n];\n\n\n\nexport default function ItemShow({\n    item,\n    whereUsedBoms,\n    bomFilters = {},\n    manufacturingOrders,\n    moFilters = {},\n    categories = defaultCategories,\n\n    itemStatuses = defaultItemStatuses,\n    can = { update: false, delete: false },\n    isCreating = false\n}: Props) {\n    // Get shared data from page props\n    usePage<{\n        flash?: {\n            success?: string;\n            created_category_id?: number;\n        };\n        auth: {\n            user: User;\n            permissions: string[];\n        };\n    }>();\n\n\n\n\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'Itens', href: route('production.items.index') },\n        { title: isCreating ? 'Novo Item' : (item?.item_number || 'Item'), href: '' }\n    ];\n\n    // Form state for creation/editing\n    const { data, setData, errors, processing, post, patch, clearErrors } = useForm({\n        item_number: item?.item_number || '',\n        name: item?.name || '',\n        description: item?.description || '',\n        item_category_id: item?.item_category_id?.toString() || '',\n        // item_type: item?.item_type || 'manufactured', // DEPRECATED\n        can_be_sold: item?.can_be_sold !== undefined ? item.can_be_sold : false,\n        can_be_purchased: item?.can_be_purchased !== undefined ? item.can_be_purchased : false,\n        can_be_manufactured: item?.can_be_manufactured !== undefined ? item.can_be_manufactured : true,\n        is_phantom: item?.is_phantom !== undefined ? item.is_phantom : false,\n        status: item?.status || 'active',\n        unit_of_measure: item?.unit_of_measure || 'EA',\n        weight: item?.weight?.toString() || '',\n        list_price: item?.list_price?.toString() || '',\n        manufacturing_cost: item?.manufacturing_cost?.toString() || '',\n        manufacturing_lead_time_days: item?.manufacturing_lead_time_days || 0,\n        purchase_price: item?.purchase_price?.toString() || '',\n        purchase_lead_time_days: item?.purchase_lead_time_days || 0,\n        preferred_vendor: item?.preferred_vendor || '',\n        vendor_item_number: item?.vendor_item_number || '',\n    });\n\n    const [isEditMode, setIsEditMode] = useState(isCreating);\n    const [isCompressed, setIsCompressed] = useState(false);\n    const [categorySheetOpen, setCategorySheetOpen] = useState(false);\n    const [generatingQr, setGeneratingQr] = useState(false);\n    const [showCategoryWarning, setShowCategoryWarning] = useState(false);\n    const [skipWarningChecked, setSkipWarningChecked] = useState(false);\n\n    // BOM search and pagination state\n    const [bomSearchValue, setBomSearchValue] = useState(bomFilters.bom_search || '');\n    const [bomLoading, setBomLoading] = useState(false);\n\n    // MO search and pagination state\n    const [moSearchValue, setMoSearchValue] = useState(moFilters.mo_search || '');\n    const [moLoading, setMoLoading] = useState(false);\n\n    // Use categories from props instead of loading via AJAX\n    const itemCategories = categories || [];\n\n    // Ref for auto-focusing the item number input during creation\n    const itemNumberInputRef = useRef<HTMLInputElement>(null);\n\n    // Ref for category select\n    const categorySelectRef = useRef<HTMLButtonElement>(null);\n\n\n\n    // Update edit mode when isCreating prop changes (e.g., after redirect from creation)\n    useEffect(() => {\n        setIsEditMode(isCreating);\n    }, [isCreating]);\n\n    // Auto-focus on item number input when creating a new item\n    useEffect(() => {\n        if (isCreating && itemNumberInputRef.current) {\n            itemNumberInputRef.current.focus();\n        }\n    }, [isCreating]);\n\n    // Handle category sheet success - Inertia will reload the page with updated categories\n    const handleCategorySheetSuccess = () => {\n        setCategorySheetOpen(false);\n\n        // Check if we're coming from the warning dialog flow\n        const wasFromWarning = showCategoryWarning;\n\n        router.reload({\n            only: ['categories'],\n            onSuccess: (page) => {\n                const updatedCategories = page.props.categories as ItemCategory[];\n                const createdCategoryId = (page.props as any).flash?.created_category_id;\n\n                if (createdCategoryId) {\n                    // If we have the created category ID from flash data, use it directly\n                    setData('item_category_id', createdCategoryId.toString());\n                } else if (updatedCategories && updatedCategories.length > 0) {\n                    // Fallback: Find the newest category (highest ID)\n                    const newestCategory = updatedCategories.reduce((prev, current) =>\n                        (prev.id > current.id) ? prev : current\n                    );\n                    setData('item_category_id', newestCategory.id.toString());\n                }\n\n                // If we came from the warning dialog, submit the form automatically\n                if (wasFromWarning) {\n                    setShowCategoryWarning(false);\n                    // Give React time to update the state\n                    setTimeout(() => {\n                        submitForm();\n                    }, 100);\n                } else {\n                    // Otherwise, just focus the category select\n                    setTimeout(() => {\n                        categorySelectRef.current?.focus();\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    const handleGenerateQrTag = async () => {\n        if (!item?.id) return;\n\n        setGeneratingQr(true);\n        try {\n            const response = await axios.post(route('production.qr-tags.item', item.id));\n\n            if (response.data.success && response.data.pdf_url) {\n                window.open(response.data.pdf_url, '_blank');\n                toast.success('Etiqueta QR gerada com sucesso!');\n            }\n        } catch (error: any) {\n            toast.error(error.response?.data?.message || 'Erro ao gerar etiqueta QR');\n        } finally {\n            setGeneratingQr(false);\n        }\n    };\n\n    const submitForm = () => {\n        if (isCreating) {\n            post(route('production.items.store'), {\n                onSuccess: () => {\n                    // The backend will handle the redirect to the item show page\n                    // No need to do anything here as the page will be redirected\n                },\n                onError: () => {\n                    // Error handling is done by Inertia\n                },\n            });\n        } else if (item) {\n            patch(route('production.items.update', item.id), {\n                onSuccess: () => {\n                    setIsEditMode(false);\n                },\n            });\n        }\n    };\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        // Check if category is empty and warning not skipped\n        const skipWarning = localStorage.getItem('skipCategoryWarning') === 'true';\n        if (!data.item_category_id && !skipWarning) {\n            setShowCategoryWarning(true);\n            return;\n        }\n\n        submitForm();\n    };\n\n\n\n    const handleCategoryWarningAction = (action: 'continue' | 'select' | 'create') => {\n        if (skipWarningChecked) {\n            localStorage.setItem('skipCategoryWarning', 'true');\n        }\n\n        switch (action) {\n            case 'continue':\n                // Continue without category\n                setShowCategoryWarning(false);\n                submitForm();\n                break;\n            case 'select':\n                // Close dialog and focus on category select\n                setShowCategoryWarning(false);\n                // Wait for dialog to fully close and aria-hidden to be removed\n                setTimeout(() => {\n                    // First scroll into view\n                    categorySelectRef.current?.scrollIntoView({\n                        behavior: 'smooth',\n                        block: 'center'\n                    });\n                    // Then focus after a small delay\n                    setTimeout(() => {\n                        categorySelectRef.current?.focus();\n                    }, 100);\n                }, 200);\n                break;\n            case 'create':\n                // Close warning dialog and open category creation sheet\n                setShowCategoryWarning(false);\n                setCategorySheetOpen(true);\n                break;\n        }\n    };\n\n    // Debounced search implementation\n    const debounceTimer = useRef<NodeJS.Timeout | null>(null);\n\n    const performBomSearch = useCallback((searchValue: string) => {\n        if (!item?.id) return;\n\n        setBomLoading(true);\n        router.get(route('production.items.show', item.id), {\n            bom_search: searchValue,\n            bom_per_page: bomFilters.bom_per_page\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['whereUsedBoms'],\n            onFinish: () => setBomLoading(false)\n        });\n    }, [item?.id, bomFilters.bom_per_page]);\n\n    // BOM search handler with debounce\n    const handleBomSearchChange = useCallback((value: string) => {\n        setBomSearchValue(value);\n\n        // Clear previous timer\n        if (debounceTimer.current) {\n            clearTimeout(debounceTimer.current);\n        }\n\n        // Set new timer for 300ms delay\n        debounceTimer.current = setTimeout(() => {\n            performBomSearch(value);\n        }, 300);\n    }, [performBomSearch]);\n\n    // Cleanup timer on unmount\n    useEffect(() => {\n        return () => {\n            if (debounceTimer.current) {\n                clearTimeout(debounceTimer.current);\n            }\n        };\n    }, []);\n\n    const handleBomPageChange = (page: number) => {\n        if (!item?.id) return;\n\n        setBomLoading(true);\n        router.get(route('production.items.show', item.id), {\n            ...bomFilters,\n            bom_page: page\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['whereUsedBoms'],\n            onFinish: () => setBomLoading(false)\n        });\n    };\n\n    const handleBomPerPageChange = (perPage: number) => {\n        if (!item?.id) return;\n\n        setBomLoading(true);\n        router.get(route('production.items.show', item.id), {\n            ...bomFilters,\n            bom_per_page: perPage\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['whereUsedBoms'],\n            onFinish: () => setBomLoading(false)\n        });\n    };\n\n    // Manufacturing Orders search and pagination handlers\n    const moDebounceTimer = useRef<NodeJS.Timeout | null>(null);\n\n    const performMoSearch = useCallback((searchValue: string) => {\n        if (!item?.id) return;\n\n        setMoLoading(true);\n        router.get(route('production.items.show', item.id), {\n            mo_search: searchValue,\n            mo_per_page: moFilters.mo_per_page\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['manufacturingOrders'],\n            onFinish: () => setMoLoading(false)\n        });\n    }, [item?.id, moFilters.mo_per_page]);\n\n    const handleMoSearchChange = useCallback((value: string) => {\n        setMoSearchValue(value);\n\n        if (moDebounceTimer.current) {\n            clearTimeout(moDebounceTimer.current);\n        }\n\n        moDebounceTimer.current = setTimeout(() => {\n            performMoSearch(value);\n        }, 300);\n    }, [performMoSearch]);\n\n    const handleMoPageChange = (page: number) => {\n        if (!item?.id) return;\n\n        setMoLoading(true);\n        router.get(route('production.items.show', item.id), {\n            ...moFilters,\n            mo_page: page\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['manufacturingOrders'],\n            onFinish: () => setMoLoading(false)\n        });\n    };\n\n    const handleMoPerPageChange = (perPage: number) => {\n        if (!item?.id) return;\n\n        setMoLoading(true);\n        router.get(route('production.items.show', item.id), {\n            ...moFilters,\n            mo_per_page: perPage\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['manufacturingOrders'],\n            onFinish: () => setMoLoading(false)\n        });\n    };\n\n    // Cleanup MO timer on unmount\n    useEffect(() => {\n        return () => {\n            if (moDebounceTimer.current) {\n                clearTimeout(moDebounceTimer.current);\n            }\n        };\n    }, []);\n\n    const tabs = [\n        {\n            id: 'overview',\n            label: 'Informações Gerais',\n            content: (\n                <div className=\"py-8\">\n                    <form onSubmit={handleSubmit} className=\"space-y-6\">\n                        {/* Basic Information */}\n                        <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                <TextInput\n                                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                    name=\"item_number\"\n                                    label=\"Número do Item\"\n                                    placeholder=\"ITEM-001\"\n                                    required\n                                    disabled={!isEditMode || processing}\n                                    view={!isEditMode}\n                                    ref={itemNumberInputRef}\n                                />\n                                <TextInput\n                                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                    name=\"name\"\n                                    label=\"Nome\"\n                                    placeholder=\"Nome do item\"\n                                    required\n                                    disabled={!isEditMode || processing}\n                                    view={!isEditMode}\n                                />\n                            </div>\n\n                            {/* Description */}\n                            <div className=\"grid gap-2\">\n                                <label className=\"text-sm font-medium\">Descrição</label>\n                                <div className=\"bg-background\">\n                                    {!isEditMode ? (\n                                        <div className=\"rounded-md border bg-muted/20 p-2 text-sm min-h-[80px]\">\n                                            {data.description || 'Sem descrição'}\n                                        </div>\n                                    ) : (\n                                        <Textarea\n                                            placeholder=\"Descrição detalhada do item\"\n                                            value={data.description}\n                                            onChange={(e) => setData('description', e.target.value)}\n                                            onBlur={() => clearErrors('description')}\n                                            className=\"min-h-[80px] resize-none\"\n                                            disabled={processing}\n                                        />\n                                    )}\n                                </div>\n                                {errors.description && (\n                                    <p className=\"text-sm text-destructive\">{errors.description}</p>\n                                )}\n                            </div>\n                        </div>\n\n                        {/* Classification */}\n                        <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                <div className=\"space-y-1\">\n                                    <div className=\"space-y-2\">\n                                        {isEditMode && (\n                                            <div className=\"flex items-center gap-1 mb-1\">\n                                                <Label className=\"text-sm font-medium\">Categoria</Label>\n                                                <TooltipProvider>\n                                                    <Tooltip>\n                                                        <TooltipTrigger asChild>\n                                                            <Lightbulb className=\"h-4 w-4 text-yellow-500 cursor-help\" />\n                                                        </TooltipTrigger>\n                                                        <TooltipContent>\n                                                            <p>RECOMENDADO: Categorias ajudam a automatizar ordens de manufatura com rotas pré-configuradas</p>\n                                                        </TooltipContent>\n                                                    </Tooltip>\n                                                </TooltipProvider>\n                                            </div>\n                                        )}\n                                        <ItemSelect\n                                            ref={categorySelectRef}\n                                            label={!isEditMode ? \"Categoria\" : undefined}\n                                            items={itemCategories}\n                                            value={data.item_category_id}\n                                            onValueChange={(value) => setData('item_category_id', value)}\n                                            onCreateClick={() => setCategorySheetOpen(true)}\n                                            placeholder={!isEditMode && !data.item_category_id ? \"Categoria não selecionada\" : \"Selecione a categoria\"}\n                                            error={errors.item_category_id}\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                            canCreate={isEditMode}\n                                            canClear={isEditMode}\n                                        />\n                                    </div>\n                                </div>\n                                <ItemSelect\n                                    label=\"Status\"\n                                    items={itemStatuses}\n                                    value={itemStatuses.find(s => s.value === data.status)?.id.toString() || ''}\n                                    onValueChange={(value) => {\n                                        const selected = itemStatuses.find(s => s.id.toString() === value);\n                                        if (selected) {\n                                            setData('status', selected.value as any);\n                                        }\n                                    }}\n                                    error={errors.status}\n                                    required\n                                    disabled={!isEditMode || processing}\n                                    view={!isEditMode}\n                                />\n                            </div>\n                        </div>\n\n                        {/* Physical & Operational Attributes */}\n                        <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                <TextInput\n                                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                    name=\"unit_of_measure\"\n                                    label=\"Unidade de Medida\"\n                                    placeholder=\"EA\"\n                                    disabled={!isEditMode || processing}\n                                    view={!isEditMode}\n                                />\n                                <TextInput\n                                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                    name=\"weight\"\n                                    label=\"Peso (kg)\"\n                                    placeholder=\"0.00\"\n                                    disabled={!isEditMode || processing}\n                                    view={!isEditMode}\n                                />\n                            </div>\n                        </div>\n\n                        {/* Capabilities and Associated Fields */}\n                        <div className=\"grid grid-cols-1 lg:grid-cols-4\">\n                            {/* Manufacturing Capability */}\n                            <div className={cn(\n                                \"space-y-4 lg:pr-4\",\n                                (data.can_be_manufactured || data.can_be_purchased) && \"lg:border-r lg:border-border\"\n                            )}>\n                                {isEditMode ? (\n                                    <StateButton\n                                        icon={Factory}\n                                        title=\"Pode ser manufaturado\"\n                                        description=\"Produzido internamente\"\n                                        selected={data.can_be_manufactured}\n                                        onClick={() => {\n                                            if (data.is_phantom) {\n                                                setData('is_phantom', false);\n                                            }\n                                            setData('can_be_manufactured', !data.can_be_manufactured);\n                                        }}\n                                        disabled={processing || data.is_phantom}\n                                        variant=\"default\"\n                                    />\n                                ) : (\n                                    <StateButton\n                                        icon={Factory}\n                                        title=\"Pode ser manufaturado\"\n                                        description={data.can_be_manufactured ?\n                                            (item?.primary_bom ? 'BOM definida' : 'Sem BOM') :\n                                            'Não pode ser manufaturado'\n                                        }\n                                        selected={data.can_be_manufactured}\n                                        onClick={() => { }}\n                                        variant=\"default\"\n                                    />\n                                )}\n\n                                {data.can_be_manufactured && (\n                                    <div className=\"space-y-3\">\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"manufacturing_cost\"\n                                            label=\"Custo de Manufatura\"\n                                            placeholder=\"0.00\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"manufacturing_lead_time_days\"\n                                            label=\"Lead Time de Manufatura (dias)\"\n                                            placeholder=\"0\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n\n                            {/* Purchasing Capability */}\n                            <div className={cn(\n                                \"space-y-4 lg:px-4\",\n                                (data.can_be_purchased || data.can_be_sold) && \"lg:border-r lg:border-border\"\n                            )}>\n                                {isEditMode ? (\n                                    <StateButton\n                                        icon={Package}\n                                        title=\"Pode ser comprado\"\n                                        description=\"Fornecido por terceiros\"\n                                        selected={data.can_be_purchased}\n                                        onClick={() => {\n                                            if (data.is_phantom) {\n                                                setData('is_phantom', false);\n                                            }\n                                            setData('can_be_purchased', !data.can_be_purchased);\n                                        }}\n                                        disabled={processing || data.is_phantom}\n                                        variant=\"default\"\n                                    />\n                                ) : (\n                                    <StateButton\n                                        icon={Package}\n                                        title=\"Pode ser comprado\"\n                                        description={data.can_be_purchased ?\n                                            `Fornecedores: ${data.preferred_vendor || 'Não definido'}` :\n                                            'Não pode ser comprado'\n                                        }\n                                        selected={data.can_be_purchased}\n                                        onClick={() => { }}\n                                        variant=\"default\"\n                                    />\n                                )}\n\n                                {data.can_be_purchased && (\n                                    <div className=\"space-y-3\">\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"preferred_vendor\"\n                                            label=\"Fornecedores Preferenciais\"\n                                            placeholder=\"Nome dos fornecedores\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"vendor_item_number\"\n                                            label=\"Código do Fornecedor\"\n                                            placeholder=\"Código do item no fornecedor\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"purchase_price\"\n                                            label=\"Preço de Compra\"\n                                            placeholder=\"0.00\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"purchase_lead_time_days\"\n                                            label=\"Lead Time de Compra (dias)\"\n                                            placeholder=\"0\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n\n                            {/* Sales Capability */}\n                            <div className={cn(\n                                \"space-y-4 lg:px-4\",\n                                (data.can_be_sold || data.is_phantom) && \"lg:border-r lg:border-border\"\n                            )}>\n                                {isEditMode ? (\n                                    <StateButton\n                                        icon={ShoppingCart}\n                                        title=\"Pode ser vendido\"\n                                        description=\"Produto final para clientes\"\n                                        selected={data.can_be_sold}\n                                        onClick={() => {\n                                            if (data.is_phantom) {\n                                                setData('is_phantom', false);\n                                            }\n                                            setData('can_be_sold', !data.can_be_sold);\n                                        }}\n                                        disabled={processing || data.is_phantom}\n                                        variant=\"default\"\n                                    />\n                                ) : (\n                                    <StateButton\n                                        icon={ShoppingCart}\n                                        title=\"Pode ser vendido\"\n                                        description={data.can_be_sold ?\n                                            `Preço: ${data.list_price ? formatCurrency(parseFloat(data.list_price)) : 'Não definido'}` :\n                                            'Não pode ser vendido'\n                                        }\n                                        selected={data.can_be_sold}\n                                        onClick={() => { }}\n                                        variant=\"default\"\n                                    />\n                                )}\n\n                                {data.can_be_sold && (\n                                    <div className=\"space-y-3\">\n                                        <TextInput\n                                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                                            name=\"list_price\"\n                                            label=\"Preço de Lista\"\n                                            placeholder=\"0.00\"\n                                            disabled={!isEditMode || processing}\n                                            view={!isEditMode}\n                                        />\n                                    </div>\n                                )}\n                            </div>\n\n                            {/* Phantom Item Capability */}\n                            <div className=\"space-y-4 lg:pl-4\">\n                                {isEditMode ? (\n                                    <StateButton\n                                        icon={Ghost}\n                                        title=\"Item Fantasma\"\n                                        description=\"Apenas para estruturação de BOM\"\n                                        selected={data.is_phantom}\n                                        onClick={() => {\n                                            if (!data.is_phantom) {\n                                                // When selecting phantom, deselect all other capabilities\n                                                setData({\n                                                    ...data,\n                                                    is_phantom: true,\n                                                    can_be_manufactured: false,\n                                                    can_be_purchased: false,\n                                                    can_be_sold: false\n                                                });\n                                            } else {\n                                                // When deselecting phantom, just toggle it off\n                                                setData('is_phantom', false);\n                                            }\n                                        }}\n                                        disabled={processing}\n                                        variant=\"default\"\n                                    />\n                                ) : (\n                                    <StateButton\n                                        icon={Ghost}\n                                        title=\"Item Fantasma\"\n                                        description={data.is_phantom ?\n                                            'Item de estruturação apenas' :\n                                            'Item não é fantasma'\n                                        }\n                                        selected={data.is_phantom}\n                                        onClick={() => { }}\n                                        variant=\"default\"\n                                    />\n                                )}\n\n                                {data.is_phantom && (\n                                    <div className=\"p-3 bg-muted/50 rounded-md\">\n                                        <p className=\"text-sm text-muted-foreground\">\n                                            Itens fantasma são usados apenas para organização em listas de materiais e não podem ser vendidos, comprados ou manufaturados.\n                                        </p>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n\n                        {isEditMode && (\n                            <div className=\"flex justify-end gap-4 pt-4\">\n                                {!isCreating && (\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"outline\"\n                                        onClick={() => setIsEditMode(false)}\n                                        disabled={processing}\n                                    >\n                                        Cancelar\n                                    </Button>\n                                )}\n                                <Button type=\"submit\" disabled={processing}>\n                                    {processing ? 'Salvando...' : (isCreating ? 'Criar Item' : 'Salvar Alterações')}\n                                </Button>\n                            </div>\n                        )}\n                    </form>\n\n                    {!isEditMode && !isCreating && can.update && (\n                        <div className=\"flex justify-end mt-6\">\n                            <Button onClick={() => setIsEditMode(true)}>\n                                Editar Informações\n                            </Button>\n                        </div>\n                    )}\n                </div>\n            ),\n        },\n        ...(isCreating\n            ? []\n            : [\n                {\n                    id: 'bom',\n                    label: 'BOMs',\n                    content: (\n                        <div className=\"py-6\">\n                            {whereUsedBoms ? (\n                                <div className=\"space-y-4\">\n                                    {/* Search input with real-time debounced search */}\n                                    <div className=\"relative max-w-sm\">\n                                        <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                        <Input\n                                            placeholder=\"Buscar BOMs...\"\n                                            value={bomSearchValue}\n                                            onChange={(e) => handleBomSearchChange(e.target.value)}\n                                            className=\"pl-8\"\n                                        />\n                                    </div>\n\n                                    <EntityDataTable\n                                        data={whereUsedBoms.data as any[]}\n                                        columns={[\n                                            {\n                                                key: 'bom_number',\n                                                label: 'BOM',\n                                                sortable: true,\n                                                render: (value: any, row: any) => {\n                                                    const bom = row as BillOfMaterial;\n                                                    return (\n                                                        <div>\n                                                            <div className=\"font-medium\">{bom.bom_number}</div>\n                                                            <div className=\"text-sm text-muted-foreground\">{bom.name}</div>\n                                                        </div>\n                                                    );\n                                                },\n                                            },\n                                            {\n                                                key: 'output_item',\n                                                label: 'Item Produzido',\n                                                render: (value: any, row: any) => {\n                                                    const bom = row as BillOfMaterial;\n                                                    return (\n                                                        <div>\n                                                            <div className=\"font-medium\">{bom.output_item?.item_number}</div>\n                                                            <div className=\"text-sm text-muted-foreground\">{bom.output_item?.name}</div>\n                                                        </div>\n                                                    );\n                                                },\n                                            },\n                                            {\n                                                key: 'is_active',\n                                                label: 'Status',\n                                                render: (value: any, row: any) => {\n                                                    const bom = row as BillOfMaterial;\n                                                    return (\n                                                        <div className=\"flex justify-center\">\n                                                            <Badge variant={bom.is_active ? 'default' : 'secondary'}>\n                                                                {bom.is_active ? 'Ativa' : 'Inativa'}\n                                                            </Badge>\n                                                        </div>\n                                                    );\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                            {\n                                                key: 'current_version',\n                                                label: 'Versão',\n                                                render: (value: any, row: any) => {\n                                                    const bom = row as BillOfMaterial;\n                                                    return <div className=\"text-center\">{bom.current_version?.version_number || '1'}</div>;\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                        ]}\n                                        loading={bomLoading}\n                                        onRowClick={(row: any) => {\n                                            const bom = row as BillOfMaterial;\n                                            router.visit(route('production.bom.show', bom.id));\n                                        }}\n                                        emptyMessage=\"Este item não é usado em nenhuma BOM no momento.\"\n                                    />\n\n                                    {whereUsedBoms.total > 0 && (\n                                        <EntityPagination\n                                            pagination={{\n                                                current_page: whereUsedBoms.current_page,\n                                                last_page: whereUsedBoms.last_page,\n                                                per_page: whereUsedBoms.per_page,\n                                                total: whereUsedBoms.total,\n                                                from: whereUsedBoms.from,\n                                                to: whereUsedBoms.to,\n                                            }}\n                                            onPageChange={handleBomPageChange}\n                                            onPerPageChange={handleBomPerPageChange}\n                                        />\n                                    )}\n                                </div>\n                            ) : (\n                                <EmptyCard\n                                    icon={Package}\n                                    title=\"Não usado em BOMs\"\n                                    description=\"Este item não é usado como componente em nenhuma lista de materiais\"\n                                />\n                            )}\n                        </div>\n                    ),\n                },\n                {\n                    id: 'orders',\n                    label: 'Ordens de Manufatura',\n                    content: (\n                        <div className=\"py-6\">\n                            {manufacturingOrders ? (\n                                <div className=\"space-y-4\">\n                                    {/* Search input with real-time debounced search */}\n                                    <div className=\"relative max-w-sm\">\n                                        <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                                        <Input\n                                            placeholder=\"Buscar ordens...\"\n                                            value={moSearchValue}\n                                            onChange={(e) => handleMoSearchChange(e.target.value)}\n                                            className=\"pl-8\"\n                                        />\n                                    </div>\n\n                                    <EntityDataTable\n                                        data={manufacturingOrders.data as any[]}\n                                        columns={[\n                                            {\n                                                key: 'order_number',\n                                                label: 'Número da Ordem',\n                                                sortable: true,\n                                            },\n                                            {\n                                                key: 'status',\n                                                label: 'Status',\n                                                render: (value: any, row: any) => {\n                                                    const mo = row as ManufacturingOrder;\n                                                    const statusMap: Record<string, { label: string; variant: 'default' | 'secondary' | 'outline' | 'destructive' }> = {\n                                                        'draft': { label: 'Rascunho', variant: 'secondary' },\n                                                        'planned': { label: 'Planejada', variant: 'outline' },\n                                                        'released': { label: 'Liberada', variant: 'default' },\n                                                        'in_progress': { label: 'Em Progresso', variant: 'default' },\n                                                        'completed': { label: 'Concluída', variant: 'secondary' },\n                                                        'cancelled': { label: 'Cancelada', variant: 'destructive' }\n                                                    };\n                                                    const status = statusMap[mo.status] || { label: mo.status, variant: 'default' as const };\n                                                    return (\n                                                        <div className=\"flex justify-center\">\n                                                            <Badge variant={status.variant}>\n                                                                {status.label}\n                                                            </Badge>\n                                                        </div>\n                                                    );\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                            {\n                                                key: 'quantity',\n                                                label: 'Quantidade',\n                                                render: (value: any, row: any) => {\n                                                    const mo = row as ManufacturingOrder;\n                                                    return (\n                                                        <div className=\"text-center\">\n                                                            {mo.quantity_completed || 0} / {mo.quantity} {mo.unit_of_measure || 'EA'}\n                                                        </div>\n                                                    );\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                            {\n                                                key: 'bill_of_material',\n                                                label: 'BOM',\n                                                render: (value: any, row: any) => {\n                                                    const mo = row as ManufacturingOrder;\n                                                    return mo.bill_of_material ? (\n                                                        <div>\n                                                            <div className=\"font-medium\">{mo.bill_of_material.bom_number}</div>\n                                                            <div className=\"text-sm text-muted-foreground\">{mo.bill_of_material.name}</div>\n                                                        </div>\n                                                    ) : (\n                                                        <span className=\"text-muted-foreground\">—</span>\n                                                    );\n                                                },\n                                            },\n                                            {\n                                                key: 'planned_start_date',\n                                                label: 'Data Planejada',\n                                                render: (value: any, row: any) => {\n                                                    const mo = row as ManufacturingOrder;\n                                                    if (!mo.planned_start_date) return <div className=\"text-center\">—</div>;\n                                                    return <div className=\"text-center\">{new Date(mo.planned_start_date).toLocaleDateString('pt-BR')}</div>;\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                            {\n                                                key: 'created_at',\n                                                label: 'Criada em',\n                                                render: (value: any, row: any) => {\n                                                    const mo = row as ManufacturingOrder;\n                                                    return <div className=\"text-center\">{new Date(mo.created_at).toLocaleDateString('pt-BR')}</div>;\n                                                },\n                                                headerAlign: 'center' as const,\n                                            },\n                                        ]}\n                                        loading={moLoading}\n                                        onRowClick={(row: any) => {\n                                            const mo = row as ManufacturingOrder;\n                                            router.visit(route('production.manufacturing-orders.show', mo.id));\n                                        }}\n                                        emptyMessage=\"Este item não possui ordens de manufatura.\"\n                                    />\n\n                                    {manufacturingOrders.total > 0 && (\n                                        <EntityPagination\n                                            pagination={{\n                                                current_page: manufacturingOrders.current_page,\n                                                last_page: manufacturingOrders.last_page,\n                                                per_page: manufacturingOrders.per_page,\n                                                total: manufacturingOrders.total,\n                                                from: manufacturingOrders.from,\n                                                to: manufacturingOrders.to,\n                                            }}\n                                            onPageChange={handleMoPageChange}\n                                            onPerPageChange={handleMoPerPageChange}\n                                        />\n                                    )}\n                                </div>\n                            ) : (\n                                <EmptyCard\n                                    icon={Factory}\n                                    title=\"Nenhuma ordem\"\n                                    description=\"Este item não possui ordens de manufatura associadas\"\n                                />\n                            )}\n                        </div>\n                    ),\n                },\n                {\n                    id: 'images',\n                    label: 'Imagens',\n                    content: (\n                        <div className=\"py-6 space-y-8\">\n                            <div>\n                                {item?.images && item.images.length > 0 ? (\n                                    <ItemImageGrid\n                                        itemId={item.id.toString()}\n                                        images={item.images}\n                                        canEdit={can?.update || false}\n                                        itemName={item.name}\n                                    />\n                                ) : (\n                                    <EmptyCard\n                                        icon={Camera}\n                                        title=\"Nenhuma imagem\"\n                                        description=\"Ainda não há imagens enviadas para este item\"\n                                    />\n                                )}\n                            </div>\n\n                            {can?.update && (\n                                <div>\n                                    <h3 className=\"text-lg font-medium mb-2\">Enviar Imagens</h3>\n                                    <p className=\"text-sm text-gray-600 mb-4\">\n                                        Adicione imagens para ajudar a identificar este item. Você pode enviar até 5 imagens.\n                                    </p>\n                                    <ItemImageUploader\n                                        itemId={item?.id.toString() || ''}\n                                        maxImages={5}\n                                        currentImageCount={item?.images?.length || 0}\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    ),\n                },\n            ]),\n    ];\n\n    // DEPRECATED: item_type is no longer used\n    // Item type labels\n    // const itemTypeLabels: Record<string, string> = {\n    //     manufactured: 'Manufaturado',\n    //     purchased: 'Comprado',\n    //     'manufactured-purchased': 'Manufaturado/Comprado',\n    //     phantom: 'Fantasma',\n    //     service: 'Serviço'\n    // };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={isCreating ? 'Novo Item' : `Item ${item?.item_number}`} />\n\n            <ShowLayout\n                title={isCreating ? 'Novo Item' : item?.name || 'Item'}\n                subtitle={\n                    isCreating ? (\n                        'Criação de novo item'\n                    ) : (\n                        `${item?.item_number}${item?.category?.name ? ` • ${item.category.name}` : ''} • ${item?.status === 'active' ? 'Ativo' : item?.status === 'inactive' ? 'Inativo' : item?.status === 'prototype' ? 'Protótipo' : item?.status === 'discontinued' ? 'Descontinuado' : item?.status || 'Ativo'}`\n                    )\n                }\n                editRoute=\"\"\n                tabs={tabs}\n                defaultCompressed={isCompressed}\n                onCompressedChange={setIsCompressed}\n                actions={\n                    !isCreating && item && can?.update && (\n                        <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleGenerateQrTag}\n                            disabled={generatingQr}\n                        >\n                            <QrCode className=\"h-4 w-4 mr-2\" />\n                            {generatingQr ? 'Gerando...' : 'Gerar QR'}\n                        </Button>\n                    )\n                }\n            />\n\n            {/* Category Creation Sheet */}\n            <CreateItemCategorySheet\n                open={categorySheetOpen}\n                onOpenChange={setCategorySheetOpen}\n                onSuccess={handleCategorySheetSuccess}\n                mode=\"create\"\n            />\n\n            {/* Category Warning Dialog */}\n            <Dialog open={showCategoryWarning} onOpenChange={setShowCategoryWarning}>\n                <DialogContent className=\"sm:max-w-[500px]\">\n                    <DialogHeader>\n                        <DialogTitle className=\"flex items-center gap-2\">\n                            <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n                            Criar item sem categoria?\n                        </DialogTitle>\n                        <DialogDescription>\n                            Categorias ajudam a automatizar a criação de ordens de manufatura\n                            atribuindo rotas de produção baseadas em templates pré-configurados.\n                        </DialogDescription>\n                    </DialogHeader>\n\n                    <div className=\"space-y-2 pt-4\">\n                        <p className=\"text-sm text-muted-foreground\">\n                            Deseja continuar sem categoria?\n                        </p>\n                    </div>\n\n                    <div className=\"py-4 space-y-3\">\n                        <Button\n                            className=\"w-full justify-start\"\n                            variant=\"outline\"\n                            onClick={() => handleCategoryWarningAction('continue')}\n                        >\n                            Continuar sem categoria\n                        </Button>\n                        <Button\n                            className=\"w-full justify-start\"\n                            variant=\"outline\"\n                            onClick={() => handleCategoryWarningAction('select')}\n                        >\n                            Selecionar categoria existente\n                        </Button>\n                        <Button\n                            className=\"w-full justify-start\"\n                            variant=\"outline\"\n                            onClick={() => handleCategoryWarningAction('create')}\n                        >\n                            Criar nova categoria\n                        </Button>\n\n                        <div className=\"flex items-center space-x-2 pt-2\">\n                            <Checkbox\n                                id=\"skip-warning\"\n                                checked={skipWarningChecked}\n                                onCheckedChange={(checked) => setSkipWarningChecked(!!checked)}\n                            />\n                            <Label\n                                htmlFor=\"skip-warning\"\n                                className=\"text-sm font-normal cursor-pointer text-muted-foreground\"\n                            >\n                                Não mostrar este aviso novamente\n                            </Label>\n                        </div>\n                    </div>\n\n                    <DialogFooter>\n                        <Button\n                            variant=\"outline\"\n                            onClick={() => setShowCategoryWarning(false)}\n                        >\n                            Cancelar\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/manufacturing-orders/create.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":368,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17045,17048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17045,17048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/ban-ts-comment","severity":2,"message":"Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.","line":462,"column":45,"nodeType":"Line","messageId":"tsDirectiveCommentRequiresDescription","endLine":462,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":495,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":495,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25382,25385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25382,25385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { useForm } from '@inertiajs/react';\nimport {\n    Factory,\n    Package,\n    Calendar,\n    Settings,\n    Check,\n    ChevronLeft,\n    ChevronRight,\n    Info\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Separator } from '@/components/ui/separator';\nimport { ItemSelect } from '@/components/ItemSelect';\nimport InputError from '@/components/input-error';\nimport AppLayout from '@/layouts/app-layout';\nimport { Item, BillOfMaterial, RouteTemplate } from '@/types/production';\nimport { cn } from '@/lib/utils';\n\ninterface Props {\n    items?: Item[];\n    billsOfMaterial?: BillOfMaterial[];\n    routeTemplates: RouteTemplate[];\n    sourceTypes: Record<string, string>;\n    selectedBomId?: number;\n}\n\ninterface _OrderFormData {\n    // Order type\n    order_type: 'item' | 'bom';\n\n    // Item/BOM selection\n    item_id: number | null;\n    bill_of_material_id: number | null;\n\n    // Order details\n    quantity: number;\n    unit_of_measure: string;\n    priority: number;\n    requested_date: string;\n\n    // Source\n    source_type: string;\n    source_reference: string;\n\n    // Parent-child options\n    auto_complete_on_children: boolean;\n\n    // Route configuration\n    route_creation_mode: 'manual' | 'template' | 'auto';\n    route_template_id: number | null;\n}\n\ninterface StepIndicatorProps {\n    steps: Array<{\n        number: number;\n        title: string;\n        icon: React.ReactNode;\n    }>;\n    currentStep: number;\n}\n\nfunction StepIndicator({ steps, currentStep }: StepIndicatorProps) {\n    return (\n        <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n                <React.Fragment key={step.number}>\n                    <div className=\"flex flex-col items-center\">\n                        <div\n                            className={cn(\n                                \"w-10 h-10 rounded-full flex items-center justify-center font-medium\",\n                                currentStep >= step.number\n                                    ? \"bg-primary text-primary-foreground\"\n                                    : \"bg-muted text-muted-foreground\"\n                            )}\n                        >\n                            {currentStep > step.number ? (\n                                <Check className=\"h-5 w-5\" />\n                            ) : (\n                                step.icon\n                            )}\n                        </div>\n                        <span className={cn(\n                            \"text-sm mt-2\",\n                            currentStep >= step.number\n                                ? \"text-foreground font-medium\"\n                                : \"text-muted-foreground\"\n                        )}>\n                            {step.title}\n                        </span>\n                    </div>\n                    {index < steps.length - 1 && (\n                        <div className={cn(\n                            \"flex-1 h-0.5 mx-4 mt-5\",\n                            currentStep > step.number\n                                ? \"bg-primary\"\n                                : \"bg-muted\"\n                        )} />\n                    )}\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n\nexport default function CreateManufacturingOrder({\n    items = [],\n    billsOfMaterial = [],\n    routeTemplates,\n    sourceTypes,\n    selectedBomId\n}: Props) {\n    const [currentStep, setCurrentStep] = useState(1);\n\n    const { data, setData, post, processing, errors } = useForm<{\n        order_type: string;\n        item_id: number | null;\n        bill_of_material_id: number | null;\n        quantity: number;\n        unit_of_measure: string;\n        priority: number;\n        requested_date: string;\n        source_type: string;\n        source_reference: string;\n        auto_complete_on_children: boolean;\n        route_creation_mode: string;\n        route_template_id: number | null;\n    }>({\n        order_type: selectedBomId ? 'bom' : 'item',\n        item_id: null,\n        bill_of_material_id: selectedBomId || null,\n        quantity: 1,\n        unit_of_measure: 'EA',\n        priority: 50,\n        requested_date: '',\n        source_type: 'manual',\n        source_reference: '',\n        auto_complete_on_children: true,\n        route_creation_mode: 'manual',\n        route_template_id: null,\n    });\n\n    const steps = [\n        { number: 1, title: 'Type', icon: <Factory className=\"h-5 w-5\" /> },\n        { number: 2, title: 'Item', icon: <Package className=\"h-5 w-5\" /> },\n        { number: 3, title: 'Details', icon: <Calendar className=\"h-5 w-5\" /> },\n        { number: 4, title: 'Configuration', icon: <Settings className=\"h-5 w-5\" /> },\n    ];\n\n    const selectedItem = useMemo(() => {\n        if (data.order_type === 'item' && data.item_id) {\n            return items.find(i => i.id === data.item_id);\n        }\n        return null;\n    }, [data.item_id, data.order_type, items]);\n\n    const selectedBOM = useMemo(() => {\n        if (data.order_type === 'bom' && data.bill_of_material_id) {\n            return billsOfMaterial.find(b => b.id === data.bill_of_material_id);\n        }\n        return null;\n    }, [data.bill_of_material_id, data.order_type, billsOfMaterial]);\n\n    const bomItems = useMemo(() => {\n        if (!selectedBOM?.current_version?.items) return [];\n        return selectedBOM.current_version.items;\n    }, [selectedBOM]);\n\n    const filteredRouteTemplates = useMemo(() => {\n        if (!selectedItem?.category) return routeTemplates;\n        return routeTemplates.filter(t =>\n            !t.item_category || t.item_category === selectedItem.category?.id?.toString()\n        );\n    }, [selectedItem, routeTemplates]);\n\n    const handleNext = () => {\n        if (currentStep < steps.length) {\n            setCurrentStep(currentStep + 1);\n        }\n    };\n\n    const handlePrevious = () => {\n        if (currentStep > 1) {\n            setCurrentStep(currentStep - 1);\n        }\n    };\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        post(route('production.orders.store'), {\n            onSuccess: () => {\n                // Success is handled by controller redirect\n            },\n            onError: (errors) => {\n                console.error('Form submission errors:', errors);\n            },\n        });\n    };\n\n    const isStepValid = (step: number) => {\n        switch (step) {\n            case 1:\n                return true; // Order type is always valid\n            case 2:\n                if (data.order_type === 'item') {\n                    return !!data.item_id;\n                } else {\n                    return !!data.bill_of_material_id;\n                }\n            case 3:\n                return data.quantity > 0 && !!data.unit_of_measure;\n            case 4:\n                return true; // Configuration is optional\n            default:\n                return false;\n        }\n    };\n\n    return (\n        <AppLayout\n            breadcrumbs={[\n                { title: 'Production', href: '/production' },\n                { title: 'Manufacturing Orders', href: '/production/orders' },\n                { title: 'Create Order', href: '' },\n            ]}\n        >\n            <div className=\"space-y-6 max-w-5xl mx-auto\">\n                <div>\n                    <h1 className=\"text-2xl font-semibold\">Create Manufacturing Order</h1>\n                    <p className=\"text-muted-foreground mt-1\">\n                        Create a new manufacturing order for production\n                    </p>\n                </div>\n\n                <Card>\n                    <CardHeader>\n                        <StepIndicator steps={steps} currentStep={currentStep} />\n                    </CardHeader>\n\n                    <form onSubmit={handleSubmit}>\n                        <CardContent className=\"space-y-6\">\n                            {/* Step 1: Order Type Selection */}\n                            {currentStep === 1 && (\n                                <div className=\"space-y-6\">\n                                    <div>\n                                        <Label className=\"text-base font-medium mb-4 block\">\n                                            Select Order Type\n                                        </Label>\n                                        <RadioGroup\n                                            value={data.order_type}\n                                            onValueChange={(value: 'item' | 'bom') => {\n                                                setData({\n                                                    ...data,\n                                                    order_type: value,\n                                                    item_id: null,\n                                                    bill_of_material_id: null,\n                                                });\n                                            }}\n                                            className=\"space-y-4\"\n                                        >\n                                            <div className=\"flex items-start space-x-3\">\n                                                <RadioGroupItem value=\"item\" id=\"item\" className=\"mt-1\" />\n                                                <div>\n                                                    <Label htmlFor=\"item\" className=\"font-normal cursor-pointer\">\n                                                        <div className=\"font-medium\">Single Item Order</div>\n                                                        <p className=\"text-sm text-muted-foreground mt-1\">\n                                                            Create an order for a single manufactured item\n                                                        </p>\n                                                    </Label>\n                                                </div>\n                                            </div>\n                                            <div className=\"flex items-start space-x-3\">\n                                                <RadioGroupItem value=\"bom\" id=\"bom\" className=\"mt-1\" />\n                                                <div>\n                                                    <Label htmlFor=\"bom\" className=\"font-normal cursor-pointer\">\n                                                        <div className=\"font-medium\">BOM-Based Order</div>\n                                                        <p className=\"text-sm text-muted-foreground mt-1\">\n                                                            Create orders for all items in a Bill of Materials\n                                                        </p>\n                                                    </Label>\n                                                </div>\n                                            </div>\n                                        </RadioGroup>\n                                    </div>\n                                </div>\n                            )}\n\n                            {/* Step 2: Item/BOM Selection */}\n                            {currentStep === 2 && (\n                                <div className=\"space-y-6\">\n                                    {data.order_type === 'item' ? (\n                                        <div>\n                                            <ItemSelect\n                                                label=\"Select Item\"\n                                                items={items.filter(i => i.can_be_manufactured)}\n                                                value={data.item_id?.toString() || ''}\n                                                onValueChange={(value) => {\n                                                    const item = items.find(i => i.id.toString() === value);\n                                                    setData({\n                                                        ...data,\n                                                        item_id: value ? parseInt(value) : null,\n                                                        unit_of_measure: item?.unit_of_measure || 'EA',\n                                                    });\n                                                }}\n                                                placeholder=\"Select an item to manufacture...\"\n                                                // @ts-expect-error - Complex form data type\n                                                displayValue={(item) => `${item.item_number} - ${item.name}`}\n                                                error={errors.item_id}\n                                                required\n                                            />\n\n                                            {selectedItem && (\n                                                <div className=\"mt-4 p-4 bg-muted/20 rounded-lg\">\n                                                    <p className=\"text-sm font-medium\">{selectedItem.name}</p>\n                                                    <p className=\"text-sm text-muted-foreground mt-1\">\n                                                        {selectedItem.description}\n                                                    </p>\n                                                    <div className=\"flex gap-4 mt-2\">\n                                                        <Badge variant=\"outline\">{selectedItem.category?.name || ''}</Badge>\n                                                        <span className=\"text-sm text-muted-foreground\">\n                                                            Lead time: {selectedItem.manufacturing_lead_time_days} days\n                                                        </span>\n                                                    </div>\n                                                </div>\n                                            )}\n                                        </div>\n                                    ) : (\n                                        <div>\n                                            <ItemSelect\n                                                label=\"Select Bill of Materials\"\n                                                items={billsOfMaterial}\n                                                value={data.bill_of_material_id?.toString() || ''}\n                                                onValueChange={(value) => setData('bill_of_material_id', value ? parseInt(value) : null)}\n                                                placeholder=\"Select a BOM...\"\n                                                // @ts-expect-error - Complex form data type\n                                                displayValue={(bom) => `${bom.bom_number} - ${bom.name}`}\n                                                error={errors.bill_of_material_id}\n                                                required\n                                            />\n\n                                            {selectedBOM && (\n                                                <div className=\"mt-4 space-y-4\">\n                                                    <div className=\"p-4 bg-muted/20 rounded-lg\">\n                                                        <div className=\"flex items-center gap-2\">\n                                                            <span className=\"text-sm font-medium\">\n                                                                {selectedBOM.name}\n                                                            </span>\n                                                            <Badge variant=\"secondary\" className=\"text-xs\">\n                                                                Version {selectedBOM.current_version?.version_number || 1}\n                                                            </Badge>\n                                                        </div>\n                                                        {selectedBOM.description && (\n                                                            <p className=\"text-sm text-muted-foreground mt-1\">\n                                                                {selectedBOM.description}\n                                                            </p>\n                                                        )}\n                                                        <div className=\"flex gap-4 mt-2\">\n                                                            <Badge variant=\"outline\">\n                                                                {(selectedBOM as any).item_masters_count} items\n                                                            </Badge>\n                                                        </div>\n                                                    </div>\n\n                                                    <Alert>\n                                                        <Info className=\"h-4 w-4\" />\n                                                        <AlertDescription>\n                                                            This will create {bomItems.length} child orders\n                                                            for the items in this BOM\n                                                        </AlertDescription>\n                                                    </Alert>\n                                                </div>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {/* Step 3: Order Details */}\n                            {currentStep === 3 && (\n                                <div className=\"space-y-6\">\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                        <div>\n                                            <Label htmlFor=\"quantity\">Quantity</Label>\n                                            <Input\n                                                id=\"quantity\"\n                                                type=\"number\"\n                                                value={data.quantity}\n                                                onChange={(e) => setData('quantity', parseFloat(e.target.value) || 0)}\n                                                min={0.01}\n                                                step={0.01}\n                                                required\n                                            />\n                                            <InputError message={errors.quantity} />\n                                        </div>\n\n                                        <div>\n                                            <Label htmlFor=\"unit_of_measure\">Unit of Measure</Label>\n                                            <Input\n                                                id=\"unit_of_measure\"\n                                                value={data.unit_of_measure}\n                                                onChange={(e) => setData('unit_of_measure', e.target.value)}\n                                                required\n                                            />\n                                            <InputError message={errors.unit_of_measure} />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                        <div>\n                                            <Label htmlFor=\"priority\">Priority (0-100)</Label>\n                                            <div className=\"flex items-center gap-4 mt-2\">\n                                                <Input\n                                                    id=\"priority\"\n                                                    type=\"range\"\n                                                    min={0}\n                                                    max={100}\n                                                    value={data.priority}\n                                                    onChange={(e) => setData('priority', parseInt(e.target.value))}\n                                                    className=\"flex-1\"\n                                                />\n                                                <span className=\"w-12 text-center font-medium\">\n                                                    {data.priority}\n                                                </span>\n                                            </div>\n                                            <p className=\"text-sm text-muted-foreground mt-1\">\n                                                Higher values indicate higher priority\n                                            </p>\n                                        </div>\n\n                                        <div>\n                                            <Label htmlFor=\"requested_date\">Requested Date</Label>\n                                            <Input\n                                                id=\"requested_date\"\n                                                type=\"date\"\n                                                value={data.requested_date}\n                                                onChange={(e) => setData('requested_date', e.target.value)}\n                                            />\n                                            <InputError message={errors.requested_date} />\n                                        </div>\n                                    </div>\n\n                                    <Separator />\n\n                                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                        <ItemSelect\n                                            label=\"Source Type\"\n                                            items={Object.entries(sourceTypes).map(([value, label]) => ({\n                                                id: value,\n                                                name: label,\n                                            }))}\n                                            value={data.source_type}\n                                            onValueChange={(value) => setData('source_type', value)}\n                                            // @ts-expect-error\n                                            displayValue={(item) => item.name}\n                                        />\n\n                                        <div>\n                                            <Label htmlFor=\"source_reference\">Source Reference</Label>\n                                            <Input\n                                                id=\"source_reference\"\n                                                value={data.source_reference}\n                                                onChange={(e) => setData('source_reference', e.target.value)}\n                                                placeholder=\"e.g., SO-12345\"\n                                            />\n                                            <InputError message={errors.source_reference} />\n                                        </div>\n                                    </div>\n\n                                    {/* Child Orders Preview for BOM */}\n                                    {data.order_type === 'bom' && bomItems.length > 0 && (\n                                        <div className=\"space-y-4\">\n                                            <Separator />\n                                            <div>\n                                                <h3 className=\"font-medium mb-3\">Child Orders Preview</h3>\n                                                <div className=\"border rounded-lg overflow-hidden\">\n                                                    <div className=\"max-h-64 overflow-auto\">\n                                                        <table className=\"w-full\">\n                                                            <thead className=\"bg-muted/50 sticky top-0\">\n                                                                <tr className=\"text-sm\">\n                                                                    <th className=\"text-left p-3\">Item</th>\n                                                                    <th className=\"text-right p-3\">Quantity</th>\n                                                                    <th className=\"text-left p-3\">UOM</th>\n                                                                </tr>\n                                                            </thead>\n                                                            <tbody className=\"divide-y\">\n                                                                {bomItems.map((bomItem: any, index: number) => (\n                                                                    <tr key={index} className=\"text-sm\">\n                                                                        <td className=\"p-3\">\n                                                                            <div>\n                                                                                <p className=\"font-medium\">\n                                                                                    {bomItem.item?.item_number}\n                                                                                </p>\n                                                                                <p className=\"text-muted-foreground\">\n                                                                                    {bomItem.item?.name}\n                                                                                </p>\n                                                                            </div>\n                                                                        </td>\n                                                                        <td className=\"text-right p-3\">\n                                                                            {(bomItem.quantity * data.quantity).toFixed(2)}\n                                                                        </td>\n                                                                        <td className=\"p-3\">\n                                                                            {bomItem.unit_of_measure}\n                                                                        </td>\n                                                                    </tr>\n                                                                ))}\n                                                            </tbody>\n                                                        </table>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                </div>\n                            )}\n\n                            {/* Step 4: Configuration */}\n                            {currentStep === 4 && (\n                                <div className=\"space-y-6\">\n                                    {/* Parent-Child Configuration */}\n                                    {data.order_type === 'bom' && (\n                                        <div>\n                                            <h3 className=\"font-medium mb-4\">Parent-Child Configuration</h3>\n                                            <Card>\n                                                <CardContent className=\"pt-6\">\n                                                    <div className=\"flex items-center space-x-2\">\n                                                        <Checkbox\n                                                            id=\"auto-complete\"\n                                                            checked={data.auto_complete_on_children}\n                                                            onCheckedChange={(checked) =>\n                                                                setData('auto_complete_on_children', !!checked)\n                                                            }\n                                                        />\n                                                        <Label\n                                                            htmlFor=\"auto-complete\"\n                                                            className=\"font-normal cursor-pointer\"\n                                                        >\n                                                            Auto-complete parent order when all children complete\n                                                        </Label>\n                                                    </div>\n                                                    <p className=\"text-sm text-muted-foreground mt-2 ml-6\">\n                                                        The parent order will automatically transition to completed\n                                                        status when all child orders are finished\n                                                    </p>\n                                                </CardContent>\n                                            </Card>\n                                        </div>\n                                    )}\n\n                                    {/* Route Configuration */}\n                                    <div>\n                                        <h3 className=\"font-medium mb-4\">Manufacturing Route</h3>\n                                        <Card>\n                                            <CardContent className=\"pt-6\">\n                                                <RadioGroup\n                                                    value={data.route_creation_mode}\n                                                    onValueChange={(value: 'manual' | 'template' | 'auto') =>\n                                                        setData('route_creation_mode', value)\n                                                    }\n                                                    className=\"space-y-4\"\n                                                >\n                                                    <div className=\"flex items-start space-x-3\">\n                                                        <RadioGroupItem value=\"manual\" id=\"manual\" className=\"mt-1\" />\n                                                        <div>\n                                                            <Label htmlFor=\"manual\" className=\"font-normal cursor-pointer\">\n                                                                <div className=\"font-medium\">Manual Route Creation</div>\n                                                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                                                    Create routes manually after order release\n                                                                </p>\n                                                            </Label>\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"flex items-start space-x-3\">\n                                                        <RadioGroupItem value=\"template\" id=\"template\" className=\"mt-1\" />\n                                                        <div className=\"flex-1\">\n                                                            <Label htmlFor=\"template\" className=\"font-normal cursor-pointer\">\n                                                                <div className=\"font-medium\">Use Route Template</div>\n                                                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                                                    Apply a predefined route template\n                                                                </p>\n                                                            </Label>\n\n                                                            {data.route_creation_mode === 'template' && (\n                                                                <div className=\"mt-3\">\n                                                                    <ItemSelect\n                                                                        label=\"\"\n                                                                        items={filteredRouteTemplates}\n                                                                        value={data.route_template_id?.toString() || ''}\n                                                                        onValueChange={(value) =>\n                                                                            setData('route_template_id', value ? parseInt(value) : null)\n                                                                        }\n                                                                        placeholder=\"Select a route template...\"\n                                                                        // @ts-expect-error - Complex form data type\n                                                                        displayValue={(template) => template.name}\n                                                                    />\n\n                                                                    {data.route_template_id && (\n                                                                        <div className=\"mt-3 p-3 bg-muted/20 rounded-lg\">\n                                                                            <p className=\"text-sm\">\n                                                                                {filteredRouteTemplates.find(\n                                                                                    t => t.id === data.route_template_id\n                                                                                )?.description}\n                                                                            </p>\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            )}\n                                                        </div>\n                                                    </div>\n\n                                                    <div className=\"flex items-start space-x-3\">\n                                                        <RadioGroupItem value=\"auto\" id=\"auto\" className=\"mt-1\" />\n                                                        <div>\n                                                            <Label htmlFor=\"auto\" className=\"font-normal cursor-pointer\">\n                                                                <div className=\"font-medium\">Auto-create from Defaults</div>\n                                                                <p className=\"text-sm text-muted-foreground mt-1\">\n                                                                    Automatically create routes based on item category\n                                                                </p>\n                                                            </Label>\n                                                        </div>\n                                                    </div>\n                                                </RadioGroup>\n                                            </CardContent>\n                                        </Card>\n                                    </div>\n                                </div>\n                            )}\n                        </CardContent>\n\n                        <CardFooter className=\"flex justify-between\">\n                            <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={handlePrevious}\n                                disabled={currentStep === 1}\n                            >\n                                <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                                Previous\n                            </Button>\n\n                            {currentStep < steps.length ? (\n                                <Button\n                                    type=\"button\"\n                                    onClick={handleNext}\n                                    disabled={!isStepValid(currentStep)}\n                                >\n                                    Next\n                                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                                </Button>\n                            ) : (\n                                <Button\n                                    type=\"submit\"\n                                    disabled={processing || !isStepValid(currentStep)}\n                                >\n                                    {processing ? 'Creating...' : 'Create Order'}\n                                </Button>\n                            )}\n                        </CardFooter>\n                    </form>\n                </Card>\n            </div>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/manufacturing-orders/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6086,6089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6086,6089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6197,6200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6197,6200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":345,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13730,13733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13730,13733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":349,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13954,13957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13954,13957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":350,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14070,14073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14070,14073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14255,14258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14255,14258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":361,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14724,14727],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14724,14727],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14824,14827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14824,14827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14861,14864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14861,14864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":363,"column":129,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":132,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14901,14904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14901,14904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":365,"column":113,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":365,"endColumn":116,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15101,15104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15101,15104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from '@inertiajs/react';\nimport { router } from '@inertiajs/react';\nimport {\n    Factory,\n    Package,\n    GitBranch,\n    Calendar,\n    AlertCircle,\n    Workflow\n} from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport AppLayout from '@/layouts/app-layout';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport CreateManufacturingOrderDialog from '@/components/production/CreateManufacturingOrderDialog';\nimport { ColumnConfig } from '@/types/shared';\nimport { ManufacturingOrder, Item, BillOfMaterial, RouteTemplate } from '@/types/production';\ninterface Props {\n    orders: {\n        data: ManufacturingOrder[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    statuses: Record<string, string>;\n    filters: {\n        status?: string;\n        search?: string;\n        parent_id?: string;\n    };\n    items?: Item[];\n    billsOfMaterial?: BillOfMaterial[];\n    routeTemplates?: RouteTemplate[];\n    sourceTypes?: Record<string, string>;\n}\nexport default function ManufacturingOrders({\n    orders,\n    statuses,\n    filters,\n    items = [],\n    billsOfMaterial = [],\n    routeTemplates = [],\n    sourceTypes = {}\n}: Props) {\n    const [searchValue, setSearchValue] = useState(filters.search || '');\n    const [statusFilter] = useState(filters.status || '');\n    const [parentFilter] = useState(filters.parent_id || '');\n    const [loading] = useState(false);\n    const [deleteOrder, setDeleteOrder] = useState<ManufacturingOrder | null>(null);\n    const [showCreateDialog, setShowCreateDialog] = useState(false);\n    const handleSearchChange = (value: string) => {\n        setSearchValue(value);\n        router.get(route('production.orders.index'), {\n            ...filters,\n            search: value\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n            only: ['orders']\n        });\n    };\n    const handleStatusFilter = (value: string) => {\n        router.get(route('production.orders.index'), {\n            ...filters,\n            status: value === 'all' ? undefined : value,\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleParentFilter = (value: string) => {\n        router.get(route('production.orders.index'), {\n            ...filters,\n            parent_id: value === 'all' ? undefined : value,\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleDelete = async () => {\n        if (!deleteOrder) return;\n        try {\n            await router.delete(route('production.orders.destroy', deleteOrder.id), {\n                preserveScroll: true,\n                onSuccess: () => {\n                    setDeleteOrder(null);\n                },\n                onError: () => {\n                    console.error('Failed to delete order');\n                }\n            });\n        } catch (error) {\n            console.error('Delete error:', error);\n        }\n    };\n    const getStatusBadgeVariant = (status: string) => {\n        switch (status) {\n            case 'draft':\n                return 'secondary';\n            case 'planned':\n                return 'outline';\n            case 'released':\n            case 'in_progress':\n            case 'completed':\n                return 'default';\n            case 'cancelled':\n                return 'destructive';\n            default:\n                return 'secondary';\n        }\n    };\n    const getPriorityColor = (priority: number) => {\n        if (priority >= 80) return 'text-red-600';\n        if (priority >= 60) return 'text-orange-600';\n        if (priority >= 40) return 'text-yellow-600';\n        return 'text-gray-600';\n    };\n    const columns: ColumnConfig[] = [\n        {\n            key: 'order_number',\n            label: 'Order Number',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                <div className=\"flex items-center gap-2\">\n                    <Link\n                        href={route('production.orders.show', order.id)}\n                        className=\"font-medium text-primary hover:underline\"\n                    >\n                        {value as React.ReactNode}\n                    </Link>\n                    {order.parent_id ? (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                            <GitBranch className=\"h-3 w-3 mr-1\" />\n                            Child\n                        </Badge>\n                    ) : null}\n                    {(order.child_orders_count as number) > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                            <GitBranch className=\"h-3 w-3 mr-1\" />\n                            {order.child_orders_count as React.ReactNode}\n                        </Badge>\n                    )}\n                    {order.manufacturing_route ? (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                            <Workflow className=\"h-3 w-3\" />\n                        </Badge>\n                    ) : null}\n                </div>\n            ),\n        },\n        {\n            key: 'item',\n            label: 'Item',\n            width: 'w-[250px]',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                <div>\n                    <p className=\"font-medium\">{(order.item as any)?.item_number || '-'}</p>\n                    <p className=\"text-sm text-muted-foreground\">{(order.item as any)?.name || '-'}</p>\n                </div>\n            ),\n        },\n        {\n            key: 'quantity',\n            label: 'Quantity',\n            width: 'w-[120px]',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                <div>\n                    <p className=\"font-medium\">\n                        {order.quantity as React.ReactNode} {order.unit_of_measure as React.ReactNode}\n                    </p>\n                    {(order.quantity_completed as number) > 0 && (\n                        <p className=\"text-sm text-muted-foreground\">\n                            {order.quantity_completed as React.ReactNode} completed\n                        </p>\n                    )}\n                </div>\n            ),\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            width: 'w-[120px]',\n            render: (value: unknown) => (\n                <Badge variant={getStatusBadgeVariant(value as string)}>\n                    {statuses[value as string] || String(value)}\n                </Badge>\n            ),\n        },\n        {\n            key: 'priority',\n            label: 'Priority',\n            width: 'w-[80px]',\n            render: (value: unknown) => (\n                <span className={`font-medium ${getPriorityColor(value as number)}`}>\n                    {value as React.ReactNode}\n                </span>\n            ),\n        },\n        {\n            key: 'requested_date',\n            label: 'Requested',\n            width: 'w-[120px]',\n            render: (value: unknown) => (\n                <div className=\"text-sm\">\n                    {value ? new Date(value as string | number | Date).toLocaleDateString() : '-'}\n                </div>\n            ),\n        },\n        {\n            key: 'progress',\n            label: 'Progress',\n            width: 'w-[120px]',\n            render: (value: unknown, order: Record<string, unknown>) => {\n                const progress = (order.quantity as number) > 0\n                    ? Math.round(((order.quantity_completed as number) / (order.quantity as number)) * 100)\n                    : 0;\n                return (\n                    <div className=\"w-24\">\n                        <div className=\"flex items-center justify-between text-sm mb-1\">\n                            <span>{progress}%</span>\n                        </div>\n                        <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n                            <div\n                                className=\"h-full bg-primary transition-all\"\n                                style={{ width: `${progress}%` }}\n                            />\n                        </div>\n                    </div>\n                );\n            },\n        },\n    ];\n    const stats = React.useMemo(() => {\n        const statusCounts = orders.data.reduce((acc, order) => {\n            acc[order.status] = (acc[order.status] || 0) + 1;\n            return acc;\n        }, {} as Record<string, number>);\n        return [\n            {\n                title: 'Total Orders',\n                value: orders.total,\n                icon: Factory,\n                color: 'text-blue-600',\n            },\n            {\n                title: 'In Progress',\n                value: statusCounts['in_progress'] || 0,\n                icon: Package,\n                color: 'text-green-600',\n            },\n            {\n                title: 'Released',\n                value: statusCounts['released'] || 0,\n                icon: Calendar,\n                color: 'text-yellow-600',\n            },\n            {\n                title: 'Draft',\n                value: statusCounts['draft'] || 0,\n                icon: AlertCircle,\n                color: 'text-gray-600',\n            },\n        ];\n    }, [orders]);\n    const breadcrumbs = [\n        { title: 'Production', href: '/production' },\n        { title: 'Manufacturing Orders', href: '' }\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <ListLayout\n                title=\"Manufacturing Orders\"\n                description=\"Manage production orders and track their progress\"\n                searchPlaceholder=\"Search by order number or item...\"\n                searchValue={searchValue}\n                onSearchChange={handleSearchChange}\n                onCreateClick={() => setShowCreateDialog(true)}\n                createButtonText=\"Create Order\"\n                actions={\n                    <div className=\"flex gap-2\">\n                        <Select value={parentFilter || 'all'} onValueChange={handleParentFilter}>\n                            <SelectTrigger className=\"w-48\">\n                                <SelectValue placeholder=\"Filter by type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">All Orders</SelectItem>\n                                <SelectItem value=\"root\">Parent Orders Only</SelectItem>\n                            </SelectContent>\n                        </Select>\n                        <Select value={statusFilter || 'all'} onValueChange={handleStatusFilter}>\n                            <SelectTrigger className=\"w-48\">\n                                <SelectValue placeholder=\"Filter by status\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">All Statuses</SelectItem>\n                                {Object.entries(statuses).map(([value, label]) => (\n                                    <SelectItem key={value} value={value}>\n                                        {label}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                }\n            >\n                {/* Stats Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                    {stats.map((stat, index) => {\n                        const Icon = stat.icon;\n                        return (\n                            <Card key={index}>\n                                <CardContent className=\"p-6\">\n                                    <div className=\"flex items-center justify-between\">\n                                        <div>\n                                            <p className=\"text-sm text-muted-foreground\">\n                                                {stat.title}\n                                            </p>\n                                            <p className=\"text-2xl font-bold mt-1\">\n                                                {stat.value}\n                                            </p>\n                                        </div>\n                                        <Icon className={`h-8 w-8 ${stat.color} opacity-20`} />\n                                    </div>\n                                </CardContent>\n                            </Card>\n                        );\n                    })}\n                </div>\n                {/* Data Table */}\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={orders.data as unknown as Record<string, unknown>[]}\n                        columns={columns}\n                        loading={loading}\n                        onRowClick={(order) => router.visit(route('production.orders.show', (order as any).id))}\n                        actions={(order) => (\n                            <EntityActionDropdown\n                                onEdit={\n                                    ['draft', 'planned'].includes((order as any).status)\n                                        ? () => router.visit(route('production.orders.edit', (order as any).id))\n                                        : undefined\n                                }\n                                onDelete={\n                                    (order as any).status === 'draft'\n                                        ? () => setDeleteOrder(order as unknown as ManufacturingOrder)\n                                        : undefined\n                                }\n                                additionalActions={[\n                                    {\n                                        label: 'View',\n                                        onClick: () => router.visit(route('production.orders.show', (order as any).id))\n                                    },\n                                    ...(((order as any).status === 'draft' || (order as any).status === 'planned') && (order as any).manufacturing_route ? [{\n                                        label: 'Release',\n                                        onClick: () => router.post(route('production.orders.release', (order as any).id))\n                                    }] : [])\n                                    // View Children action temporarily disabled - route not implemented yet\n                                ]}\n                            />\n                        )}\n                    />\n                    <EntityPagination\n                        pagination={{\n                            current_page: orders.current_page,\n                            last_page: orders.last_page,\n                            per_page: orders.per_page,\n                            total: orders.total,\n                            from: orders.from,\n                            to: orders.to\n                        }}\n                        onPageChange={(page) => router.get(route('production.orders.index'), { ...filters, page })}\n                        onPerPageChange={(perPage) => router.get(route('production.orders.index'), { ...filters, per_page: perPage })}\n                    />\n                </div>\n            </ListLayout>\n            {/* Create Order Dialog */}\n            <CreateManufacturingOrderDialog\n                open={showCreateDialog}\n                onOpenChange={setShowCreateDialog}\n                items={items}\n                billsOfMaterial={billsOfMaterial}\n                routeTemplates={routeTemplates}\n                sourceTypes={sourceTypes}\n            />\n            {/* Delete Dialog */}\n            <EntityDeleteDialog\n                open={!!deleteOrder}\n                onOpenChange={(open) => !open && setDeleteOrder(null)}\n                entityLabel={deleteOrder ? `order ${deleteOrder.order_number}` : ''}\n                onConfirm={handleDelete}\n            />\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/manufacturing-orders/show.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1439,1442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1439,1442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1564,1567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1564,1567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2725,2728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2725,2728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3977,3980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3977,3980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4062,4065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4062,4065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4230,4233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4230,4233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6671,6674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6671,6674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":478,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22671,22674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22671,22674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Link } from '@inertiajs/react';\nimport { router, usePage } from '@inertiajs/react';\nimport {\n    Package,\n    Calendar,\n    GitBranch,\n    AlertCircle,\n    CheckCircle,\n    Clock,\n    Play,\n    XCircle,\n    FileText,\n    QrCode\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Progress } from '@/components/ui/progress';\nimport { Separator } from '@/components/ui/separator';\nimport {\n    Tooltip,\n    TooltipContent,\n    TooltipProvider,\n    TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/show-layout';\nimport { TextInput } from '@/components/TextInput';\nimport { ItemSelect } from '@/components/ItemSelect';\nimport { ManufacturingOrder } from '@/types/production';\nimport { cn } from '@/lib/utils';\nimport { useForm } from '@inertiajs/react';\nimport HierarchicalConfiguration from '@/components/production/HierarchicalConfiguration';\nimport ManufacturingOrderRouteTab from '@/components/production/ManufacturingOrderRouteTab';\nimport axios from 'axios';\nimport { toast } from 'sonner';\ninterface Props {\n    order: ManufacturingOrder;\n    canRelease: boolean;\n    canCancel: boolean;\n    canCreateRoute: boolean;\n    canManageRoutes?: boolean;\n    templates?: any[]; // Route templates for creating new routes\n    workCells?: any[];\n    stepTypes?: Record<string, string>;\n    forms?: any[];\n}\nfunction FieldGroup({ title, children }: { title?: string; children: React.ReactNode }) {\n    return (\n        <div className=\"space-y-4\">\n            {title && <h3 className=\"text-lg font-semibold\">{title}</h3>}\n            <div className=\"grid gap-4 md:grid-cols-4\">\n                {children}\n            </div>\n        </div>\n    );\n}\nfunction StatCard({ label, value, icon: Icon, className }: { label: string; value: string | number; icon: React.ElementType; className?: string }) {\n    return (\n        <div className=\"flex items-center gap-4 rounded-lg border p-4\">\n            <div className={cn(\"p-2 rounded-lg\", className)}>\n                <Icon className=\"h-5 w-5\" />\n            </div>\n            <div>\n                <p className=\"text-sm text-muted-foreground\">{label}</p>\n                <p className=\"text-2xl font-bold\">{value}</p>\n            </div>\n        </div>\n    );\n}\nexport default function ShowManufacturingOrder({ order, canRelease, canCancel, canCreateRoute, canManageRoutes = false, templates = [], workCells = [], stepTypes = {}, forms = [] }: Props) {\n    const { props } = usePage();\n    const flash = props.flash as any;\n    const [generatingQr, setGeneratingQr] = useState(false);\n    // Check URL params - passed from backend\n    const openRouteBuilderParam = props.openRouteBuilder || null;\n    // Create a form instance for view-only display\n    const inertiaForm = useForm({\n        order_number: order.order_number,\n        item_id: order.item_id?.toString() || '',\n        priority: order.priority,\n        source_type: order.source_type || 'manual',\n        source_reference: order.source_reference || '',\n        quantity: order.quantity,\n        unit_of_measure: order.unit_of_measure,\n        requested_date: order.requested_date ? new Date(order.requested_date).toLocaleDateString() : '',\n        planned_start_date: order.planned_start_date ? new Date(order.planned_start_date).toLocaleDateString() : '',\n        actual_start_date: order.actual_start_date ? new Date(order.actual_start_date).toLocaleDateString() : '',\n        actual_end_date: order.actual_end_date ? new Date(order.actual_end_date).toLocaleDateString() : '',\n        status: order.status,\n        bom_id: order.bill_of_material_id?.toString() || '',\n    });\n    // Create a wrapper that matches the TextInput interface\n    const form = {\n        data: inertiaForm.data as Record<string, any>,\n        setData: (name: string, value: unknown) => inertiaForm.setData(name as any, value),\n        errors: inertiaForm.errors as Partial<Record<string, string>>,\n        clearErrors: (...fields: string[]) => inertiaForm.clearErrors(...(fields as any)),\n    };\n    const getStatusBadgeVariant = (status: string): \"default\" | \"secondary\" | \"outline\" | \"destructive\" => {\n        switch (status) {\n            case 'draft':\n                return 'secondary';\n            case 'planned':\n                return 'outline';\n            case 'released':\n            case 'in_progress':\n            case 'completed':\n                return 'default';\n            case 'cancelled':\n                return 'destructive';\n            default:\n                return 'secondary';\n        }\n    };\n    const getStatusIcon = (status: string) => {\n        switch (status) {\n            case 'draft':\n                return <FileText className=\"h-4 w-4\" />;\n            case 'planned':\n                return <Calendar className=\"h-4 w-4\" />;\n            case 'released':\n                return <Play className=\"h-4 w-4\" />;\n            case 'in_progress':\n                return <Clock className=\"h-4 w-4\" />;\n            case 'completed':\n                return <CheckCircle className=\"h-4 w-4\" />;\n            case 'cancelled':\n                return <XCircle className=\"h-4 w-4\" />;\n            default:\n                return <AlertCircle className=\"h-4 w-4\" />;\n        }\n    };\n    const progress = order.quantity > 0\n        ? Math.round((order.quantity_completed / order.quantity) * 100)\n        : 0;\n    const breadcrumbs = [\n        { title: 'Production', href: '/production' },\n        { title: 'Manufacturing Orders', href: '/production/orders' },\n        { title: order.order_number, href: '' }\n    ];\n    const handleRelease = () => {\n        router.post(route('production.orders.release', order.id), {}, {\n            onSuccess: () => {\n                // Success handled by controller\n            },\n        });\n    };\n    const handleCancel = () => {\n        if (confirm('Are you sure you want to cancel this order?')) {\n            router.post(route('production.orders.cancel', order.id), {\n                reason: 'Cancelled by user'\n            });\n        }\n    };\n    const handleGenerateQrTag = async () => {\n        setGeneratingQr(true);\n        try {\n            const response = await axios.post(route('production.qr-tags.order', order.id));\n            if (response.data.success && response.data.pdf_url) {\n                window.open(response.data.pdf_url, '_blank');\n                toast.success('Etiqueta QR gerada com sucesso!');\n            }\n        } catch (error: any) {\n            toast.error(error.response?.data?.message || 'Erro ao gerar etiqueta QR');\n        } finally {\n            setGeneratingQr(false);\n        }\n    };\n    // Tab definitions\n    const tabs = [\n        {\n            id: 'overview',\n            label: 'Overview',\n            content: (\n                <div className=\"space-y-6 py-6\">\n                    {/* Progress Section */}\n                    <div className=\"space-y-4\">\n                        <h3 className=\"text-lg font-semibold\">Order Progress</h3>\n                        <div className=\"space-y-4\">\n                            <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\n                                <StatCard\n                                    label=\"Ordered\"\n                                    value={order.quantity}\n                                    icon={Package}\n                                    className=\"bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400\"\n                                />\n                                <StatCard\n                                    label=\"Completed\"\n                                    value={order.quantity_completed}\n                                    icon={CheckCircle}\n                                    className=\"bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400\"\n                                />\n                                <StatCard\n                                    label=\"Scrapped\"\n                                    value={order.quantity_scrapped}\n                                    icon={XCircle}\n                                    className=\"bg-red-100 text-red-600 dark:bg-red-900/20 dark:text-red-400\"\n                                />\n                            </div>\n                            <div>\n                                <div className=\"flex justify-between text-sm mb-2\">\n                                    <span>Overall Completion</span>\n                                    <span className=\"font-medium\">{progress}%</span>\n                                </div>\n                                <Progress value={progress} className=\"h-3\" />\n                            </div>\n                        </div>\n                    </div>\n                    <Separator />\n                    {/* Order Information */}\n                    <FieldGroup>\n                        <TextInput\n                            form={form}\n                            name=\"order_number\"\n                            label=\"Order Number\"\n                            placeholder=\"Order Number\"\n                            view={true}\n                        />\n                        <div className=\"grid gap-2\">\n                            <label className=\"text-sm font-medium\">Priority</label>\n                            <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                <span className={cn(\n                                    \"font-medium\",\n                                    order.priority >= 80 && \"text-red-600\",\n                                    order.priority >= 60 && order.priority < 80 && \"text-orange-600\",\n                                    order.priority >= 40 && order.priority < 60 && \"text-yellow-600\",\n                                    order.priority < 40 && \"text-gray-600\"\n                                )}>\n                                    {order.priority}\n                                </span>\n                            </div>\n                        </div>\n                        <ItemSelect\n                            label=\"Source Type\"\n                            items={[\n                                { id: 1, name: 'Manual', value: 'manual' },\n                                { id: 2, name: 'Sales Order', value: 'sales_order' },\n                                { id: 3, name: 'Forecast', value: 'forecast' },\n                            ]}\n                            value={form.data.source_type}\n                            onValueChange={() => { }}\n                            view={true}\n                        />\n                        <TextInput\n                            form={form}\n                            name=\"source_reference\"\n                            label=\"Reference\"\n                            placeholder=\"No reference\"\n                            view={true}\n                        />\n                        {order.parent_id && (\n                            <div className=\"grid gap-2\">\n                                <label className=\"text-sm font-medium\">Parent Order</label>\n                                <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                    <Link\n                                        href={route('production.orders.show', order.parent_id)}\n                                        className=\"font-medium text-primary hover:underline\"\n                                    >\n                                        {order.parent?.order_number}\n                                    </Link>\n                                </div>\n                            </div>\n                        )}\n                    </FieldGroup>\n                    {/* Item Details */}\n                    <FieldGroup>\n                        <div className=\"grid gap-2\">\n                            <label className=\"text-sm font-medium\">Item Number</label>\n                            <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                {order.item?.item_number || '—'}\n                            </div>\n                        </div>\n                        <div className=\"grid gap-2\">\n                            <label className=\"text-sm font-medium\">Item Name</label>\n                            <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                {order.item?.name || '—'}\n                            </div>\n                        </div>\n                        <div className=\"grid gap-2\">\n                            <label className=\"text-sm font-medium\">Category</label>\n                            <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                {typeof order.item?.category === 'string' ? order.item.category : order.item?.category?.name || '—'}\n                            </div>\n                        </div>\n                        <TextInput\n                            form={form}\n                            name=\"unit_of_measure\"\n                            label=\"Unit of Measure\"\n                            placeholder=\"—\"\n                            view={true}\n                        />\n                        {order.bill_of_material_id && (\n                            <div className=\"grid gap-2\">\n                                <label className=\"text-sm font-medium\">BOM</label>\n                                <div className=\"rounded-md border bg-muted/20 p-2 text-sm\">\n                                    <Link\n                                        href={route('production.bom.show', order.bill_of_material_id)}\n                                        className=\"font-medium text-primary hover:underline\"\n                                    >\n                                        <span className=\"text-sm text-muted-foreground\">\n                                            {order.bill_of_material?.bom_number}\n                                        </span>\n                                    </Link>\n                                </div>\n                            </div>\n                        )}\n                    </FieldGroup>\n                    {/* Schedule */}\n                    <FieldGroup>\n                        <TextInput\n                            form={form}\n                            name=\"requested_date\"\n                            label=\"Requested Date\"\n                            placeholder=\"Not set\"\n                            view={true}\n                        />\n                        <TextInput\n                            form={form}\n                            name=\"planned_start_date\"\n                            label=\"Planned Start\"\n                            placeholder=\"Not set\"\n                            view={true}\n                        />\n                        <TextInput\n                            form={form}\n                            name=\"actual_start_date\"\n                            label=\"Actual Start\"\n                            placeholder=\"Not set\"\n                            view={true}\n                        />\n                        <TextInput\n                            form={form}\n                            name=\"actual_end_date\"\n                            label=\"Actual End\"\n                            placeholder=\"Not set\"\n                            view={true}\n                        />\n                    </FieldGroup>\n                    {/* Parent-Child Configuration */}\n                    {(order.parent_id || order.child_orders_count > 0 || (order.children && order.children.length > 0)) && (\n                        <>\n                            <Separator />\n                            <div className=\"space-y-4\">\n                                {order.parent_id && (\n                                    <Alert>\n                                        <GitBranch className=\"h-4 w-4\" />\n                                        <AlertDescription>\n                                            This is a child order of{' '}\n                                            <Link\n                                                href={route('production.orders.show', order.parent_id)}\n                                                className=\"font-medium text-primary hover:underline\"\n                                            >\n                                                {order.parent?.order_number}\n                                            </Link>\n                                        </AlertDescription>\n                                    </Alert>\n                                )}\n                                {(order.child_orders_count > 0 || (order.children && order.children.length > 0)) && (\n                                    <div className=\"space-y-4\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <div>\n                                                <p className=\"font-medium\">Child Orders</p>\n                                                <p className=\"text-sm text-muted-foreground\">\n                                                    {order.completed_child_orders_count || 0} of {order.child_orders_count || (order.children?.length || 0)} completed\n                                                </p>\n                                            </div>\n                                            {/* View All button temporarily disabled - route not implemented yet */}\n                                        </div>\n                                        {order.auto_complete_on_children && (\n                                            <Alert>\n                                                <CheckCircle className=\"h-4 w-4\" />\n                                                <AlertDescription>\n                                                    This order will auto-complete when all child orders are finished\n                                                </AlertDescription>\n                                            </Alert>\n                                        )}\n                                    </div>\n                                )}\n                            </div>\n                        </>\n                    )}\n                </div>\n            )\n        },\n        ...((order.child_orders_count > 0 || (order.children && order.children.length > 0)) ? [{\n            id: 'children',\n            label: `Child Orders (${order.child_orders_count || (order.children?.length || 0)})`,\n            content: (\n                <div className=\"h-[calc(100vh-300px)]\">\n                    {/* Show current order as root of the tree */}\n                    <HierarchicalConfiguration\n                        type=\"manufacturing-order\"\n                        orders={[{\n                            ...order,\n                            children: order.children || []\n                        }]}\n                        showActions={false}\n                        canEdit={false}\n                        routeTemplates={templates}\n                        canManageRoutes={canManageRoutes}\n                    />\n                </div>\n            )\n        }] : []),\n        {\n            id: 'routes',\n            label: 'Routes & Steps',\n            fullWidth: true,\n            content: (\n                <ManufacturingOrderRouteTab\n                    order={order}\n                    canCreateRoute={canCreateRoute}\n                    templates={templates}\n                    workCells={workCells}\n                    stepTypes={stepTypes}\n                    forms={forms}\n                    openRouteBuilder={openRouteBuilderParam as string | null | undefined}\n                />\n            )\n        },\n        {\n            id: 'history',\n            label: 'History',\n            content: (\n                <div className=\"space-y-4 py-6\">\n                    <h3 className=\"text-lg font-semibold\">Order History</h3>\n                    <div className=\"space-y-4\">\n                        <div className=\"flex items-start gap-3\">\n                            <div className=\"w-2 h-2 rounded-full bg-primary mt-2\"></div>\n                            <div>\n                                <p className=\"font-medium\">Order Created</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                    {new Date(order.created_at).toLocaleString()}\n                                    {order.created_by_user && ` by ${order.created_by_user.name}`}\n                                </p>\n                            </div>\n                        </div>\n                        {order.actual_start_date && (\n                            <div className=\"flex items-start gap-3\">\n                                <div className=\"w-2 h-2 rounded-full bg-blue-600 mt-2\"></div>\n                                <div>\n                                    <p className=\"font-medium\">Production Started</p>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                        {new Date(order.actual_start_date).toLocaleString()}\n                                    </p>\n                                </div>\n                            </div>\n                        )}\n                        {order.actual_end_date && (\n                            <div className=\"flex items-start gap-3\">\n                                <div className=\"w-2 h-2 rounded-full bg-green-600 mt-2\"></div>\n                                <div>\n                                    <p className=\"font-medium\">Production Completed</p>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                        {new Date(order.actual_end_date).toLocaleString()}\n                                    </p>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )\n        }\n    ];\n    const subtitle = (\n        <>\n            <span>{order.item?.name || 'Manufacturing Order'}</span>\n            {' '}\n            <Badge variant={getStatusBadgeVariant(order.status)} className=\"ml-2\">\n                {getStatusIcon(order.status)}\n                <span className=\"ml-1\">{order.status}</span>\n            </Badge>\n        </>\n    );\n    // Check if order has a route\n    const hasRoute = (order as any).has_route || (order.manufacturing_route && order.manufacturing_route.steps && order.manufacturing_route.steps.length > 0);\n    const shouldShowRelease = ['draft', 'planned'].includes(order.status);\n    // Additional actions for the header\n    const headerActions = (\n        <TooltipProvider>\n            <div className=\"flex gap-2\">\n                <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleGenerateQrTag}\n                    disabled={generatingQr}\n                >\n                    <QrCode className=\"h-4 w-4 mr-2\" />\n                    {generatingQr ? 'Gerando...' : 'Gerar QR'}\n                </Button>\n                {shouldShowRelease && (\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <span tabIndex={0}>\n                                <Button\n                                    onClick={handleRelease}\n                                    disabled={!canRelease || !hasRoute}\n                                >\n                                    <Play className=\"h-4 w-4 mr-2\" />\n                                    Release\n                                </Button>\n                            </span>\n                        </TooltipTrigger>\n                        {!hasRoute && (\n                            <TooltipContent>\n                                <p>Configure a manufacturing route before releasing</p>\n                            </TooltipContent>\n                        )}\n                    </Tooltip>\n                )}\n                {canCancel && (\n                    <Button variant=\"destructive\" onClick={handleCancel}>\n                        <XCircle className=\"h-4 w-4 mr-2\" />\n                        Cancel\n                    </Button>\n                )}\n            </div>\n        </TooltipProvider>\n    );\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <ShowLayout\n                title={order.order_number}\n                subtitle={subtitle}\n                editRoute={editRoute}\n                tabs={tabs}\n                defaultActiveTab={(flash?.openRouteBuilder || openRouteBuilderParam === '1') ? \"routes\" : \"overview\"}\n                actions={headerActions}\n                showEditButton={false}\n            />\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/orders/routes/create.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr-tracking/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1366,1369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1366,1369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Head, Link } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Card } from '@/components/ui/card';\nimport { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts';\nimport { QrCode, Package, Users, Activity, Eye, TrendingUp } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { Badge } from '@/components/ui/badge';\nimport { useState } from 'react';\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Produção',\n        href: '#',\n    },\n    {\n        title: 'Rastreamento QR',\n        href: '/production/qr-tracking/dashboard',\n    },\n];\ninterface Props {\n    statistics: {\n        total_scans: number;\n        today_scans: number;\n        active_items: number;\n        unique_operators: number;\n    };\n    recent_events: Array<{\n        id: number;\n        qr_code: string;\n        event_type: string;\n        event_data: any;\n        created_at: string;\n        scanned_by: {\n            id: number;\n            name: string;\n        } | null;\n    }>;\n    event_type_distribution: Record<string, number>;\n    daily_trends: Array<{\n        date: string;\n        count: number;\n    }>;\n}\nconst eventTypeColors: Record<string, string> = {\n    generated: '#10b981',\n    printed: '#3b82f6',\n    scan: '#8b5cf6',\n    start_production: '#f59e0b',\n    complete_production: '#22c55e',\n    ship: '#ef4444',\n};\nconst eventTypeLabels: Record<string, string> = {\n    generated: 'Gerado',\n    printed: 'Impresso',\n    scanned: 'Escaneado',\n    status_update: 'Atualização de Status',\n    location_change: 'Mudança de Local',\n};\nexport default function QrTrackingDashboard({ statistics, recent_events, event_type_distribution, daily_trends }: Props) {\n    const [search, setSearch] = useState('');\n    // Prepare data for pie chart\n    const pieData = Object.entries(event_type_distribution).map(([type, count]) => ({\n        name: eventTypeLabels[type] || type,\n        value: count,\n        color: eventTypeColors[type] || '#94a3b8',\n    }));\n    // Prepare data for bar chart\n    const barData = daily_trends.map(item => ({\n        date: format(new Date(item.date), 'MMM dd'),\n        scans: item.count,\n    }));\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        // This would filter the data if we had client-side filtering\n        // For server-side filtering, you'd need to implement it in the controller\n    };\n    const actions = (\n        <div className=\"flex gap-2\">\n            <Button asChild variant=\"outline\">\n                <Link href=\"/production/tracking/scan\">\n                    <QrCode className=\"w-4 h-4 mr-2\" />\n                    Escanear QR Code\n                </Link>\n            </Button>\n            <Button asChild>\n                <Link href=\"/production/qr-tracking\">\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Ver Todos Eventos\n                </Link>\n            </Button>\n        </div>\n    );\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Painel de Rastreamento QR\" />\n            <ListLayout\n                title=\"Rastreamento de QR Code\"\n                description=\"Monitore escaneamentos de QR code e atividades de rastreamento de produção\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                createButtonText=\"\"\n                actions={actions}\n            >\n                <div className=\"space-y-6\">\n                    {/* Statistics Cards */}\n                    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                        <Card>\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Total de Escaneamentos</CardTitle>\n                                <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{statistics.total_scans.toLocaleString()}</div>\n                                <p className=\"text-xs text-muted-foreground\">Todos os tempos</p>\n                            </CardContent>\n                        </Card>\n                        <Card>\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Escaneamentos Hoje</CardTitle>\n                                <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{statistics.today_scans.toLocaleString()}</div>\n                                <p className=\"text-xs text-muted-foreground\">Desde meia-noite</p>\n                            </CardContent>\n                        </Card>\n                        <Card>\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Itens Ativos</CardTitle>\n                                <Package className=\"h-4 w-4 text-muted-foreground\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{statistics.active_items.toLocaleString()}</div>\n                                <p className=\"text-xs text-muted-foreground\">Com códigos QR</p>\n                            </CardContent>\n                        </Card>\n                        <Card>\n                            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                                <CardTitle className=\"text-sm font-medium\">Operadores Únicos</CardTitle>\n                                <Users className=\"h-4 w-4 text-muted-foreground\" />\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"text-2xl font-bold\">{statistics.unique_operators.toLocaleString()}</div>\n                                <p className=\"text-xs text-muted-foreground\">Escaneadores ativos</p>\n                            </CardContent>\n                        </Card>\n                    </div>\n                    <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n                        <TabsList>\n                            <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n                            <TabsTrigger value=\"recent\">Atividade Recente</TabsTrigger>\n                        </TabsList>\n                        <TabsContent value=\"overview\" className=\"space-y-4\">\n                            <div className=\"grid gap-4 md:grid-cols-2\">\n                                {/* Daily Trends */}\n                                <Card>\n                                    <CardHeader>\n                                        <CardTitle>Tendências Diárias de Escaneamento</CardTitle>\n                                        <CardDescription>Número de escaneamentos por dia (últimos 7 dias)</CardDescription>\n                                    </CardHeader>\n                                    <CardContent className=\"pt-0\">\n                                        {barData.length > 0 ? (\n                                            <ResponsiveContainer width=\"100%\" height={300}>\n                                                <BarChart data={barData}>\n                                                    <CartesianGrid strokeDasharray=\"3 3\" />\n                                                    <XAxis dataKey=\"date\" />\n                                                    <YAxis />\n                                                    <Tooltip />\n                                                    <Bar dataKey=\"scans\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                                                </BarChart>\n                                            </ResponsiveContainer>\n                                        ) : (\n                                            <div className=\"flex items-center justify-center h-[300px] text-muted-foreground\">\n                                                Sem dados de escaneamento disponíveis\n                                            </div>\n                                        )}\n                                    </CardContent>\n                                </Card>\n                                {/* Event Type Distribution */}\n                                <Card>\n                                    <CardHeader>\n                                        <CardTitle>Distribuição por Tipo de Evento</CardTitle>\n                                        <CardDescription>Divisão de eventos de escaneamento por tipo</CardDescription>\n                                    </CardHeader>\n                                    <CardContent className=\"pt-0\">\n                                        {pieData.length > 0 ? (\n                                            <ResponsiveContainer width=\"100%\" height={300}>\n                                                <PieChart>\n                                                    <Pie\n                                                        data={pieData}\n                                                        cx=\"50%\"\n                                                        cy=\"50%\"\n                                                        labelLine={false}\n                                                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                                                        outerRadius={80}\n                                                        fill=\"#8884d8\"\n                                                        dataKey=\"value\"\n                                                    >\n                                                        {pieData.map((entry, index) => (\n                                                            <Cell key={`cell-${index}`} fill={entry.color} />\n                                                        ))}\n                                                    </Pie>\n                                                    <Tooltip />\n                                                </PieChart>\n                                            </ResponsiveContainer>\n                                        ) : (\n                                            <div className=\"flex items-center justify-center h-[300px] text-muted-foreground\">\n                                                Sem dados de eventos disponíveis\n                                            </div>\n                                        )}\n                                    </CardContent>\n                                </Card>\n                            </div>\n                        </TabsContent>\n                        <TabsContent value=\"recent\" className=\"space-y-4\">\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Eventos de Escaneamento Recentes</CardTitle>\n                                    <CardDescription>Última atividade de escaneamento de código QR</CardDescription>\n                                </CardHeader>\n                                <CardContent>\n                                    {recent_events.length > 0 ? (\n                                        <div className=\"space-y-4\">\n                                            {recent_events.map((event) => (\n                                                <div key={event.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                                                    <div className=\"space-y-1\">\n                                                        <div className=\"flex items-center gap-2\">\n                                                            <code className=\"text-sm font-mono bg-muted px-2 py-1 rounded\">\n                                                                {event.qr_code}\n                                                            </code>\n                                                            <Badge variant=\"outline\">\n                                                                {eventTypeLabels[event.event_type] || event.event_type}\n                                                            </Badge>\n                                                        </div>\n                                                        <div className=\"text-sm text-muted-foreground\">\n                                                            {event.scanned_by ? (\n                                                                <span>Escaneado por {event.scanned_by.name}</span>\n                                                            ) : (\n                                                                <span>Gerado pelo sistema</span>\n                                                            )}\n                                                            {' • '}\n                                                            {format(new Date(event.created_at), 'dd MMM yyyy HH:mm')}\n                                                        </div>\n                                                        {event.event_data?.item_number && (\n                                                            <div className=\"text-sm\">\n                                                                Item: {event.event_data.item_number}\n                                                            </div>\n                                                        )}\n                                                    </div>\n                                                </div>\n                                            ))}\n                                        </div>\n                                    ) : (\n                                        <div className=\"text-center py-8 text-muted-foreground\">\n                                            Sem eventos de escaneamento recentes\n                                        </div>\n                                    )}\n                                </CardContent>\n                            </Card>\n                        </TabsContent>\n                    </Tabs>\n                </div>\n            </ListLayout>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr-tracking/scan.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1309,1312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1309,1312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3071,3074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3071,3074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { Head } from '@inertiajs/react';\nimport { Card } from '@/components/ui/card';\nimport { CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { QrCode, Camera, Keyboard, AlertCircle, CheckCircle2, Loader2 } from 'lucide-react';\nimport axios from 'axios';\ninterface Props {\n    scan_modes: Record<string, string>;\n}\nexport default function QrTrackingScan({ scan_modes }: Props) {\n    const [scanMode, setScanMode] = useState<'camera' | 'manual'>('manual');\n    const [qrCode, setQrCode] = useState('');\n    const [selectedMode, setSelectedMode] = useState('production');\n    const [notes, setNotes] = useState('');\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [success, setSuccess] = useState<string | null>(null);\n    const [scannedItem, setScannedItem] = useState<any>(null);\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const streamRef = useRef<MediaStream | null>(null);\n    const startCamera = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                video: { facingMode: 'environment' }\n            });\n            if (videoRef.current) {\n                videoRef.current.srcObject = stream;\n                streamRef.current = stream;\n            }\n            setScanMode('camera');\n            setError(null);\n        } catch {\n            setError('Unable to access camera. Please check permissions.');\n        }\n    };\n    const stopCamera = () => {\n        if (streamRef.current) {\n            streamRef.current.getTracks().forEach(track => track.stop());\n            streamRef.current = null;\n        }\n        setScanMode('manual');\n    };\n    const processScan = async () => {\n        if (!qrCode.trim()) {\n            setError('Please enter or scan a QR code');\n            return;\n        }\n        setIsProcessing(true);\n        setError(null);\n        setSuccess(null);\n        try {\n            const response = await axios.post('/production/tracking/scan', {\n                qr_code: qrCode,\n                scan_mode: selectedMode,\n                notes: notes,\n                location: null, // Could get geolocation if needed\n            });\n            setSuccess(response.data.message);\n            setScannedItem(response.data.item);\n            // Clear form after successful scan\n            setTimeout(() => {\n                setQrCode('');\n                setNotes('');\n                setSuccess(null);\n                setScannedItem(null);\n            }, 5000);\n        } catch (err: unknown) {\n            setError((err as any).response?.data?.message || 'Failed to process scan');\n        } finally {\n            setIsProcessing(false);\n        }\n    };\n    const handleManualSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        processScan();\n    };\n    return (\n        <>\n            <Head title=\"Scan QR Code\" />\n            <div className=\"p-6 max-w-4xl mx-auto space-y-6\">\n                <div>\n                    <h1 className=\"text-2xl font-semibold\">Scan QR Code</h1>\n                    <p className=\"text-muted-foreground mt-1\">\n                        Scan or enter a QR code to track production items\n                    </p>\n                </div>\n                {/* Scan Mode Selector */}\n                <div className=\"flex gap-2\">\n                    <Button\n                        variant={scanMode === 'manual' ? 'default' : 'outline'}\n                        onClick={() => stopCamera()}\n                        className=\"flex-1\"\n                    >\n                        <Keyboard className=\"w-4 h-4 mr-2\" />\n                        Manual Entry\n                    </Button>\n                    <Button\n                        variant={scanMode === 'camera' ? 'default' : 'outline'}\n                        onClick={() => startCamera()}\n                        className=\"flex-1\"\n                        disabled={!navigator.mediaDevices}\n                    >\n                        <Camera className=\"w-4 h-4 mr-2\" />\n                        Camera Scan\n                    </Button>\n                </div>\n                {/* Camera View */}\n                {scanMode === 'camera' && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Camera Scanner</CardTitle>\n                            <CardDescription>\n                                Position the QR code within the camera view\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"relative aspect-video bg-black rounded-lg overflow-hidden\">\n                                <video\n                                    ref={videoRef}\n                                    autoPlay\n                                    playsInline\n                                    className=\"w-full h-full object-cover\"\n                                />\n                                <div className=\"absolute inset-0 flex items-center justify-center\">\n                                    <div className=\"w-64 h-64 border-2 border-primary rounded-lg\" />\n                                </div>\n                            </div>\n                            <Alert className=\"mt-4\">\n                                <AlertCircle className=\"h-4 w-4\" />\n                                <AlertDescription>\n                                    Camera QR scanning is not implemented in this demo.\n                                    Please use manual entry for now.\n                                </AlertDescription>\n                            </Alert>\n                        </CardContent>\n                    </Card>\n                )}\n                {/* Manual Entry Form */}\n                {scanMode === 'manual' && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Manual QR Entry</CardTitle>\n                            <CardDescription>\n                                Enter the QR code manually or paste from clipboard\n                            </CardDescription>\n                        </CardHeader>\n                        <CardContent>\n                            <form onSubmit={handleManualSubmit} className=\"space-y-4\">\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"qr_code\">QR Code</Label>\n                                    <div className=\"flex gap-2\">\n                                        <Input\n                                            id=\"qr_code\"\n                                            placeholder=\"Enter QR code...\"\n                                            value={qrCode}\n                                            onChange={(e) => setQrCode(e.target.value)}\n                                            className=\"font-mono\"\n                                        />\n                                        <Button type=\"button\" variant=\"outline\" size=\"icon\">\n                                            <QrCode className=\"w-4 h-4\" />\n                                        </Button>\n                                    </div>\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"scan_mode\">Scan Purpose</Label>\n                                    <Select value={selectedMode} onValueChange={setSelectedMode}>\n                                        <SelectTrigger id=\"scan_mode\">\n                                            <SelectValue />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            {Object.entries(scan_modes).map(([value, label]) => (\n                                                <SelectItem key={value} value={value}>\n                                                    {label}\n                                                </SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"notes\">Notes (Optional)</Label>\n                                    <Textarea\n                                        id=\"notes\"\n                                        placeholder=\"Add any additional notes...\"\n                                        value={notes}\n                                        onChange={(e) => setNotes(e.target.value)}\n                                        rows={3}\n                                    />\n                                </div>\n                                <Button\n                                    type=\"submit\"\n                                    className=\"w-full\"\n                                    disabled={isProcessing || !qrCode.trim()}\n                                >\n                                    {isProcessing ? (\n                                        <>\n                                            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                                            Processing...\n                                        </>\n                                    ) : (\n                                        <>\n                                            <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                                            Process Scan\n                                        </>\n                                    )}\n                                </Button>\n                            </form>\n                        </CardContent>\n                    </Card>\n                )}\n                {/* Error/Success Messages */}\n                {error && (\n                    <Alert variant=\"destructive\">\n                        <AlertCircle className=\"h-4 w-4\" />\n                        <AlertDescription>{error}</AlertDescription>\n                    </Alert>\n                )}\n                {success && (\n                    <Alert className=\"border-green-200 bg-green-50\">\n                        <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                        <AlertDescription className=\"text-green-800\">{success}</AlertDescription>\n                    </Alert>\n                )}\n                {/* Scanned Item Details */}\n                {scannedItem && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Scanned Item Details</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <dl className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                                <div>\n                                    <dt className=\"text-sm font-medium text-muted-foreground\">Item Number</dt>\n                                    <dd className=\"text-sm mt-1\">{scannedItem.item_number}</dd>\n                                </div>\n                                <div>\n                                    <dt className=\"text-sm font-medium text-muted-foreground\">Name</dt>\n                                    <dd className=\"text-sm mt-1\">{scannedItem.name}</dd>\n                                </div>\n                                <div>\n                                    <dt className=\"text-sm font-medium text-muted-foreground\">BOM</dt>\n                                    <dd className=\"text-sm mt-1\">\n                                        {scannedItem.bom_version?.bill_of_material?.name || 'N/A'}\n                                    </dd>\n                                </div>\n                                <div>\n                                    <dt className=\"text-sm font-medium text-muted-foreground\">Quantity</dt>\n                                    <dd className=\"text-sm mt-1\">{scannedItem.quantity} {scannedItem.unit_of_measure}</dd>\n                                </div>\n                            </dl>\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr/ItemScan.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr/OrderScan.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2711,2714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2711,2714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8736,8739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8736,8739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Head, Link } from '@inertiajs/react';\nimport {\n    Factory,\n    Play,\n    CheckCircle,\n    Package,\n    Hash,\n    Clock\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { format } from 'date-fns';\ninterface Item {\n    id: number;\n    item_number: string;\n    name: string;\n}\ninterface Step {\n    id: number;\n    step_number: number;\n    name: string;\n    status: string;\n    step_type: string;\n}\ninterface Route {\n    id: number;\n    name: string;\n    steps: Step[];\n}\ninterface ManufacturingOrder {\n    id: number;\n    order_number: string;\n    quantity: number;\n    quantity_completed: number;\n    status: string;\n    item: Item;\n    route: Route | null;\n    planned_end_date?: string;\n    children: ManufacturingOrder[];\n}\ninterface CurrentStep {\n    id: number;\n    name: string;\n    status: string;\n    step_number: number;\n}\ninterface Action {\n    label: string;\n    route: string;\n    icon: string;\n    primary?: boolean;\n}\ninterface Props {\n    order: ManufacturingOrder;\n    currentStep: CurrentStep | null;\n    can: {\n        view: boolean;\n        execute_steps: boolean;\n        update_quality: boolean;\n    };\n    actions: Action[];\n}\nconst getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n        draft: 'secondary',\n        planned: 'outline',\n        released: 'default',\n        in_progress: 'default',\n        completed: 'success',\n        cancelled: 'destructive',\n    };\n    return colors[status] || 'secondary';\n};\nconst getIconComponent = (iconName: string) => {\n    const icons: Record<string, React.ElementType> = {\n        Play,\n        CheckCircle,\n        Factory,\n        Package,\n    };\n    return icons[iconName] || Play;\n};\nexport default function OrderScan({ order, currentStep, can, actions }: Props) {\n    const progress = order.quantity > 0\n        ? (order.quantity_completed / order.quantity) * 100\n        : 0;\n    return (\n        <>\n            <Head title={`Ordem - ${order.order_number}`} />\n            <div className=\"min-h-screen bg-gray-50 p-4\">\n                <div className=\"max-w-lg mx-auto space-y-4\">\n                    {/* Header Card */}\n                    <Card>\n                        <CardHeader className=\"pb-3\">\n                            <div className=\"flex items-center justify-between\">\n                                <CardTitle className=\"text-lg\">Ordem de Manufatura</CardTitle>\n                                <Badge variant={getStatusColor(order.status) as any}>\n                                    {order.status}\n                                </Badge>\n                            </div>\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"space-y-3\">\n                                <div>\n                                    <div className=\"flex items-center gap-2 mb-1\">\n                                        <Hash className=\"h-4 w-4 text-gray-400\" />\n                                        <span className=\"font-mono font-semibold\">{order.order_number}</span>\n                                    </div>\n                                    <h2 className=\"text-lg font-medium\">{order.item.name}</h2>\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <div className=\"flex justify-between text-sm\">\n                                        <span className=\"text-gray-500\">Progresso:</span>\n                                        <span className=\"font-medium\">\n                                            {order.quantity_completed} / {order.quantity}\n                                        </span>\n                                    </div>\n                                    <Progress value={progress} className=\"h-2\" />\n                                </div>\n                                <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                                    <div>\n                                        <span className=\"text-gray-500\">Entrega:</span>\n                                        <p className=\"font-medium\">\n                                            {order.planned_end_date ? format(new Date(order.planned_end_date), 'dd/MM/yyyy') : 'N/A'}\n                                        </p>\n                                    </div>\n                                    {order.route && (\n                                        <div>\n                                            <span className=\"text-gray-500\">Rota:</span>\n                                            <p className=\"font-medium\">{order.route.name}</p>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        </CardContent>\n                    </Card>\n                    {/* Current Step */}\n                    {currentStep && (\n                        <Card>\n                            <CardHeader className=\"pb-3\">\n                                <CardTitle className=\"text-base flex items-center\">\n                                    <Clock className=\"mr-2 h-4 w-4\" />\n                                    Etapa Atual\n                                </CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"flex items-center justify-between\">\n                                    <div>\n                                        <p className=\"font-medium\">\n                                            {currentStep.step_number}. {currentStep.name}\n                                        </p>\n                                        <Badge variant=\"outline\" className=\"mt-1\">\n                                            {currentStep.status}\n                                        </Badge>\n                                    </div>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    )}\n                    {/* Actions */}\n                    {actions.length > 0 && (\n                        <Card>\n                            <CardHeader>\n                                <CardTitle className=\"text-base\">Ações Disponíveis</CardTitle>\n                            </CardHeader>\n                            <CardContent className=\"space-y-2\">\n                                {actions.map((action, index) => {\n                                    const Icon = getIconComponent(action.icon);\n                                    return (\n                                        <Link\n                                            key={index}\n                                            href={action.route}\n                                            className=\"block\"\n                                        >\n                                            <Button\n                                                variant={action.primary ? 'default' : 'outline'}\n                                                className=\"w-full justify-start\"\n                                            >\n                                                <Icon className=\"mr-2 h-4 w-4\" />\n                                                {action.label}\n                                            </Button>\n                                        </Link>\n                                    );\n                                })}\n                            </CardContent>\n                        </Card>\n                    )}\n                    {/* Child Orders */}\n                    {order.children && order.children.length > 0 && (\n                        <Card>\n                            <CardHeader>\n                                <CardTitle className=\"text-base\">Ordens Filhas</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"space-y-2\">\n                                    {order.children.slice(0, 3).map((child) => (\n                                        <div\n                                            key={child.id}\n                                            className=\"flex items-center justify-between text-sm\"\n                                        >\n                                            <span className=\"font-mono\">{child.order_number}</span>\n                                            <Badge variant={getStatusColor(child.status) as any}>\n                                                {child.status}\n                                            </Badge>\n                                        </div>\n                                    ))}\n                                    {order.children.length > 3 && (\n                                        <p className=\"text-sm text-gray-500 text-center\">\n                                            +{order.children.length - 3} mais...\n                                        </p>\n                                    )}\n                                </div>\n                            </CardContent>\n                        </Card>\n                    )}\n                    {/* View Details Link */}\n                    {can.view && (\n                        <div className=\"text-center\">\n                            <Link\n                                href={route('production.orders.show', order.id)}\n                                className=\"text-sm text-blue-600 hover:text-blue-800\"\n                            >\n                                Ver todos os detalhes →\n                            </Link>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr/TagGenerator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2109,2112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2109,2112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3096,3099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3096,3099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Head, useForm } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport {\n    QrCode,\n    Download,\n    Package,\n    Factory,\n    FileText,\n    Loader2,\n    Check\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { toast } from 'sonner';\nimport axios from 'axios';\ninterface QrTagTemplate {\n    id: number;\n    name: string;\n    type: string;\n    is_default: boolean;\n}\ninterface Props {\n    templates: QrTagTemplate[];\n}\nexport default function TagGenerator({ templates }: Props) {\n    const [generating, setGenerating] = useState(false);\n    const [selectedType, setSelectedType] = useState<'item' | 'order'>('item');\n    const [batchIds, setBatchIds] = useState<string>('');\n    const [generatedUrls, setGeneratedUrls] = useState<{ pdf_url?: string; preview_url?: string } | null>(null);\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'Etiquetas QR', href: route('production.qr-tags.index') },\n        { title: 'Gerador', href: '' }\n    ];\n    const form = useForm({\n        itemNumber: '',\n        orderNumber: '',\n    });\n    const generateSingleTag = async (type: 'item' | 'order', id: string) => {\n        setGenerating(true);\n        setGeneratedUrls(null);\n        try {\n            const response = await axios.post(\n                type === 'item'\n                    ? route('production.qr-tags.item', id)\n                    : route('production.qr-tags.order', id)\n            );\n            if (response.data.success) {\n                setGeneratedUrls(response.data);\n                toast.success('Etiqueta QR gerada com sucesso!');\n            }\n        } catch (error: unknown) {\n            toast.error((error as any).response?.data?.message || 'Erro ao gerar etiqueta');\n        } finally {\n            setGenerating(false);\n        }\n    };\n    const generateBatch = async () => {\n        if (!batchIds.trim()) {\n            toast.error('Por favor, insira os IDs para gerar em lote');\n            return;\n        }\n        setGenerating(true);\n        setGeneratedUrls(null);\n        try {\n            const ids = batchIds.split(',').map(id => id.trim()).filter(Boolean);\n            const response = await axios.post(route('production.qr-tags.batch'), {\n                type: selectedType,\n                ids: ids.map(id => parseInt(id))\n            });\n            if (response.data.success) {\n                setGeneratedUrls(response.data);\n                if (response.data.queued) {\n                    toast.info(response.data.message);\n                } else {\n                    toast.success('Etiquetas QR geradas com sucesso!');\n                }\n            }\n        } catch (error: any) {\n            toast.error(error.response?.data?.message || 'Erro ao gerar etiquetas em lote');\n        } finally {\n            setGenerating(false);\n        }\n    };\n    const handleSingleGeneration = () => {\n        const id = selectedType === 'item' ? form.data.itemNumber : form.data.orderNumber;\n        if (!id) {\n            toast.error(`Por favor, insira o ${selectedType === 'item' ? 'número do item' : 'número da ordem'}`);\n            return;\n        }\n        generateSingleTag(selectedType, id);\n    };\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Gerador de Etiquetas QR\" />\n            <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n                <div className=\"mb-6\">\n                    <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n                        <QrCode className=\"h-6 w-6\" />\n                        Gerador de Etiquetas QR\n                    </h1>\n                    <p className=\"text-gray-600 mt-1\">\n                        Gere etiquetas com códigos QR para itens e ordens de manufatura\n                    </p>\n                </div>\n                <Tabs defaultValue=\"single\" className=\"space-y-4\">\n                    <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"single\">Individual</TabsTrigger>\n                        <TabsTrigger value=\"batch\">Em Lote</TabsTrigger>\n                    </TabsList>\n                    {/* Single Generation */}\n                    <TabsContent value=\"single\" className=\"space-y-4\">\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Gerar Etiqueta Individual</CardTitle>\n                                <CardDescription>\n                                    Selecione o tipo e insira o identificador do recurso\n                                </CardDescription>\n                            </CardHeader>\n                            <CardContent className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                    <Button\n                                        variant={selectedType === 'item' ? 'default' : 'outline'}\n                                        onClick={() => setSelectedType('item')}\n                                        className=\"h-24\"\n                                    >\n                                        <div className=\"flex flex-col items-center gap-2\">\n                                            <Package className=\"h-6 w-6\" />\n                                            <span>Item</span>\n                                        </div>\n                                    </Button>\n                                    <Button\n                                        variant={selectedType === 'order' ? 'default' : 'outline'}\n                                        onClick={() => setSelectedType('order')}\n                                        className=\"h-24\"\n                                    >\n                                        <div className=\"flex flex-col items-center gap-2\">\n                                            <Factory className=\"h-6 w-6\" />\n                                            <span>Ordem</span>\n                                        </div>\n                                    </Button>\n                                </div>\n                                {selectedType === 'item' ? (\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"itemNumber\">Número do Item</Label>\n                                        <Input\n                                            id=\"itemNumber\"\n                                            placeholder=\"Ex: ITM-001\"\n                                            value={form.data.itemNumber}\n                                            onChange={(e) => form.setData('itemNumber', e.target.value)}\n                                            onKeyPress={(e) => e.key === 'Enter' && handleSingleGeneration()}\n                                        />\n                                    </div>\n                                ) : (\n                                    <div className=\"space-y-2\">\n                                        <Label htmlFor=\"orderNumber\">Número da Ordem</Label>\n                                        <Input\n                                            id=\"orderNumber\"\n                                            placeholder=\"Ex: OM-2024-001\"\n                                            value={form.data.orderNumber}\n                                            onChange={(e) => form.setData('orderNumber', e.target.value)}\n                                            onKeyPress={(e) => e.key === 'Enter' && handleSingleGeneration()}\n                                        />\n                                    </div>\n                                )}\n                                <Button\n                                    onClick={handleSingleGeneration}\n                                    disabled={generating}\n                                    className=\"w-full\"\n                                >\n                                    {generating ? (\n                                        <>\n                                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                            Gerando...\n                                        </>\n                                    ) : (\n                                        <>\n                                            <QrCode className=\"mr-2 h-4 w-4\" />\n                                            Gerar Etiqueta\n                                        </>\n                                    )}\n                                </Button>\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n                    {/* Batch Generation */}\n                    <TabsContent value=\"batch\" className=\"space-y-4\">\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Gerar Etiquetas em Lote</CardTitle>\n                                <CardDescription>\n                                    Gere múltiplas etiquetas de uma vez\n                                </CardDescription>\n                            </CardHeader>\n                            <CardContent className=\"space-y-4\">\n                                <div className=\"grid grid-cols-2 gap-4\">\n                                    <Button\n                                        variant={selectedType === 'item' ? 'default' : 'outline'}\n                                        onClick={() => setSelectedType('item')}\n                                    >\n                                        <Package className=\"mr-2 h-4 w-4\" />\n                                        Itens\n                                    </Button>\n                                    <Button\n                                        variant={selectedType === 'order' ? 'default' : 'outline'}\n                                        onClick={() => setSelectedType('order')}\n                                    >\n                                        <Factory className=\"mr-2 h-4 w-4\" />\n                                        Ordens\n                                    </Button>\n                                </div>\n                                <div className=\"space-y-2\">\n                                    <Label htmlFor=\"batchIds\">\n                                        IDs (separados por vírgula)\n                                    </Label>\n                                    <Input\n                                        id=\"batchIds\"\n                                        placeholder=\"Ex: 1, 2, 3, 4, 5\"\n                                        value={batchIds}\n                                        onChange={(e) => setBatchIds(e.target.value)}\n                                    />\n                                    <p className=\"text-sm text-gray-500\">\n                                        Insira os IDs dos {selectedType === 'item' ? 'itens' : 'ordens'} separados por vírgula\n                                    </p>\n                                </div>\n                                <Alert>\n                                    <AlertDescription>\n                                        Para lotes com mais de 10 etiquetas, a geração será processada em segundo plano\n                                        e você receberá uma notificação quando estiver pronta.\n                                    </AlertDescription>\n                                </Alert>\n                                <Button\n                                    onClick={generateBatch}\n                                    disabled={generating}\n                                    className=\"w-full\"\n                                >\n                                    {generating ? (\n                                        <>\n                                            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                            Gerando...\n                                        </>\n                                    ) : (\n                                        <>\n                                            <FileText className=\"mr-2 h-4 w-4\" />\n                                            Gerar Lote\n                                        </>\n                                    )}\n                                </Button>\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n                </Tabs>\n                {/* Generated Results */}\n                {generatedUrls && generatedUrls.pdf_url && (\n                    <Card className=\"mt-6\">\n                        <CardHeader>\n                            <CardTitle className=\"flex items-center gap-2\">\n                                <Check className=\"h-5 w-5 text-green-600\" />\n                                Etiqueta(s) Gerada(s)\n                            </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-2\">\n                            <Button\n                                variant=\"default\"\n                                className=\"w-full\"\n                                onClick={() => window.open(generatedUrls.pdf_url, '_blank')}\n                            >\n                                <Download className=\"mr-2 h-4 w-4\" />\n                                Baixar PDF\n                            </Button>\n                            {generatedUrls.preview_url && (\n                                <Button\n                                    variant=\"outline\"\n                                    className=\"w-full\"\n                                    onClick={() => window.open(generatedUrls.preview_url, '_blank')}\n                                >\n                                    Visualizar\n                                </Button>\n                            )}\n                        </CardContent>\n                    </Card>\n                )}\n                {/* Templates Info */}\n                {templates.length > 0 && (\n                    <Card className=\"mt-6\">\n                        <CardHeader>\n                            <CardTitle>Templates Disponíveis</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"space-y-2\">\n                                {templates.map((template) => (\n                                    <div\n                                        key={template.id}\n                                        className=\"flex items-center justify-between p-2 rounded border\"\n                                    >\n                                        <span>{template.name}</span>\n                                        <div className=\"flex items-center gap-2\">\n                                            <span className=\"text-sm text-gray-500\">\n                                                {template.type === 'item' ? 'Item' : 'Ordem'}\n                                            </span>\n                                            {template.is_default && (\n                                                <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">\n                                                    Padrão\n                                                </span>\n                                            )}\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </AppLayout>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/qr/TagPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2049,2052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2049,2052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Head } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { QrCode, Download, Package, Factory } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport axios from 'axios';\nimport { toast } from 'sonner';\ninterface Item {\n    id: number;\n    item_number: string;\n    name: string;\n    description?: string;\n    category?: {\n        id: number;\n        name: string;\n    };\n}\ninterface ManufacturingOrder {\n    id: number;\n    order_number: string;\n    quantity: number;\n    due_date: string;\n    item: Item;\n}\ninterface Template {\n    id: number;\n    name: string;\n    type: string;\n    layout: any;\n}\ninterface Props {\n    type: 'item' | 'order';\n    resource: Item | ManufacturingOrder;\n    template: Template | null;\n}\nexport default function TagPreview({ type, resource, template }: Props) {\n    const [generating, setGenerating] = React.useState(false);\n    const isItem = type === 'item';\n    const item = isItem ? (resource as Item) : (resource as ManufacturingOrder).item;\n    const displayNumber = isItem\n        ? (resource as Item).item_number\n        : (resource as ManufacturingOrder).order_number;\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'Etiquetas QR', href: route('production.qr-tags.index') },\n        { title: 'Visualizar', href: '' }\n    ];\n    const generateTag = async () => {\n        setGenerating(true);\n        try {\n            const response = await axios.post(\n                isItem\n                    ? route('production.qr-tags.item', resource.id)\n                    : route('production.qr-tags.order', resource.id)\n            );\n            if (response.data.success && response.data.pdf_url) {\n                window.open(response.data.pdf_url, '_blank');\n                toast.success('Etiqueta gerada com sucesso!');\n            }\n        } catch (error: any) {\n            toast.error(error.response?.data?.message || 'Erro ao gerar etiqueta');\n        } finally {\n            setGenerating(false);\n        }\n    };\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={`Visualizar Etiqueta - ${displayNumber}`} />\n            <div className=\"container mx-auto px-4 py-6 max-w-2xl\">\n                <div className=\"mb-6\">\n                    <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n                        <QrCode className=\"h-6 w-6\" />\n                        Visualizar Etiqueta QR\n                    </h1>\n                </div>\n                <Card>\n                    <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                            <CardTitle className=\"flex items-center gap-2\">\n                                {isItem ? (\n                                    <Package className=\"h-5 w-5\" />\n                                ) : (\n                                    <Factory className=\"h-5 w-5\" />\n                                )}\n                                {isItem ? 'Item' : 'Ordem de Manufatura'}\n                            </CardTitle>\n                            <Badge variant=\"secondary\">{displayNumber}</Badge>\n                        </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                        {/* Preview Area */}\n                        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 bg-gray-50\">\n                            <div className=\"text-center space-y-4\">\n                                <div className=\"w-32 h-32 mx-auto bg-gray-200 rounded flex items-center justify-center\">\n                                    <QrCode className=\"h-20 w-20 text-gray-400\" />\n                                </div>\n                                <div>\n                                    <p className=\"font-semibold text-lg\">{item.name}</p>\n                                    <p className=\"text-sm text-gray-600\">{displayNumber}</p>\n                                </div>\n                                {!isItem && (\n                                    <div className=\"text-sm text-gray-600\">\n                                        <p>Quantidade: {(resource as ManufacturingOrder).quantity}</p>\n                                        <p>\n                                            Entrega: {new Date((resource as ManufacturingOrder).due_date).toLocaleDateString('pt-BR')}\n                                        </p>\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                        {/* Resource Details */}\n                        <div className=\"space-y-2\">\n                            <h3 className=\"font-semibold\">Detalhes do {isItem ? 'Item' : 'Pedido'}</h3>\n                            <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                                <div>\n                                    <span className=\"text-gray-500\">Nome:</span>\n                                    <p className=\"font-medium\">{item.name}</p>\n                                </div>\n                                {item.category && (\n                                    <div>\n                                        <span className=\"text-gray-500\">Categoria:</span>\n                                        <p className=\"font-medium\">{item.category.name}</p>\n                                    </div>\n                                )}\n                                {!isItem && (\n                                    <>\n                                        <div>\n                                            <span className=\"text-gray-500\">Quantidade:</span>\n                                            <p className=\"font-medium\">{(resource as ManufacturingOrder).quantity}</p>\n                                        </div>\n                                        <div>\n                                            <span className=\"text-gray-500\">Data de Entrega:</span>\n                                            <p className=\"font-medium\">\n                                                {new Date((resource as ManufacturingOrder).due_date).toLocaleDateString('pt-BR')}\n                                            </p>\n                                        </div>\n                                    </>\n                                )}\n                            </div>\n                            {item.description && (\n                                <div>\n                                    <span className=\"text-gray-500 text-sm\">Descrição:</span>\n                                    <p className=\"text-sm\">{item.description}</p>\n                                </div>\n                            )}\n                        </div>\n                        {/* Template Info */}\n                        {template && (\n                            <div className=\"pt-2 border-t\">\n                                <p className=\"text-sm text-gray-500\">\n                                    Template: <span className=\"font-medium\">{template.name}</span>\n                                </p>\n                            </div>\n                        )}\n                        {/* Action Button */}\n                        <Button\n                            onClick={generateTag}\n                            disabled={generating}\n                            className=\"w-full\"\n                            size=\"lg\"\n                        >\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            {generating ? 'Gerando...' : 'Gerar e Baixar PDF'}\n                        </Button>\n                    </CardContent>\n                </Card>\n            </div>\n        </AppLayout>\n    );\n}","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/routing/builder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/routing/create.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1078,1081],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1078,1081],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":100,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":103,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2495,2498],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2495,2498],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Head, router, useForm } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { Button } from '@/components/ui/button';\nimport { TextInput } from '@/components/TextInput';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport { toast } from 'sonner';\nimport { ItemSelect } from '@/components/ItemSelect';\nimport { ManufacturingOrder, Item } from '@/types/production';\ninterface Props {\n    items: Item[];\n    orders: ManufacturingOrder[];\n}\nexport default function CreateRouting({ items, orders }: Props) {\n    const { data, setData, post, processing, errors, clearErrors } = useForm({\n        name: '',\n        description: '',\n        item_id: '',\n        manufacturing_order_id: '',\n        is_active: true,\n    });\n    // Create a wrapper for setData to match the expected signature\n    const handleSetData = (name: string, value: any) => {\n        setData(name as any, value);\n    };\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        post(route('production.routing.store'), {\n            onSuccess: () => {\n                toast.success('Roteiro criado com sucesso');\n            },\n            onError: () => {\n                toast.error('Erro ao criar roteiro');\n            }\n        });\n    };\n    const breadcrumbs = [\n        { title: 'Produção', href: '/production' },\n        { title: 'Roteiros', href: route('production.routing.index') },\n        { title: 'Novo Roteiro', href: '' }\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Novo Roteiro\" />\n            <div className=\"max-w-2xl mx-auto\">\n                <form onSubmit={handleSubmit}>\n                    <Card>\n                        <CardHeader>\n                            <CardTitle>Novo Roteiro de Produção</CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                            {/* Nome do Roteiro */}\n                            <TextInput\n                                form={{\n                                    data,\n                                    setData: handleSetData,\n                                    errors,\n                                    clearErrors: (...fields: string[]) => clearErrors(...fields as any),\n                                }}\n                                name=\"name\"\n                                label=\"Nome do Roteiro\"\n                                placeholder=\"Ex: Roteiro de Montagem Principal\"\n                                required\n                            />\n                            {/* Descrição */}\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"description\">Descrição</Label>\n                                <Textarea\n                                    id=\"description\"\n                                    value={data.description}\n                                    onChange={(e) => setData('description', e.target.value)}\n                                    placeholder=\"Descreva o processo de produção...\"\n                                    rows={4}\n                                />\n                                {errors.description && (\n                                    <p className=\"text-sm text-red-600\">{errors.description}</p>\n                                )}\n                            </div>\n                            {/* Item */}\n                            <ItemSelect\n                                label=\"Item\"\n                                items={items}\n                                value={data.item_id}\n                                onValueChange={(value) => setData('item_id', value)}\n                                placeholder=\"Selecione um item (opcional)\"\n                                error={errors.item_id}\n                            />\n                            {/* Ordem de Produção */}\n                            <div className=\"space-y-2\">\n                                <ItemSelect\n                                    label=\"Ordem de Produção\"\n                                    items={orders.filter(order => order.status === 'released').map(order => ({\n                                        id: order.id,\n                                        name: `${order.order_number} - ${order.item?.name || 'Item'}`\n                                    }))}\n                                    value={data.manufacturing_order_id}\n                                    onValueChange={(value) => setData('manufacturing_order_id', value)}\n                                    placeholder=\"Selecione uma ordem (opcional)\"\n                                    error={errors.manufacturing_order_id}\n                                />\n                                <p className=\"text-sm text-muted-foreground\">\n                                    Apenas ordens liberadas podem receber roteiros\n                                </p>\n                            </div>\n                            {/* Status Ativo */}\n                            <div className=\"flex items-center space-x-2\">\n                                <Switch\n                                    id=\"is_active\"\n                                    checked={data.is_active}\n                                    onCheckedChange={(checked) => handleSetData('is_active', checked)}\n                                />\n                                <Label htmlFor=\"is_active\">Roteiro Ativo</Label>\n                            </div>\n                            {/* Botões de Ação */}\n                            <div className=\"flex justify-end space-x-4 pt-6\">\n                                <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    onClick={() => router.visit(route('production.routing.index'))}\n                                    disabled={processing}\n                                >\n                                    Cancelar\n                                </Button>\n                                <Button type=\"submit\" disabled={processing}>\n                                    Criar Roteiro\n                                </Button>\n                            </div>\n                        </CardContent>\n                    </Card>\n                </form>\n            </div>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/routing/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[547,550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[547,550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[565,568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[565,568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[579,582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[579,582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1506,1509],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1506,1509],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2224,2227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2224,2227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3009,3012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3009,3012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3655,3658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3655,3658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4677,4680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4677,4680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6035,6038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6035,6038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6168,6171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6168,6171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6279,6282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6279,6282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Head, Link, router } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\n\nimport { ColumnConfig } from '@/types/shared';\nimport { toast } from 'sonner';\ninterface Props {\n    routings: any;\n    filters: any;\n    can: any;\n}\nexport default function RoutingIndex({ routings, filters, can }: Props) {\n    const [searchValue, setSearchValue] = useState(filters.search || '');\n    const handleSearchChange = (value: string) => {\n        setSearchValue(value);\n        router.get(\n            route('production.routing.index'),\n            { ...filters, search: value, page: 1 },\n            { preserveState: true, replace: true }\n        );\n    };\n    const handlePageChange = (page: number) => {\n        router.get(\n            route('production.routing.index'),\n            { ...filters, page },\n            { preserveState: true, replace: true }\n        );\n    };\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('production.routing.index'),\n            { ...filters, per_page: perPage, page: 1 },\n            { preserveState: true, replace: true }\n        );\n    };\n    const handleDelete = (routing: any) => {\n        if (confirm(`Tem certeza que deseja excluir o roteiro ${routing.name}?`)) {\n            router.delete(route('production.routing.destroy', routing.id), {\n                onSuccess: () => {\n                    toast.success('Roteiro excluído com sucesso');\n                },\n                onError: () => {\n                    toast.error('Erro ao excluir roteiro');\n                }\n            });\n        }\n    };\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome do Roteiro',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value: unknown, row: Record<string, unknown>) => {\n                const routing = row as any;\n                return (\n                    <div>\n                        <div className=\"font-medium\">{routing.name}</div>\n                        {routing.description && (\n                            <div className=\"text-muted-foreground text-sm\">\n                                {routing.description.length > 40 ? `${routing.description.substring(0, 40)}...` : routing.description}\n                            </div>\n                        )}\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'manufacturing_order',\n            label: 'Ordem de Produção',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value: unknown, row: Record<string, unknown>) => {\n                const routing = row as any;\n                return routing.manufacturing_order ? (\n                    <Link\n                        href={route('production.orders.show', routing.manufacturing_order.id)}\n                        className=\"text-primary hover:underline\"\n                    >\n                        {routing.manufacturing_order.order_number}\n                    </Link>\n                ) : '-';\n            }\n        },\n        {\n            key: 'item',\n            label: 'Item',\n            sortable: true,\n            width: 'w-[250px]',\n            render: (value: unknown, row: Record<string, unknown>) => {\n                const routing = row as any;\n                return routing.item ? (\n                    <div>\n                        <div className=\"font-medium\">{routing.item.item_number}</div>\n                        <div className=\"text-muted-foreground text-sm\">\n                            {routing.item.name?.length > 40\n                                ? `${routing.item.name.substring(0, 40)}...`\n                                : routing.item.name || '-'}\n                        </div>\n                    </div>\n                ) : '-';\n            }\n        },\n        {\n            key: 'steps_count',\n            label: 'Etapas',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value: unknown) => {\n                return value as number ?? 0;\n            }\n        },\n        {\n            key: 'description',\n            label: 'Descrição',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value: unknown, row: Record<string, unknown>) => {\n                const routing = row as any;\n                return routing.description ? (\n                    routing.description.length > 50\n                        ? `${routing.description.substring(0, 50)}...`\n                        : routing.description\n                ) : '-';\n            }\n        },\n        {\n            key: 'is_active',\n            label: 'Status',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value: unknown) => {\n                return value ? 'Ativo' : 'Inativo';\n            }\n        }\n    ];\n    const breadcrumbs = [\n        { title: 'Produção', href: '/production' },\n        { title: 'Roteiros', href: '' }\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Roteiros de Produção\" />\n            <ListLayout\n                title=\"Roteiros de Produção\"\n                description=\"Gerencie os roteiros de fabricação e processos\"\n                searchPlaceholder=\"Buscar por número, nome ou item...\"\n                searchValue={searchValue}\n                onSearchChange={handleSearchChange}\n                createRoute={can.create ? route('production.routing.create') : undefined}\n                createButtonText=\"Novo Roteiro\"\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={(routings.data || []) as any}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(routing: any) => router.visit(route('production.routing.show', routing.id))}\n                        actions={(routing: any) => (\n                            <EntityActionDropdown\n                                onEdit={() => router.visit(route('production.routing.edit', routing.id))}\n                                onDelete={() => handleDelete(routing)}\n                            />\n                        )}\n                    />\n                    <EntityPagination\n                        pagination={{\n                            current_page: routings.current_page || 1,\n                            last_page: routings.last_page || 1,\n                            per_page: routings.per_page || 10,\n                            total: routings.total || 0,\n                            from: routings.from || 0,\n                            to: routings.to || 0\n                        }}\n                        onPageChange={handlePageChange}\n                        onPerPageChange={handlePerPageChange}\n                    />\n                </div>\n            </ListLayout>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/routing/show.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/schedule/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2803,2806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2803,2806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Head, Link, router } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport { Button } from '@/components/ui/button';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Calendar, Clock, Factory, Play, Pause, CheckCircle, XCircle } from 'lucide-react';\nimport { useState } from 'react';\nimport { format } from 'date-fns';\nimport { ColumnConfig, PaginationMeta } from '@/types/shared';\nimport { type BreadcrumbItem } from '@/types';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: Record<string, string | number>) => string;\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Production',\n        href: '/production',\n    },\n    {\n        title: 'Schedule',\n        href: '/production/schedules',\n    },\n];\ninterface ManufacturingStep extends Record<string, unknown> {\n    id: number;\n    step_number: number;\n    step_type: 'standard' | 'quality_check' | 'rework';\n    name: string;\n    description: string | null;\n    work_cell_id: number | null;\n    status: 'pending' | 'queued' | 'in_progress' | 'on_hold' | 'completed' | 'skipped';\n    setup_time_minutes: number;\n    cycle_time_minutes: number;\n    actual_start_time: string | null;\n    actual_end_time: string | null;\n    manufacturing_route: {\n        id: number;\n        name: string;\n        manufacturing_order: {\n            id: number;\n            order_number: string;\n            quantity: number;\n            status: string;\n            item: {\n                id: number;\n                item_number: string;\n                name: string;\n            };\n        };\n        item: {\n            id: number;\n            item_number: string;\n            name: string;\n        };\n    };\n    work_cell: {\n        id: number;\n        name: string;\n    } | null;\n}\ninterface WorkCell {\n    id: number;\n    name: string;\n}\ninterface Props {\n    schedules?: {\n        data: ManufacturingStep[];\n        links: any;\n        meta: PaginationMeta;\n    };\n    filters?: {\n        search?: string;\n        status?: string;\n        work_cell_id?: number;\n        date_from?: string;\n        date_to?: string;\n        per_page?: number;\n        sort?: string;\n        direction?: 'asc' | 'desc';\n    };\n    workCells?: WorkCell[];\n    statuses?: Record<string, string>;\n}\nfunction ProductionScheduleIndex({\n    schedules = {\n        data: [],\n        meta: {\n            current_page: 1,\n            last_page: 1,\n            per_page: 15,\n            total: 0,\n            from: 0,\n            to: 0\n        } as PaginationMeta,\n        links: {}\n    },\n    filters = {},\n    workCells = [],\n    statuses = {}\n}: Props) {\n    // Props are now guaranteed to have default values, so we can simplify this\n    const safeSchedules = schedules;\n    const safeWorkCells = Array.isArray(workCells) ? workCells : [];\n    const safeStatuses = statuses && typeof statuses === 'object' ? statuses : {};\n    // Create a clean object to avoid prototype chain issues\n    const safeFilters = filters ? { ...filters } : {};\n    const entityOps = useEntityOperations<ManufacturingStep>({\n        entityName: 'schedule',\n        entityLabel: 'Schedule',\n        routes: {\n            index: 'production.schedules',\n            show: 'production.schedules.show',\n            destroy: 'production.schedules.destroy',\n            checkDependencies: 'production.schedules.check-dependencies',\n        },\n    });\n    // Ensure filters object is properly initialized\n    const normalizedFilters = {\n        search: safeFilters.search || '',\n        status: safeFilters.status || 'all',\n        work_cell_id: safeFilters.work_cell_id || undefined,\n        date_from: safeFilters.date_from || '',\n        date_to: safeFilters.date_to || '',\n        per_page: safeFilters.per_page || 15,\n        sort: safeFilters.sort || 'step_number',\n        direction: (safeFilters.direction || 'asc') as 'asc' | 'desc',\n    };\n    const [search, setSearch] = useState(normalizedFilters.search);\n    const [status, setStatus] = useState(normalizedFilters.status);\n    const [workCellId, setWorkCellId] = useState(normalizedFilters.work_cell_id ? normalizedFilters.work_cell_id.toString() : 'all');\n    const [dateFrom, setDateFrom] = useState(normalizedFilters.date_from);\n    const [dateTo, setDateTo] = useState(normalizedFilters.date_to);\n    // Use centralized sorting hook\n    const { sort: currentSort, direction: currentDirection, handleSort } = useSorting({\n        routeName: 'production.schedules.index',\n        initialSort: normalizedFilters.sort,\n        initialDirection: normalizedFilters.direction,\n        additionalParams: {\n            ...(search && { search }),\n            ...(status !== 'all' && { status }),\n            ...(workCellId !== 'all' && { work_cell_id: parseInt(workCellId) }),\n            ...(dateFrom && { date_from: dateFrom }),\n            ...(dateTo && { date_to: dateTo }),\n            ...(normalizedFilters.per_page && { per_page: normalizedFilters.per_page }),\n        },\n    });\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('scheduleColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            step: true,\n            order: true,\n            work_cell: true,\n            timing: true,\n            status: true,\n            schedule: true,\n        };\n    });\n    const handleFilter = () => {\n        router.get(route('production.schedules.index'), {\n            search,\n            status: status === 'all' ? undefined : status,\n            work_cell_id: workCellId === 'all' ? undefined : workCellId,\n            date_from: dateFrom,\n            date_to: dateTo,\n            per_page: normalizedFilters.per_page,\n            sort: currentSort,\n            direction: currentDirection,\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('production.schedules.index'),\n            {\n                search: value,\n                status: status === 'all' ? undefined : status,\n                work_cell_id: workCellId === 'all' ? undefined : workCellId,\n                date_from: dateFrom,\n                date_to: dateTo,\n                sort: currentSort,\n                direction: currentDirection,\n                per_page: normalizedFilters.per_page\n            },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n    const handlePageChange = (page: number) => {\n        router.get(route('production.schedules.index'), {\n            search: search || undefined,\n            status: status === 'all' ? undefined : status,\n            work_cell_id: workCellId === 'all' ? undefined : parseInt(workCellId),\n            date_from: dateFrom || undefined,\n            date_to: dateTo || undefined,\n            per_page: normalizedFilters.per_page,\n            sort: currentSort,\n            direction: currentDirection,\n            page,\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handlePerPageChange = (perPage: number) => {\n        router.get(route('production.schedules.index'), {\n            search: search || undefined,\n            status: status === 'all' ? undefined : status,\n            work_cell_id: workCellId === 'all' ? undefined : parseInt(workCellId),\n            date_from: dateFrom || undefined,\n            date_to: dateTo || undefined,\n            sort: currentSort,\n            direction: currentDirection,\n            per_page: perPage,\n            page: 1,\n        }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('scheduleColumnsVisibility', JSON.stringify(newVisibility));\n    };\n    const getStatusBadge = (status: string) => {\n        const variants: Record<string, 'default' | 'secondary' | 'destructive' | 'outline'> = {\n            pending: 'outline',\n            queued: 'secondary',\n            in_progress: 'default',\n            on_hold: 'destructive',\n            completed: 'outline',\n            skipped: 'destructive',\n        };\n        const colors: Record<string, string> = {\n            pending: 'text-gray-600',\n            queued: 'text-blue-600',\n            in_progress: 'text-yellow-600',\n            on_hold: 'text-orange-600',\n            completed: 'text-green-600',\n            skipped: 'text-red-600',\n        };\n        return (\n            <Badge variant={variants[status] || 'default'} className={colors[status]}>\n                {safeStatuses[status] || status}\n            </Badge>\n        );\n    };\n    const getStepTypeIcon = (type: string) => {\n        switch (type) {\n            case 'quality_check':\n                return <CheckCircle className=\"h-4 w-4 text-blue-500\" />;\n            case 'rework':\n                return <XCircle className=\"h-4 w-4 text-orange-500\" />;\n            default:\n                return <Factory className=\"h-4 w-4 text-gray-500\" />;\n        }\n    };\n    const columns: ColumnConfig[] = [\n        {\n            key: 'step',\n            label: 'Step',\n            sortable: true,\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return (\n                    <div className=\"flex items-center space-x-2\">\n                        {getStepTypeIcon(step.step_type)}\n                        <div>\n                            <div className=\"font-medium\">#{step.step_number} - {step.name}</div>\n                            {step.description && (\n                                <div className=\"text-sm text-muted-foreground\">{step.description}</div>\n                            )}\n                        </div>\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'order',\n            label: 'Order',\n            sortable: true,\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return (\n                    <div>\n                        <Link\n                            href={route('production.orders.show', { order: step.manufacturing_route.manufacturing_order.id })}\n                            className=\"font-medium text-primary hover:underline\"\n                        >\n                            {step.manufacturing_route.manufacturing_order.order_number}\n                        </Link>\n                        <div className=\"text-sm text-muted-foreground\">\n                            {step.manufacturing_route.manufacturing_order.item.name}\n                        </div>\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'work_cell',\n            label: 'Work Cell',\n            sortable: true,\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return (\n                    <div>\n                        {step.work_cell ? (\n                            <span className=\"font-medium\">{step.work_cell.name}</span>\n                        ) : (\n                            <span className=\"text-muted-foreground\">Not assigned</span>\n                        )}\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'timing',\n            label: 'Timing',\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return (\n                    <div className=\"text-sm\">\n                        <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>Setup: {step.setup_time_minutes}min</span>\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>Cycle: {step.cycle_time_minutes}min × {step.manufacturing_route.manufacturing_order.quantity}</span>\n                        </div>\n                        <div className=\"font-medium\">\n                            Total: {step.setup_time_minutes + (step.cycle_time_minutes * step.manufacturing_route.manufacturing_order.quantity)}min\n                        </div>\n                    </div>\n                );\n            },\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            sortable: true,\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return getStatusBadge(step.status);\n            },\n        },\n        {\n            key: 'schedule',\n            label: 'Schedule',\n            sortable: true,\n            render: (_, row) => {\n                const step = row as ManufacturingStep;\n                return (\n                    <div className=\"text-sm\">\n                        {step.actual_start_time ? (\n                            <>\n                                <div>Started: {format(new Date(step.actual_start_time), 'PP p')}</div>\n                                {step.actual_end_time && (\n                                    <div>Ended: {format(new Date(step.actual_end_time), 'PP p')}</div>\n                                )}\n                            </>\n                        ) : (\n                            <span className=\"text-muted-foreground\">Not started</span>\n                        )}\n                    </div>\n                );\n            },\n        },\n    ];\n    const getActions = (row: Record<string, unknown>) => {\n        const step = row as ManufacturingStep;\n        const items = [];\n        if (step.status === 'pending' || step.status === 'queued') {\n            items.push({\n                label: 'Start',\n                icon: <Play className=\"h-4 w-4\" />,\n                onClick: () => router.post(route('production.schedules.start', { schedule: step.id })),\n            });\n        }\n        if (step.status === 'in_progress') {\n            items.push({\n                label: 'Complete',\n                icon: <CheckCircle className=\"h-4 w-4\" />,\n                onClick: () => router.visit(route('production.schedules.show', { schedule: step.id })),\n            });\n            items.push({\n                label: 'Hold',\n                icon: <Pause className=\"h-4 w-4\" />,\n                onClick: () => router.visit(route('production.schedules.show', { schedule: step.id })),\n            });\n        }\n        if (step.status === 'on_hold') {\n            items.push({\n                label: 'Resume',\n                icon: <Play className=\"h-4 w-4\" />,\n                onClick: () => router.post(route('production.schedules.resume', { schedule: step.id })),\n            });\n        }\n        items.push({\n            label: 'View Details',\n            onClick: () => router.visit(route('production.schedules.show', { schedule: step.id })),\n        });\n        if (['pending', 'queued'].includes(step.status)) {\n            items.push({\n                label: 'Edit',\n                onClick: () => router.visit(route('production.schedules.edit', { schedule: step.id })),\n            });\n        }\n        return <EntityActionDropdown additionalActions={items} />;\n    };\n    // Use data from server\n    const data = Array.isArray(safeSchedules?.data) ? safeSchedules.data : [];\n    const pagination: PaginationMeta = {\n        current_page: safeSchedules?.meta?.current_page ?? 1,\n        last_page: safeSchedules?.meta?.last_page ?? 1,\n        per_page: safeSchedules?.meta?.per_page ?? 15,\n        total: safeSchedules?.meta?.total ?? 0,\n        from: safeSchedules?.meta?.from ?? 0,\n        to: safeSchedules?.meta?.to ?? 0,\n    };\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Production Schedule\" />\n            <ListLayout\n                title=\"Production Schedule\"\n                description=\"Manage production schedules\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                createRoute={route('production.schedules.create')}\n                createButtonText=\"Schedule Production\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <Button\n                            variant=\"outline\"\n                            onClick={() => router.visit(route('production.planning.calendar'))}\n                        >\n                            <Calendar className=\"mr-2 h-4 w-4\" />\n                            Calendar View\n                        </Button>\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    {/* Filter Section */}\n                    <div className=\"bg-card rounded-lg shadow-sm p-4\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n                            <Select value={status} onValueChange={setStatus}>\n                                <SelectTrigger>\n                                    <SelectValue placeholder=\"All statuses\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    <SelectItem value=\"all\">All statuses</SelectItem>\n                                    {Object.entries(safeStatuses).map(([value, label]) => (\n                                        <SelectItem key={value} value={value}>\n                                            {label}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                            <Select value={workCellId} onValueChange={setWorkCellId}>\n                                <SelectTrigger>\n                                    <SelectValue placeholder=\"All work cells\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    <SelectItem value=\"all\">All work cells</SelectItem>\n                                    {safeWorkCells.map((cell) => (\n                                        <SelectItem key={cell.id} value={cell.id.toString()}>\n                                            {cell.name}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                            <Input\n                                type=\"date\"\n                                placeholder=\"From date\"\n                                value={dateFrom}\n                                onChange={(e) => setDateFrom(e.target.value)}\n                            />\n                            <Input\n                                type=\"date\"\n                                placeholder=\"To date\"\n                                value={dateTo}\n                                onChange={(e) => setDateTo(e.target.value)}\n                            />\n                            <Button onClick={handleFilter} className=\"md:col-span-2\">\n                                Apply Filters\n                            </Button>\n                        </div>\n                    </div>\n                    <EntityDataTable\n                        data={data as unknown as Record<string, unknown>[]}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(row) => {\n                            const step = row as unknown as ManufacturingStep;\n                            router.visit(route('production.schedules.show', { schedule: step.id }));\n                        }}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        actions={getActions}\n                    />\n                    <EntityPagination\n                        pagination={pagination}\n                        onPageChange={handlePageChange}\n                        onPerPageChange={handlePerPageChange}\n                    />\n                </div>\n            </ListLayout>\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityLabel={`the schedule ${entityOps.deletingItem?.name || ''}`}\n                onConfirm={entityOps.confirmDelete}\n            />\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"schedule\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\nexport default ProductionScheduleIndex; ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/schedule/show.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/shipments/create.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3191,3194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3191,3194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12822,12825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12822,12825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13291,13294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13291,13294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13606,13609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13606,13609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":364,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14051,14054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14051,14054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":372,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14407,14410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14407,14410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14729,14732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14729,14732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":392,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14998,15001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14998,15001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":404,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15472,15475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15472,15475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":411,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15740,15743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15740,15743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":515,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":515,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19608,19611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19608,19611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useForm } from '@inertiajs/react';\nimport { router } from '@inertiajs/react';\nimport { Package, MapPin, Truck, Camera, Check, ChevronLeft, ChevronRight, Plus, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { TextInput } from '@/components/TextInput';\nimport { ItemSelect } from '@/components/ItemSelect';\nimport AppLayout from '@/layouts/app-layout';\nimport { Item } from '@/types/production';\nimport { cn } from '@/lib/utils';\n\ninterface Props {\n    items: Item[];\n}\n\ninterface ShipmentItem {\n    item_id: number;\n    quantity: number;\n    unit_of_measure: string;\n}\n\ninterface StepIndicatorProps {\n    steps: Array<{\n        number: number;\n        title: string;\n        icon: React.ReactNode;\n    }>;\n    currentStep: number;\n}\n\nfunction StepIndicator({ steps, currentStep }: StepIndicatorProps) {\n    return (\n        <div className=\"flex items-center justify-between\">\n            {steps.map((step, index) => (\n                <React.Fragment key={step.number}>\n                    <div className=\"flex flex-col items-center\">\n                        <div\n                            className={cn(\n                                \"w-10 h-10 rounded-full flex items-center justify-center font-medium\",\n                                currentStep >= step.number\n                                    ? \"bg-primary text-primary-foreground\"\n                                    : \"bg-muted text-muted-foreground\"\n                            )}\n                        >\n                            {currentStep > step.number ? (\n                                <Check className=\"h-5 w-5\" />\n                            ) : (\n                                step.icon\n                            )}\n                        </div>\n                        <span className={cn(\n                            \"text-sm mt-2\",\n                            currentStep >= step.number\n                                ? \"text-foreground font-medium\"\n                                : \"text-muted-foreground\"\n                        )}>\n                            {step.title}\n                        </span>\n                    </div>\n                    {index < steps.length - 1 && (\n                        <div\n                            className={cn(\n                                \"flex-1 h-0.5 mx-4 mt-5\",\n                                currentStep > step.number\n                                    ? \"bg-primary\"\n                                    : \"bg-muted\"\n                            )}\n                        />\n                    )}\n                </React.Fragment>\n            ))}\n        </div>\n    );\n}\n\nexport default function ShipmentCreate({ items }: Props) {\n    const [step, setStep] = useState(1);\n    const [shipmentItems, setShipmentItems] = useState<ShipmentItem[]>([]);\n    const [photos, setPhotos] = useState<File[]>([]);\n\n    const { data, setData, errors, processing, clearErrors } = useForm<any>({\n        items: [] as ShipmentItem[],\n        destination_name: '',\n        destination_address: '',\n        destination_city: '',\n        destination_state: '',\n        destination_zip: '',\n        carrier: '',\n        carrier_contact: '',\n        notes: '',\n        photos: [] as File[]\n    });\n\n    const steps = [\n        { number: 1, title: 'Itens', icon: <Package className=\"h-4 w-4\" /> },\n        { number: 2, title: 'Destino', icon: <MapPin className=\"h-4 w-4\" /> },\n        { number: 3, title: 'Transporte', icon: <Truck className=\"h-4 w-4\" /> },\n        { number: 4, title: 'Fotos', icon: <Camera className=\"h-4 w-4\" /> },\n        { number: 5, title: 'Confirmação', icon: <Check className=\"h-4 w-4\" /> }\n    ];\n\n    const handleCreateShipment = () => {\n        const formData = new FormData();\n\n        // Add regular data\n        Object.entries(data).forEach(([key, value]) => {\n            if (key !== 'photos' && key !== 'items') {\n                formData.append(key, value as string);\n            }\n        });\n\n        // Add items as JSON\n        formData.append('items', JSON.stringify(shipmentItems));\n\n        // Add photos\n        photos.forEach((photo, index) => {\n            formData.append(`photos[${index}]`, photo);\n        });\n\n        router.post(route('production.shipments.store'), formData);\n    };\n\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'Remessas', href: route('production.shipments.index') },\n        { title: 'Nova Remessa', href: '' }\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <div className=\"max-w-4xl mx-auto py-6 px-4\">\n                {/* Progress Steps */}\n                <div className=\"mb-8\">\n                    <StepIndicator steps={steps} currentStep={step} />\n                </div>\n\n                {/* Step Content */}\n                <Card>\n                    <CardContent className=\"p-6\">\n                        {step === 1 && (\n                            <ShipmentItemsStep\n                                items={items}\n                                shipmentItems={shipmentItems}\n                                onItemsChange={setShipmentItems}\n                            />\n                        )}\n                        {step === 2 && (\n                            <DestinationStep\n                                data={data}\n                                setData={setData}\n                                errors={errors}\n                                clearErrors={clearErrors}\n                            />\n                        )}\n                        {step === 3 && (\n                            <CarrierStep\n                                data={data}\n                                setData={setData}\n                                errors={errors}\n                                clearErrors={clearErrors}\n                            />\n                        )}\n                        {step === 4 && (\n                            <PhotosStep\n                                photos={photos}\n                                onPhotosChange={setPhotos}\n                            />\n                        )}\n                        {step === 5 && (\n                            <ConfirmationStep\n                                data={data}\n                                shipmentItems={shipmentItems}\n                                items={items}\n                                photos={photos}\n                            />\n                        )}\n                    </CardContent>\n                    <CardFooter className=\"flex justify-between\">\n                        <Button\n                            variant=\"outline\"\n                            onClick={() => setStep(step - 1)}\n                            disabled={step === 1}\n                        >\n                            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n                            Voltar\n                        </Button>\n                        <Button\n                            onClick={() =>\n                                step === steps.length ?\n                                    handleCreateShipment() :\n                                    setStep(step + 1)\n                            }\n                            disabled={processing}\n                        >\n                            {step === steps.length ? (\n                                processing ? 'Criando...' : 'Criar Remessa'\n                            ) : (\n                                <>\n                                    Próximo\n                                    <ChevronRight className=\"h-4 w-4 ml-2\" />\n                                </>\n                            )}\n                        </Button>\n                    </CardFooter>\n                </Card>\n            </div>\n        </AppLayout>\n    );\n}\n\n// Step 1: Items Selection\nfunction ShipmentItemsStep({\n    items,\n    shipmentItems,\n    onItemsChange\n}: {\n    items: Item[];\n    shipmentItems: ShipmentItem[];\n    onItemsChange: (items: ShipmentItem[]) => void;\n}) {\n    const [selectedItemId, setSelectedItemId] = useState('');\n    const [quantity, setQuantity] = useState('1');\n\n    const addItem = () => {\n        if (!selectedItemId || !quantity) return;\n\n        const item = items.find(i => i.id.toString() === selectedItemId);\n        if (!item) return;\n\n        const newItem: ShipmentItem = {\n            item_id: item.id,\n            quantity: parseInt(quantity),\n            unit_of_measure: item.unit_of_measure\n        };\n\n        onItemsChange([...shipmentItems, newItem]);\n        setSelectedItemId('');\n        setQuantity('1');\n    };\n\n    const removeItem = (index: number) => {\n        onItemsChange(shipmentItems.filter((_, i) => i !== index));\n    };\n\n    const getItemDetails = (itemId: number) => {\n        return items.find(i => i.id === itemId);\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Selecionar Itens</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                    Adicione os itens que serão enviados nesta remessa\n                </p>\n            </div>\n\n            <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"md:col-span-2\">\n                        <ItemSelect\n                            label=\"Item\"\n                            items={items.map(i => ({\n                                id: i.id,\n                                name: `${i.item_number} - ${i.name}`\n                            }))}\n                            value={selectedItemId}\n                            onValueChange={setSelectedItemId}\n                            placeholder=\"Selecione um item\"\n                            canCreate={false}\n                        />\n                    </div>\n                    <div>\n                        <Label>Quantidade</Label>\n                        <Input\n                            type=\"number\"\n                            min=\"1\"\n                            value={quantity}\n                            onChange={(e) => setQuantity(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <Button\n                    onClick={addItem}\n                    disabled={!selectedItemId || !quantity}\n                    className=\"w-full md:w-auto\"\n                >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Adicionar Item\n                </Button>\n            </div>\n\n            {shipmentItems.length > 0 && (\n                <div className=\"space-y-2\">\n                    <h4 className=\"font-medium\">Itens Selecionados</h4>\n                    <div className=\"space-y-2\">\n                        {shipmentItems.map((shipmentItem, index) => {\n                            const item = getItemDetails(shipmentItem.item_id);\n                            return (\n                                <Card key={index}>\n                                    <CardContent className=\"p-4\">\n                                        <div className=\"flex items-center justify-between\">\n                                            <div>\n                                                <p className=\"font-medium\">\n                                                    {item?.item_number} - {item?.name}\n                                                </p>\n                                                <p className=\"text-sm text-muted-foreground\">\n                                                    Quantidade: {shipmentItem.quantity} {shipmentItem.unit_of_measure}\n                                                </p>\n                                            </div>\n                                            <Button\n                                                variant=\"ghost\"\n                                                size=\"icon\"\n                                                onClick={() => removeItem(index)}\n                                            >\n                                                <X className=\"h-4 w-4\" />\n                                            </Button>\n                                        </div>\n                                    </CardContent>\n                                </Card>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n}\n\n// Step 2: Destination\nfunction DestinationStep({ data, setData, errors, clearErrors }: any) {\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Informações de Destino</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                    Preencha os dados do destinatário\n                </p>\n            </div>\n\n            <div className=\"space-y-4\">\n                <TextInput\n                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                    name=\"destination_name\"\n                    label=\"Nome do Destinatário\"\n                    placeholder=\"Nome da empresa ou pessoa\"\n                    required\n                />\n\n                <TextInput\n                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                    name=\"destination_address\"\n                    label=\"Endereço\"\n                    placeholder=\"Rua, número, complemento\"\n                    required\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"md:col-span-2\">\n                        <TextInput\n                            form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                            name=\"destination_city\"\n                            label=\"Cidade\"\n                            placeholder=\"Cidade\"\n                            required\n                        />\n                    </div>\n                    <TextInput\n                        form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                        name=\"destination_state\"\n                        label=\"Estado\"\n                        placeholder=\"UF\"\n                        required\n                    />\n                </div>\n\n                <TextInput\n                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                    name=\"destination_zip\"\n                    label=\"CEP\"\n                    placeholder=\"00000-000\"\n                />\n            </div>\n        </div>\n    );\n}\n\n// Step 3: Carrier\nfunction CarrierStep({ data, setData, errors, clearErrors }: any) {\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Informações de Transporte</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                    Preencha os dados da transportadora\n                </p>\n            </div>\n\n            <div className=\"space-y-4\">\n                <TextInput\n                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                    name=\"carrier\"\n                    label=\"Transportadora\"\n                    placeholder=\"Nome da transportadora\"\n                />\n\n                <TextInput\n                    form={{ data, setData, errors, clearErrors: clearErrors as any }}\n                    name=\"carrier_contact\"\n                    label=\"Contato\"\n                    placeholder=\"Telefone ou email de contato\"\n                />\n\n                <div>\n                    <Label>Observações</Label>\n                    <textarea\n                        className=\"w-full rounded-md border bg-background px-3 py-2 text-sm\"\n                        rows={4}\n                        value={data.notes}\n                        onChange={(e) => setData('notes', e.target.value)}\n                        placeholder=\"Observações adicionais sobre a remessa...\"\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n// Step 4: Photos\nfunction PhotosStep({\n    photos,\n    onPhotosChange\n}: {\n    photos: File[];\n    onPhotosChange: (photos: File[]) => void;\n}) {\n    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const files = Array.from(e.target.files || []);\n        onPhotosChange([...photos, ...files]);\n    };\n\n    const removePhoto = (index: number) => {\n        onPhotosChange(photos.filter((_, i) => i !== index));\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Fotos da Remessa</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                    Adicione fotos dos itens embalados para documentação\n                </p>\n            </div>\n\n            <div className=\"space-y-4\">\n                <div className=\"border-2 border-dashed rounded-lg p-6 text-center\">\n                    <Camera className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                    <Label htmlFor=\"photo-upload\" className=\"cursor-pointer\">\n                        <span className=\"text-primary hover:underline\">\n                            Clique para selecionar fotos\n                        </span>\n                    </Label>\n                    <Input\n                        id=\"photo-upload\"\n                        type=\"file\"\n                        accept=\"image/*\"\n                        multiple\n                        onChange={handleFileSelect}\n                        className=\"hidden\"\n                    />\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                        ou arraste e solte as imagens aqui\n                    </p>\n                </div>\n\n                {photos.length > 0 && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                        {photos.map((photo, index) => (\n                            <div key={index} className=\"relative group\">\n                                <img\n                                    src={URL.createObjectURL(photo)}\n                                    alt={`Preview ${index + 1}`}\n                                    className=\"w-full h-32 object-cover rounded-lg\"\n                                />\n                                <Button\n                                    variant=\"destructive\"\n                                    size=\"icon\"\n                                    className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                    onClick={() => removePhoto(index)}\n                                >\n                                    <X className=\"h-4 w-4\" />\n                                </Button>\n                                <p className=\"text-xs text-center mt-1 truncate\">\n                                    {photo.name}\n                                </p>\n                            </div>\n                        ))}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\n// Step 5: Confirmation\nfunction ConfirmationStep({\n    data,\n    shipmentItems,\n    items,\n    photos\n}: {\n    data: any;\n    shipmentItems: ShipmentItem[];\n    items: Item[];\n    photos: File[];\n}) {\n    const getItemDetails = (itemId: number) => {\n        return items.find(i => i.id === itemId);\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h3 className=\"text-lg font-semibold mb-2\">Confirmar Remessa</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                    Revise as informações antes de criar a remessa\n                </p>\n            </div>\n\n            <div className=\"space-y-4\">\n                {/* Items Summary */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle className=\"text-base\">Itens</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"space-y-2\">\n                            {shipmentItems.map((shipmentItem, index) => {\n                                const item = getItemDetails(shipmentItem.item_id);\n                                return (\n                                    <div key={index} className=\"flex justify-between\">\n                                        <span>{item?.item_number} - {item?.name}</span>\n                                        <span className=\"font-medium\">\n                                            {shipmentItem.quantity} {shipmentItem.unit_of_measure}\n                                        </span>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </CardContent>\n                </Card>\n\n                {/* Destination Summary */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle className=\"text-base\">Destino</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"space-y-1 text-sm\">\n                            <p className=\"font-medium\">{data.destination_name}</p>\n                            <p>{data.destination_address}</p>\n                            <p>{data.destination_city}, {data.destination_state} {data.destination_zip}</p>\n                        </div>\n                    </CardContent>\n                </Card>\n\n                {/* Carrier Summary */}\n                {(data.carrier || data.carrier_contact) && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle className=\"text-base\">Transporte</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"space-y-1 text-sm\">\n                                {data.carrier && <p>Transportadora: {data.carrier}</p>}\n                                {data.carrier_contact && <p>Contato: {data.carrier_contact}</p>}\n                            </div>\n                        </CardContent>\n                    </Card>\n                )}\n\n                {/* Photos Summary */}\n                {photos.length > 0 && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle className=\"text-base\">Fotos</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"text-sm\">\n                                {photos.length} foto{photos.length !== 1 ? 's' : ''} anexada{photos.length !== 1 ? 's' : ''}\n                            </p>\n                        </CardContent>\n                    </Card>\n                )}\n\n                {/* Notes */}\n                {data.notes && (\n                    <Card>\n                        <CardHeader>\n                            <CardTitle className=\"text-base\">Observações</CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                            <p className=\"text-sm\">{data.notes}</p>\n                        </CardContent>\n                    </Card>\n                )}\n            </div>\n        </div>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/shipments/edit.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2798,2801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2798,2801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4964,4967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4964,4967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Head, Link, useForm } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Save, X } from 'lucide-react';\ninterface ShipmentItem {\n    id: string;\n    manufacturing_order_id: string;\n    product_id: string;\n    quantity: number;\n    package_type: string;\n    package_count: number;\n    weight: number | null;\n    dimensions: string | null;\n    notes: string | null;\n    manufacturing_order: {\n        order_number: string;\n        product: {\n            id: string;\n            item_number: string;\n            name: string;\n        };\n    };\n}\ninterface Shipment {\n    id: string;\n    shipment_number: string;\n    destination: string;\n    customer_name: string;\n    scheduled_date: string;\n    status: 'draft' | 'ready' | 'in_transit' | 'delivered' | 'cancelled';\n    shipment_type: 'customer' | 'internal' | 'vendor' | 'other';\n    tracking_number: string | null;\n    carrier: string | null;\n    shipping_method: string | null;\n    cost: number | null;\n    notes: string | null;\n    items: ShipmentItem[];\n}\ninterface Props {\n    shipment: Shipment;\n}\nconst typeLabels: Record<string, string> = {\n    customer: 'Customer Shipment',\n    internal: 'Internal Transfer',\n    vendor: 'Vendor Return',\n    other: 'Other',\n};\nexport default function ShipmentEdit({ shipment }: Props) {\n    const { data, setData, put, processing, errors } = useForm({\n        destination: shipment.destination,\n        customer_name: shipment.customer_name,\n        scheduled_date: shipment.scheduled_date,\n        shipment_type: shipment.shipment_type,\n        tracking_number: shipment.tracking_number || '',\n        carrier: shipment.carrier || '',\n        shipping_method: shipment.shipping_method || '',\n        cost: shipment.cost?.toString() || '',\n        notes: shipment.notes || '',\n        items: shipment.items.map(item => ({\n            id: item.id,\n            quantity: item.quantity,\n            package_type: item.package_type,\n            package_count: item.package_count,\n            weight: item.weight?.toString() || '',\n            dimensions: item.dimensions || '',\n            notes: item.notes || '',\n        })),\n    });\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        put(route('production.shipments.update', shipment.id));\n    };\n    const updateItem = (index: number, field: string, value: any) => {\n        const newItems = [...data.items];\n        newItems[index] = { ...newItems[index], [field]: value };\n        setData('items', newItems);\n    };\n    const breadcrumbs = [\n        { title: 'Production', href: route('home') },\n        { title: 'Shipments', href: route('production.shipments.index') },\n        { title: shipment.shipment_number, href: route('production.shipments.show', shipment.id) },\n        { title: 'Edit', href: '' },\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={`Edit Shipment ${shipment.shipment_number}`} />\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between\">\n                    <h1 className=\"text-3xl font-bold\">Edit Shipment {shipment.shipment_number}</h1>\n                    <div className=\"flex gap-2\">\n                        <Button type=\"button\" variant=\"outline\" asChild>\n                            <Link href={route('production.shipments.show', shipment.id)}>\n                                <X className=\"mr-2 h-4 w-4\" />\n                                Cancel\n                            </Link>\n                        </Button>\n                        <Button type=\"submit\" disabled={processing}>\n                            <Save className=\"mr-2 h-4 w-4\" />\n                            Save Changes\n                        </Button>\n                    </div>\n                </div>\n                {/* Shipment Details */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Shipment Details</CardTitle>\n                        <CardDescription>Update the shipment information</CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"grid gap-4 md:grid-cols-2\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"shipment_type\">Type</Label>\n                            <Select\n                                value={data.shipment_type}\n                                onValueChange={(value) => setData('shipment_type', value as any)}\n                            >\n                                <SelectTrigger>\n                                    <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {Object.entries(typeLabels).map(([value, label]) => (\n                                        <SelectItem key={value} value={value}>\n                                            {label}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                            {errors.shipment_type && (\n                                <p className=\"text-sm text-red-600\">{errors.shipment_type}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"customer_name\">Customer Name</Label>\n                            <Input\n                                id=\"customer_name\"\n                                value={data.customer_name}\n                                onChange={(e) => setData('customer_name', e.target.value)}\n                            />\n                            {errors.customer_name && (\n                                <p className=\"text-sm text-red-600\">{errors.customer_name}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"destination\">Destination</Label>\n                            <Input\n                                id=\"destination\"\n                                value={data.destination}\n                                onChange={(e) => setData('destination', e.target.value)}\n                            />\n                            {errors.destination && (\n                                <p className=\"text-sm text-red-600\">{errors.destination}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"scheduled_date\">Scheduled Date</Label>\n                            <Input\n                                id=\"scheduled_date\"\n                                type=\"date\"\n                                value={data.scheduled_date}\n                                onChange={(e) => setData('scheduled_date', e.target.value)}\n                            />\n                            {errors.scheduled_date && (\n                                <p className=\"text-sm text-red-600\">{errors.scheduled_date}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"carrier\">Carrier</Label>\n                            <Input\n                                id=\"carrier\"\n                                value={data.carrier}\n                                onChange={(e) => setData('carrier', e.target.value)}\n                            />\n                            {errors.carrier && (\n                                <p className=\"text-sm text-red-600\">{errors.carrier}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"tracking_number\">Tracking Number</Label>\n                            <Input\n                                id=\"tracking_number\"\n                                value={data.tracking_number}\n                                onChange={(e) => setData('tracking_number', e.target.value)}\n                            />\n                            {errors.tracking_number && (\n                                <p className=\"text-sm text-red-600\">{errors.tracking_number}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"shipping_method\">Shipping Method</Label>\n                            <Input\n                                id=\"shipping_method\"\n                                value={data.shipping_method}\n                                onChange={(e) => setData('shipping_method', e.target.value)}\n                            />\n                            {errors.shipping_method && (\n                                <p className=\"text-sm text-red-600\">{errors.shipping_method}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"cost\">Cost</Label>\n                            <Input\n                                id=\"cost\"\n                                type=\"number\"\n                                step=\"0.01\"\n                                value={data.cost}\n                                onChange={(e) => setData('cost', e.target.value)}\n                            />\n                            {errors.cost && (\n                                <p className=\"text-sm text-red-600\">{errors.cost}</p>\n                            )}\n                        </div>\n                        <div className=\"space-y-2 md:col-span-2\">\n                            <Label htmlFor=\"notes\">Notes</Label>\n                            <Textarea\n                                id=\"notes\"\n                                value={data.notes}\n                                onChange={(e) => setData('notes', e.target.value)}\n                                rows={3}\n                            />\n                            {errors.notes && (\n                                <p className=\"text-sm text-red-600\">{errors.notes}</p>\n                            )}\n                        </div>\n                    </CardContent>\n                </Card>\n                {/* Shipment Items */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Items</CardTitle>\n                        <CardDescription>Update package information for each item</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"space-y-4\">\n                            {shipment.items.map((item, index) => (\n                                <div key={item.id} className=\"rounded-lg border p-4\">\n                                    <div className=\"mb-3 font-medium\">\n                                        {item.manufacturing_order.product.item_number} - {item.manufacturing_order.product.name}\n                                    </div>\n                                    <div className=\"grid gap-4 md:grid-cols-3\">\n                                        <div className=\"space-y-2\">\n                                            <Label>Quantity</Label>\n                                            <Input\n                                                type=\"number\"\n                                                value={data.items[index].quantity}\n                                                onChange={(e) => updateItem(index, 'quantity', parseInt(e.target.value) || 0)}\n                                            />\n                                        </div>\n                                        <div className=\"space-y-2\">\n                                            <Label>Package Type</Label>\n                                            <Input\n                                                value={data.items[index].package_type}\n                                                onChange={(e) => updateItem(index, 'package_type', e.target.value)}\n                                            />\n                                        </div>\n                                        <div className=\"space-y-2\">\n                                            <Label>Package Count</Label>\n                                            <Input\n                                                type=\"number\"\n                                                value={data.items[index].package_count}\n                                                onChange={(e) => updateItem(index, 'package_count', parseInt(e.target.value) || 0)}\n                                            />\n                                        </div>\n                                        <div className=\"space-y-2\">\n                                            <Label>Weight (kg)</Label>\n                                            <Input\n                                                type=\"number\"\n                                                step=\"0.01\"\n                                                value={data.items[index].weight}\n                                                onChange={(e) => updateItem(index, 'weight', e.target.value)}\n                                            />\n                                        </div>\n                                        <div className=\"space-y-2\">\n                                            <Label>Dimensions</Label>\n                                            <Input\n                                                value={data.items[index].dimensions}\n                                                onChange={(e) => updateItem(index, 'dimensions', e.target.value)}\n                                            />\n                                        </div>\n                                        <div className=\"space-y-2 md:col-span-3\">\n                                            <Label>Notes</Label>\n                                            <Textarea\n                                                value={data.items[index].notes}\n                                                onChange={(e) => updateItem(index, 'notes', e.target.value)}\n                                                rows={2}\n                                            />\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    </CardContent>\n                </Card>\n            </form>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/shipments/index.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":112,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":115,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9820,9823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9820,9823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10037,10040],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10037,10040],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":251,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10126,10129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10126,10129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":256,"column":117,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":120,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10477,10480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10477,10480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { Head, Link, router } from '@inertiajs/react';\nimport AppLayout from '@/layouts/app-layout';\nimport { ListLayout } from '@/layouts/asset-hierarchy/list-layout';\nimport { Package, Truck, CheckCircle, XCircle, Clock, Eye } from 'lucide-react';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { ColumnConfig } from '@/types/shared';\ninterface Shipment {\n    id: string;\n    shipment_number: string;\n    destination: string;\n    customer_name: string;\n    scheduled_date: string;\n    shipped_date: string | null;\n    delivered_date: string | null;\n    status: 'draft' | 'ready' | 'in_transit' | 'delivered' | 'cancelled';\n    shipment_type: 'customer' | 'internal' | 'vendor' | 'other';\n    tracking_number: string | null;\n    carrier: string | null;\n    items_count: number;\n    photos_count: number;\n    created_by: {\n        id: string;\n        name: string;\n    };\n    created_at: string;\n    updated_at: string;\n}\ninterface Props {\n    shipments: {\n        data: Shipment[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search?: string;\n        status?: string;\n        shipment_type?: string;\n        date_from?: string;\n        date_to?: string;\n        per_page?: number;\n    };\n    statuses: Record<string, string>;\n    shipmentTypes: Record<string, string>;\n    can: {\n        create: boolean;\n    };\n}\nconst statusConfig = {\n    draft: { icon: Clock, color: 'text-gray-500', bgColor: 'bg-gray-100' },\n    ready: { icon: Package, color: 'text-blue-600', bgColor: 'bg-blue-100' },\n    in_transit: { icon: Truck, color: 'text-yellow-600', bgColor: 'bg-yellow-100' },\n    delivered: { icon: CheckCircle, color: 'text-green-600', bgColor: 'bg-green-100' },\n    cancelled: { icon: XCircle, color: 'text-red-600', bgColor: 'bg-red-100' },\n};\nexport default function ShipmentsIndex({ shipments, filters, statuses, shipmentTypes, can }: Props) {\n    const [searchValue, setSearchValue] = useState(filters.search || '');\n    const [deleteShipment, setDeleteShipment] = useState<Shipment | null>(null);\n    const handleSearchChange = (value: string) => {\n        setSearchValue(value);\n        router.get(route('production.shipments.index'), { ...filters, search: value }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleFilter = (key: string, value: string | null) => {\n        const newFilters: Record<string, any> = { ...filters };\n        if (value) {\n            newFilters[key] = value;\n        } else {\n            delete newFilters[key];\n        }\n        router.get(route('production.shipments.index'), newFilters, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handlePageChange = (page: number) => {\n        router.get(route('production.shipments.index'), { ...filters, page }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handlePerPageChange = (perPage: number) => {\n        router.get(route('production.shipments.index'), { ...filters, per_page: perPage }, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n    const handleDelete = async () => {\n        if (!deleteShipment) return;\n        router.delete(route('production.shipments.destroy', deleteShipment.id), {\n            onSuccess: () => {\n                setDeleteShipment(null);\n            },\n        });\n    };\n    const columns: ColumnConfig[] = [\n        {\n            key: 'shipment_number',\n            label: 'Shipment #',\n            sortable: true,\n            render: (value: unknown, shipment: Record<string, unknown>) => (\n                <Link\n                    href={route('production.shipments.show', shipment.id)}\n                    className=\"font-medium text-blue-600 hover:underline\"\n                >\n                    {value as React.ReactNode}\n                </Link>\n            ),\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            sortable: true,\n            render: (value: unknown) => {\n                const config = statusConfig[value as keyof typeof statusConfig];\n                const Icon = config.icon;\n                return (\n                    <Badge variant=\"secondary\" className={cn(config.bgColor, config.color)}>\n                        <Icon className=\"mr-1 h-3 w-3\" />\n                        {statuses[value as string]}\n                    </Badge>\n                );\n            },\n        },\n        {\n            key: 'shipment_type',\n            label: 'Type',\n            sortable: true,\n            render: (value: unknown) => <>{shipmentTypes[value as string] || value}</>,\n        },\n        {\n            key: 'customer_name',\n            label: 'Customer',\n            sortable: true,\n        },\n        {\n            key: 'destination',\n            label: 'Destination',\n            sortable: true,\n        },\n        {\n            key: 'scheduled_date',\n            label: 'Scheduled Date',\n            sortable: true,\n            render: (value: unknown) => <>{format(new Date(value as string | number | Date), 'MMM dd, yyyy')}</>,\n        },\n        {\n            key: 'items_count',\n            label: 'Items',\n            render: (value: unknown) => (\n                <span className=\"text-sm text-muted-foreground\">{value as React.ReactNode} items</span>\n            ),\n        },\n        {\n            key: 'tracking_number',\n            label: 'Tracking',\n            render: (value: unknown) => <>{value || '-'}</>,\n        },\n    ];\n    const breadcrumbs = [\n        { title: 'Production', href: '/' },\n        { title: 'Shipments', href: '' }\n    ];\n    const pagination = {\n        current_page: shipments.current_page,\n        last_page: shipments.last_page,\n        per_page: shipments.per_page,\n        total: shipments.total,\n        from: shipments.from,\n        to: shipments.to,\n    };\n    const data = shipments.data;\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Shipments\" />\n            <ListLayout\n                title=\"Shipments\"\n                description=\"Manage product shipments and deliveries\"\n                searchPlaceholder=\"Search shipments...\"\n                searchValue={searchValue}\n                onSearchChange={handleSearchChange}\n                createRoute={can.create ? route('production.shipments.create') : undefined}\n                createButtonText=\"New Shipment\"\n                actions={\n                    <div className=\"flex gap-2\">\n                        <Select\n                            value={filters.status || 'all'}\n                            onValueChange={(value) => handleFilter('status', value === 'all' ? null : value)}\n                        >\n                            <SelectTrigger className=\"w-[180px]\">\n                                <SelectValue placeholder=\"All Statuses\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">All Statuses</SelectItem>\n                                {Object.entries(statuses).map(([value, label]) => (\n                                    <SelectItem key={value} value={value}>\n                                        {label}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                        <Select\n                            value={filters.shipment_type || 'all'}\n                            onValueChange={(value) => handleFilter('shipment_type', value === 'all' ? null : value)}\n                        >\n                            <SelectTrigger className=\"w-[180px]\">\n                                <SelectValue placeholder=\"All Types\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"all\">All Types</SelectItem>\n                                {Object.entries(shipmentTypes).map(([value, label]) => (\n                                    <SelectItem key={value} value={value}>\n                                        {label}\n                                    </SelectItem>\n                                ))}\n                            </SelectContent>\n                        </Select>\n                        <Input\n                            type=\"date\"\n                            value={filters.date_from || ''}\n                            onChange={(e) => handleFilter('date_from', e.target.value || null)}\n                            placeholder=\"From date\"\n                            className=\"w-[180px]\"\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data as unknown as Record<string, unknown>[]}\n                        columns={columns}\n                        loading={loading}\n                        onRowClick={(shipment) => router.visit(route('production.shipments.show', (shipment as any).id))}\n                        actions={(shipment) => (\n                            <EntityActionDropdown\n                                onEdit={() => router.visit(route('production.shipments.edit', (shipment as any).id))}\n                                onDelete={() => setDeleteShipment(shipment as any)}\n                                additionalActions={[\n                                    {\n                                        label: 'View Details',\n                                        icon: <Eye className=\"h-4 w-4\" />,\n                                        onClick: () => router.visit(route('production.shipments.show', (shipment as any).id))\n                                    }\n                                ]}\n                            />\n                        )}\n                    />\n                    <EntityPagination\n                        pagination={pagination}\n                        onPageChange={handlePageChange}\n                        onPerPageChange={handlePerPageChange}\n                    />\n                </div>\n            </ListLayout>\n            <EntityDeleteDialog\n                open={!!deleteShipment}\n                onOpenChange={(open) => !open && setDeleteShipment(null)}\n                entityLabel={deleteShipment ? `shipment ${deleteShipment.shipment_number}` : ''}\n                onConfirm={handleDelete}\n            />\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/shipments/show.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/steps/execute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/tracking/dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2362,2365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2362,2365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2722,2725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2722,2725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":89,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2985,2988],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2985,2988],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3371,3374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3371,3374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6478,6481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6478,6481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":167,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":167,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6579,6582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6579,6582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8492,8495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8492,8495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":296,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11747,11750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11747,11750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":316,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12694,12697],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12694,12697],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { router } from '@inertiajs/react';\nimport { Link } from '@inertiajs/react';\nimport { PlayCircle, CheckCircle, AlertCircle, TrendingUp, QrCode, Activity } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport AppLayout from '@/layouts/app-layout';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { ColumnConfig } from '@/types/shared';\nimport { ManufacturingOrder, WorkCell } from '@/types/production';\nimport { cn } from '@/lib/utils';\ninterface Props {\n    stats: {\n        inProduction: number;\n        completedToday: number;\n        defectRate: number;\n        efficiency: number;\n    };\n    workCells: WorkCell[];\n    activeOrders: ManufacturingOrder[];\n}\ninterface KpiCardProps {\n    title: string;\n    value: string | number;\n    icon: React.ReactNode;\n    trend?: string;\n    trendUp?: boolean;\n}\nfunction KpiCard({ title, value, icon, trend, trendUp }: KpiCardProps) {\n    return (\n        <Card>\n            <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-primary/10 rounded-lg\">\n                            {icon}\n                        </div>\n                        <div>\n                            <p className=\"text-sm text-muted-foreground\">{title}</p>\n                            <p className=\"text-2xl font-bold\">{value}</p>\n                        </div>\n                    </div>\n                    {trend && (\n                        <div className={cn(\n                            \"text-sm font-medium\",\n                            trendUp ? \"text-green-600\" : \"text-red-600\"\n                        )}>\n                            {trend}\n                        </div>\n                    )}\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\nfunction WorkCellCard({\n    workCell,\n    onClick\n}: {\n    workCell: WorkCell & {\n        currentOrder?: ManufacturingOrder;\n        operator?: { name: string };\n        efficiency?: number;\n    };\n    onClick: () => void;\n}) {\n    const getStatusColor = () => {\n        switch ((workCell as any).status) {\n            case 'active':\n                return 'bg-green-500';\n            case 'maintenance':\n                return 'bg-yellow-500';\n            case 'inactive':\n                return 'bg-gray-500';\n            default:\n                return 'bg-gray-500';\n        }\n    };\n    const getStatusLabel = () => {\n        switch ((workCell as any).status) {\n            case 'active':\n                return 'Ativa';\n            case 'maintenance':\n                return 'Manutenção';\n            case 'inactive':\n                return 'Inativa';\n            default:\n                return (workCell as any).status;\n        }\n    };\n    return (\n        <Card\n            className=\"cursor-pointer hover:shadow-md transition-shadow\"\n            onClick={onClick}\n        >\n            <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                        <h4 className=\"font-semibold text-lg\">{(workCell as any).code || workCell.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{workCell.name}</p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <div className={cn(\"w-2 h-2 rounded-full\", getStatusColor())} />\n                        <span className=\"text-sm\">{getStatusLabel()}</span>\n                    </div>\n                </div>\n                {workCell.currentOrder ? (\n                    <div className=\"space-y-2\">\n                        <div className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Ordem: </span>\n                            <span className=\"font-medium\">{workCell.currentOrder.order_number}</span>\n                        </div>\n                        <div className=\"text-sm\">\n                            <span className=\"text-muted-foreground\">Produto: </span>\n                            <span>{workCell.currentOrder.item?.name}</span>\n                        </div>\n                        {workCell.operator && (\n                            <div className=\"text-sm\">\n                                <span className=\"text-muted-foreground\">Operador: </span>\n                                <span>{workCell.operator.name}</span>\n                            </div>\n                        )}\n                        <div className=\"flex items-center justify-between mt-3\">\n                            <Badge variant=\"default\">Em Produção</Badge>\n                            {workCell.efficiency && (\n                                <span className=\"text-sm font-medium\">\n                                    {workCell.efficiency}% eficiência\n                                </span>\n                            )}\n                        </div>\n                    </div>\n                ) : (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                        <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-sm\">Célula disponível</p>\n                    </div>\n                )}\n            </CardContent>\n        </Card>\n    );\n}\nexport default function ProductionDashboard({ stats, workCells, activeOrders }: Props) {\n    const handleCellClick = (cell: WorkCell) => {\n        console.log('Cell clicked:', cell);\n        // Navigate to cell details or open modal\n    };\n    const handleOrderClick = (order: ManufacturingOrder) => {\n        router.visit(route('production.planning.orders.show', order.id));\n    };\n    const activeOrderColumns: ColumnConfig[] = [\n        {\n            key: 'order_number',\n            label: 'Número',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value: unknown) => (\n                <Badge variant=\"outline\">{value as React.ReactNode}</Badge>\n            )\n        },\n        {\n            key: 'item',\n            label: 'Produto',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                <div>\n                    <div className=\"font-medium\">{(order.item as any)?.name}</div>\n                    <div className=\"text-sm text-muted-foreground\">{(order.item as any)?.item_number}</div>\n                </div>\n            )\n        },\n        {\n            key: 'quantity',\n            label: 'Quantidade',\n            width: 'w-[120px]',\n            headerAlign: 'center',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                <div className=\"text-center\">\n                    {value as React.ReactNode} {order.unit_of_measure as React.ReactNode}\n                </div>\n            )\n        },\n        {\n            key: 'progress',\n            label: 'Progresso',\n            width: 'w-[200px]',\n            render: (value: unknown, order: Record<string, unknown>) => {\n                const progress = order.quantity_completed\n                    ? Math.round(((order.quantity_completed as number) / (order.quantity as number)) * 100)\n                    : 0;\n                return (\n                    <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                            <span>{(order.quantity_completed || 0) as React.ReactNode}/{order.quantity as React.ReactNode}</span>\n                            <span>{progress}%</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div\n                                className=\"bg-primary h-2 rounded-full transition-all\"\n                                style={{ width: `${progress}%` }}\n                            />\n                        </div>\n                    </div>\n                );\n            }\n        },\n        {\n            key: 'work_cell',\n            label: 'Célula',\n            width: 'w-[120px]',\n            render: (value: unknown, order: Record<string, unknown>) => (\n                order.current_work_cell ? (\n                    <Badge variant=\"secondary\">\n                        {(order.current_work_cell as any).code}\n                    </Badge>\n                ) : (\n                    <span className=\"text-muted-foreground\">—</span>\n                )\n            )\n        },\n        {\n            key: 'priority',\n            label: 'Prioridade',\n            width: 'w-[100px]',\n            headerAlign: 'center',\n            render: (value: unknown) => {\n                const variants: Record<string, 'default' | 'secondary' | 'destructive' | 'outline'> = {\n                    'urgent': 'destructive',\n                    'high': 'default',\n                    'normal': 'secondary',\n                    'low': 'outline'\n                };\n                const labels: Record<string, string> = {\n                    'urgent': 'Urgente',\n                    'high': 'Alta',\n                    'normal': 'Normal',\n                    'low': 'Baixa'\n                };\n                return (\n                    <div className=\"text-center\">\n                        <Badge variant={variants[value as string] || 'secondary'}>\n                            {labels[value as string] || String(value)}\n                        </Badge>\n                    </div>\n                );\n            }\n        }\n    ];\n    const breadcrumbs = [\n        { title: 'Produção', href: '/' },\n        { title: 'Rastreamento', href: '' }\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <div className=\"p-6 space-y-6\">\n                {/* KPI Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <KpiCard\n                        title=\"Em Produção\"\n                        value={stats.inProduction}\n                        icon={<PlayCircle className=\"h-4 w-4\" />}\n                        trend=\"+12%\"\n                        trendUp\n                    />\n                    <KpiCard\n                        title=\"Concluídas Hoje\"\n                        value={stats.completedToday}\n                        icon={<CheckCircle className=\"h-4 w-4\" />}\n                        trend=\"+5%\"\n                        trendUp\n                    />\n                    <KpiCard\n                        title=\"Taxa de Defeitos\"\n                        value={`${stats.defectRate}%`}\n                        icon={<AlertCircle className=\"h-4 w-4\" />}\n                        trend=\"-0.5%\"\n                        trendUp\n                    />\n                    <KpiCard\n                        title=\"Eficiência\"\n                        value={`${stats.efficiency}%`}\n                        icon={<TrendingUp className=\"h-4 w-4\" />}\n                        trend=\"+3%\"\n                        trendUp\n                    />\n                </div>\n                {/* Work Cell Status Grid */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Status das Células de Trabalho</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                            {workCells.map((cell) => (\n                                <WorkCellCard\n                                    key={cell.id}\n                                    workCell={cell as any}\n                                    onClick={() => handleCellClick(cell)}\n                                />\n                            ))}\n                        </div>\n                    </CardContent>\n                </Card>\n                {/* Active Production Orders */}\n                <Card>\n                    <CardHeader className=\"flex flex-row items-center justify-between\">\n                        <CardTitle>Ordens em Produção</CardTitle>\n                        <Button variant=\"outline\" size=\"sm\" asChild>\n                            <Link href={route('production.tracking.scan')}>\n                                <QrCode className=\"h-4 w-4 mr-2\" />\n                                Scanner QR\n                            </Link>\n                        </Button>\n                    </CardHeader>\n                    <CardContent>\n                        <EntityDataTable\n                            data={activeOrders as any}\n                            columns={activeOrderColumns}\n                            onRowClick={(order: Record<string, unknown>) => handleOrderClick(order as unknown as ManufacturingOrder)}\n                        />\n                    </CardContent>\n                </Card>\n            </div>\n        </AppLayout>\n    );\n} ","usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/tracking/scan.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/work-cells/index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/workspace/resources/js/Pages/production/work-cells/show.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":228,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9127,9130],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9127,9130],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10269,10272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10269,10272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type BreadcrumbItem } from '@/types';\nimport { type WorkCell, type ManufacturingStep, type ProductionSchedule } from '@/types/production';\nimport { Head, Link, router } from '@inertiajs/react';\nimport { Factory, Clock, Calendar, Gauge } from 'lucide-react';\nimport WorkCellFormComponent from '@/components/production/WorkCellFormComponent';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { Badge } from '@/components/ui/badge';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/show-layout';\ninterface Props {\n    workCell: WorkCell & {\n        plant?: { id: number; name: string };\n        area?: { id: number; name: string };\n        sector?: { id: number; name: string };\n        shift?: { id: number; name: string };\n        manufacturer?: { id: number; name: string };\n    };\n    plants: { id: number; name: string }[];\n    areas: { id: number; name: string }[];\n    sectors: { id: number; name: string }[];\n    shifts: { id: number; name: string }[];\n    manufacturers: { id: number; name: string }[];\n    routingSteps: {\n        data: ManufacturingStep[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n    };\n    productionSchedules: {\n        data: ProductionSchedule[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n    };\n    utilization: number;\n    activeTab: string;\n    filters: {\n        steps: {\n            sort: string;\n            direction: string;\n        };\n        schedules: {\n            sort: string;\n            direction: string;\n        };\n    };\n}\nexport default function Show({\n    workCell,\n    plants,\n    areas,\n    sectors,\n    shifts,\n    manufacturers,\n    routingSteps,\n    productionSchedules,\n    utilization,\n    activeTab,\n    filters\n}: Props) {\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Home',\n            href: '/home',\n        },\n        {\n            title: 'Produção',\n            href: '#',\n        },\n        {\n            title: 'Células de Trabalho',\n            href: '/production/work-cells',\n        },\n        {\n            title: workCell.name,\n            href: '#',\n        },\n    ];\n    const handleSort = (section: 'steps' | 'schedules', column: string) => {\n        const direction = filters[section].sort === column && filters[section].direction === 'asc' ? 'desc' : 'asc';\n        router.get(\n            route('production.work-cells.show', {\n                work_cell: workCell.id,\n                tab: activeTab,\n                [`${section}_sort`]: column,\n                [`${section}_direction`]: direction,\n                [`${section}_page`]: 1,\n            }),\n            {},\n            { preserveState: true },\n        );\n    };\n    // Verificações de segurança para evitar erros de undefined\n    if (!workCell) {\n        return (\n            <AppLayout breadcrumbs={breadcrumbs}>\n                <ShowLayout title=\"Carregando...\" editRoute=\"\" tabs={[]}>\n                    <div>Carregando informações da célula de trabalho...</div>\n                </ShowLayout>\n            </AppLayout>\n        );\n    }\n    const subtitle = (\n        <span className=\"text-muted-foreground flex items-center gap-4 text-sm\">\n            <span className=\"flex items-center gap-1\">\n                <Factory className=\"h-4 w-4\" />\n                <span>{workCell.cell_type === 'internal' ? 'Interna' : 'Externa'}</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{workCell.available_hours_per_day}h/dia</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Gauge className=\"h-4 w-4\" />\n                <span>{workCell.efficiency_percentage}% eficiência</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Calendar className=\"h-4 w-4\" />\n                <span>{utilization}% utilização</span>\n            </span>\n        </span>\n    );\n    const tabs = [\n        {\n            id: 'informacoes',\n            label: 'Informações Gerais',\n            content: (\n                <div className=\"py-8\">\n                    <WorkCellFormComponent\n                        workCell={workCell}\n                        plants={plants}\n                        areas={areas}\n                        sectors={sectors}\n                        shifts={shifts}\n                        manufacturers={manufacturers}\n                        initialMode=\"view\"\n                        onSuccess={() => router.reload()}\n                    />\n                </div>\n            ),\n        },\n        {\n            id: 'etapas',\n            label: 'Etapas de Roteiro',\n            content: (\n                <div className=\"mt-6 space-y-4\">\n                    <EntityDataTable\n                        data={routingSteps.data.map(step => ({ ...step } as Record<string, unknown>))}\n                        columns={[\n                            {\n                                key: 'step_number',\n                                label: 'Etapa',\n                                sortable: true,\n                                width: 'w-[100px]',\n                                render: (value) => <span className=\"font-medium\">#{value as number}</span>,\n                            },\n                            {\n                                key: 'name',\n                                label: 'Nome',\n                                sortable: true,\n                                width: 'w-[300px]',\n                                render: (value) => <span className=\"font-medium\">{value as string}</span>,\n                            },\n                            {\n                                key: 'description',\n                                label: 'Descrição',\n                                sortable: true,\n                                width: 'w-[250px]',\n                                render: (value) => <span className=\"text-sm\">{value as string || '-'}</span>,\n                            },\n                            {\n                                key: 'cycle_time_minutes',\n                                label: 'Tempo de Ciclo',\n                                sortable: true,\n                                width: 'w-[150px]',\n                                render: (value) => <span className=\"text-sm\">{value as number} min</span>,\n                            },\n                            {\n                                key: 'setup_time_minutes',\n                                label: 'Tempo de Setup',\n                                sortable: true,\n                                width: 'w-[100px]',\n                                render: (value) => <span className=\"text-sm\">{value as number || 0} min</span>,\n                            },\n                        ]}\n                        onSort={(columnKey) => handleSort('steps', columnKey)}\n                    />\n                    <EntityPagination\n                        pagination={{\n                            current_page: routingSteps.current_page,\n                            last_page: routingSteps.last_page,\n                            per_page: routingSteps.per_page,\n                            total: routingSteps.total,\n                            from: routingSteps.current_page > 0 ? (routingSteps.current_page - 1) * routingSteps.per_page + 1 : null,\n                            to: routingSteps.current_page > 0 ? Math.min(routingSteps.current_page * routingSteps.per_page, routingSteps.total) : null,\n                        }}\n                        onPageChange={(page) => router.get(route('production.work-cells.show', {\n                            work_cell: workCell.id,\n                            steps_page: page,\n                            tab: 'etapas',\n                            steps_sort: filters.steps.sort,\n                            steps_direction: filters.steps.direction,\n                        }))}\n                    />\n                </div>\n            ),\n        },\n        {\n            id: 'agendamentos',\n            label: 'Agendamentos',\n            content: (\n                <div className=\"mt-6 space-y-4\">\n                    <EntityDataTable\n                        data={productionSchedules.data.map(schedule => ({ ...schedule } as Record<string, unknown>))}\n                        columns={[\n                            {\n                                key: 'order',\n                                label: 'Ordem de Produção',\n                                sortable: true,\n                                width: 'w-[200px]',\n                                render: (value, row) => {\n                                    const schedule = row as any;\n                                    if (schedule.manufacturing_order) {\n                                        return (\n                                            <Link\n                                                href={route('production.manufacturing-orders.show', schedule.manufacturing_order.id)}\n                                                className=\"hover:text-primary font-medium\"\n                                            >\n                                                {schedule.manufacturing_order.order_number}\n                                            </Link>\n                                        );\n                                    }\n                                    return '-';\n                                },\n                            },\n                            {\n                                key: 'manufacturing_step',\n                                label: 'Etapa',\n                                sortable: false,\n                                width: 'w-[250px]',\n                                render: (value, row) => {\n                                    const schedule = row as any;\n                                    if (schedule.manufacturing_step) {\n                                        return (\n                                            <div>\n                                                <div>Etapa #{schedule.manufacturing_step.step_number}</div>\n                                                <div className=\"text-muted-foreground text-sm\">\n                                                    {schedule.manufacturing_step?.operation_description || ''}\n                                                </div>\n                                            </div>\n                                        );\n                                    }\n                                    return '-';\n                                },\n                            },\n                            {\n                                key: 'scheduled_start',\n                                label: 'Início Agendado',\n                                sortable: true,\n                                width: 'w-[180px]',\n                                render: (value) => {\n                                    if (value) {\n                                        const date = new Date(value as string);\n                                        return date.toLocaleString('pt-BR');\n                                    }\n                                    return '-';\n                                },\n                            },\n                            {\n                                key: 'scheduled_end',\n                                label: 'Fim Agendado',\n                                sortable: true,\n                                width: 'w-[180px]',\n                                render: (value) => {\n                                    if (value) {\n                                        const date = new Date(value as string);\n                                        return date.toLocaleString('pt-BR');\n                                    }\n                                    return '-';\n                                },\n                            },\n                            {\n                                key: 'status',\n                                label: 'Status',\n                                sortable: true,\n                                width: 'w-[120px]',\n                                render: (value) => {\n                                    const statusMap: Record<string, { label: string; variant: 'default' | 'secondary' | 'destructive' | 'outline' }> = {\n                                        'scheduled': { label: 'Agendado', variant: 'outline' },\n                                        'ready': { label: 'Pronto', variant: 'secondary' },\n                                        'in_progress': { label: 'Em Andamento', variant: 'default' },\n                                        'completed': { label: 'Concluído', variant: 'default' },\n                                        'cancelled': { label: 'Cancelado', variant: 'destructive' },\n                                    };\n                                    const status = statusMap[value as string] || { label: value as string, variant: 'outline' as const };\n                                    return <Badge variant={status.variant}>{status.label}</Badge>;\n                                },\n                            },\n                        ]}\n                        onSort={(columnKey) => handleSort('schedules', columnKey)}\n                    />\n                    <EntityPagination\n                        pagination={{\n                            current_page: productionSchedules.current_page,\n                            last_page: productionSchedules.last_page,\n                            per_page: productionSchedules.per_page,\n                            total: productionSchedules.total,\n                            from: productionSchedules.current_page > 0 ? (productionSchedules.current_page - 1) * productionSchedules.per_page + 1 : null,\n                            to: productionSchedules.current_page > 0 ? Math.min(productionSchedules.current_page * productionSchedules.per_page, productionSchedules.total) : null,\n                        }}\n                        onPageChange={(page) => router.get(route('production.work-cells.show', {\n                            work_cell: workCell.id,\n                            schedules_page: page,\n                            tab: 'agendamentos',\n                            schedules_sort: filters.schedules.sort,\n                            schedules_direction: filters.schedules.direction,\n                        }))}\n                    />\n                </div>\n            ),\n        },\n    ];\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={`Célula de Trabalho ${workCell.name}`} />\n            <ShowLayout\n                title={workCell.name}\n                subtitle={subtitle}\n                editRoute={route('production.work-cells.edit', workCell.id)}\n                tabs={tabs}\n            />\n        </AppLayout>\n    );\n}","usedDeprecatedRules":[]}]

