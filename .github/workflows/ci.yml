name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  typescript-lint:
    name: TypeScript & Linting
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript type check
      run: npm run types
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check code formatting
      run: npm run format:check
    
    - name: Security audit
      run: npm audit --production --audit-level=high
      continue-on-error: true

  php-analysis:
    name: PHP Analysis
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, pdo, pdo_pgsql, redis, bcmath, gd
        coverage: none
    
    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
    
    - name: Cache composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-
    
    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Generate key
      run: php artisan key:generate
    
    - name: Run Laravel Pint
      run: ./vendor/bin/pint --test
    
    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse --no-progress
      continue-on-error: true # Remove this when all PHPStan issues are fixed

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [typescript-lint, php-analysis]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, pdo, pdo_pgsql, redis, bcmath, gd
        coverage: xdebug
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install PHP dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Generate key
      run: php artisan key:generate
    
    - name: Run migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
    
    - name: Build assets
      run: npm run build
    
    - name: Run tests
      run: php artisan test --parallel
      env:
        DB_CONNECTION: pgsql
        DB_HOST: localhost
        DB_PORT: 5432
        DB_DATABASE: testing
        DB_USERNAME: postgres
        DB_PASSWORD: postgres

  build:
    name: Build Production
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: production-build
        path: |
          public/build
          public/mix-manifest.json
        retention-days: 7