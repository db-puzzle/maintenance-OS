
> lint
> eslint . --fix --format=json

[
    {
        "filePath": "/workspace/eslint.config.js",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/app.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ActionShortcuts.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 6,
                "column": 11,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 6,
                "endColumn": 14,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                147,
                                150
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                147,
                                150
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 16,
                "column": 11,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 16,
                "endColumn": 14,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                333,
                                336
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                333,
                                336
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { router } from '@inertiajs/react';\nimport { ChevronRight } from 'lucide-react';\n\nexport interface ActionItem {\n    name: string;\n    icon: any;\n    isDefault?: boolean;\n    comingSoon?: boolean;\n    newFeature?: boolean;\n    description: string;\n    href?: string;\n}\n\nexport interface PathItem {\n    title: string;\n    icon: any;\n    description: string;\n    href?: string;\n    actions: ActionItem[];\n}\n\ninterface ActionShortcutsProps {\n    title?: string;\n    paths: Record<string, PathItem>;\n    onActionClick?: (pathKey: string, actionName: string) => void;\n}\n\nexport default function ActionShortcuts({ title = 'Atalhos', paths, onActionClick }: ActionShortcutsProps) {\n    return (\n        <div>\n            <h2 className=\"text-foreground mb-6 text-xl font-semibold\">{title}</h2>\n            <div className=\"grid grid-cols-1 gap-8 lg:grid-cols-3\">\n                {Object.entries(paths).map(([key, path]) => {\n                    const IconComponent = path.icon;\n                    const hasQuickAction = !!path.href;\n\n                    // Conteúdo comum extraído\n                    const headerContent = (\n                        <div className=\"flex items-center space-x-3\">\n                            <div\n                                className={`bg-background rounded-lg p-2 transition-colors duration-200 ${\n                                    hasQuickAction ? 'group-hover:bg-ring/10 group-hover:ring-ring/10' : ''\n                                }`}\n                            >\n                                <IconComponent size={28} className={`text-foreground ${hasQuickAction ? 'group-hover:text-ring' : ''}`} />\n                            </div>\n                            <div className=\"flex-1\">\n                                <h3 className=\"text-foreground text-xl font-semibold\">{path.title}</h3>\n                                <p className=\"text-muted-foreground text-sm\">{path.description}</p>\n                            </div>\n                            {hasQuickAction && (\n                                <ChevronRight className=\"text-muted-foreground group-hover:text-foreground transition-colors\" size={20} />\n                            )}\n                        </div>\n                    );\n\n                    // Wrapper condicional\n                    const HeaderWrapper = hasQuickAction ? 'button' : 'div';\n                    const headerProps = hasQuickAction\n                        ? {\n                              onClick: () => router.visit(path.href!),\n                              className:\n                                  'w-full bg-muted p-6 hover:bg-input-focus hover:ring-ring/10 hover:ring-[1px] hover:border-ring transition-all duration-200 group text-left',\n                          }\n                        : {\n                              className: 'bg-muted p-6',\n                          };\n\n                    return (\n                        <div key={key} className=\"bg-card border-border overflow-hidden rounded-xl border shadow-sm\">\n                            {/* Path Header - Dinâmico */}\n                            <HeaderWrapper {...headerProps}>{headerContent}</HeaderWrapper>\n\n                            {/* Actions List */}\n                            <div className=\"p-6\">\n                                <div className=\"space-y-1\">\n                                    {path.actions.map((action, index) => {\n                                        const ActionIcon = action.icon;\n                                        const hasActionLink = !!action.href;\n\n                                        return (\n                                            <button\n                                                key={index}\n                                                onClick={() => {\n                                                    if (onActionClick) {\n                                                        onActionClick(key, action.name);\n                                                    } else if (action.href) {\n                                                        router.visit(action.href);\n                                                    }\n                                                }}\n                                                className={`flex w-full items-start space-x-3 rounded-lg p-4 text-left ${\n                                                    hasActionLink\n                                                        ? 'hover:bg-input-focus hover:ring-ring/10 hover:border-ring group transition-colors hover:ring-[1px]'\n                                                        : 'group'\n                                                }`}\n                                            >\n                                                <div\n                                                    className={`mt-0.5 ${\n                                                        hasActionLink ? 'text-muted-foreground group-hover:text-foreground' : 'text-muted-foreground'\n                                                    }`}\n                                                >\n                                                    <ActionIcon size={20} />\n                                                </div>\n                                                <div className=\"flex-1\">\n                                                    <div className=\"flex items-center space-x-2\">\n                                                        <h4\n                                                            className={`font-medium ${\n                                                                hasActionLink ? 'text-foreground group-hover:text-foreground' : 'text-foreground'\n                                                            }`}\n                                                        >\n                                                            {action.name}\n                                                        </h4>\n                                                        {action.isDefault && (\n                                                            <span className=\"bg-primary/10 text-primary rounded-full px-2 py-1 text-xs\">Padrão</span>\n                                                        )}\n                                                        {action.comingSoon && (\n                                                            <span className=\"bg-primary/10 text-primary rounded-full px-2 py-1 text-xs\">\n                                                                Em Breve\n                                                            </span>\n                                                        )}\n                                                        {action.newFeature && (\n                                                            <span className=\"rounded-full bg-blue-50 px-2 py-1 text-xs text-blue-600 dark:bg-blue-900/20 dark:text-blue-400\">\n                                                                Novo\n                                                            </span>\n                                                        )}\n                                                    </div>\n                                                    <p className=\"text-muted-foreground mt-1 text-sm\">{action.description}</p>\n                                                </div>\n                                                {hasActionLink && (\n                                                    <ChevronRight\n                                                        className=\"text-muted-foreground group-hover:text-foreground mt-1 transition-colors\"\n                                                        size={16}\n                                                    />\n                                                )}\n                                            </button>\n                                        );\n                                    })}\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/AreaFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 15,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 15,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                584,
                                587
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                584,
                                587
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreatePlantSheet from '@/components/CreatePlantSheet';\nimport ItemSelect from '@/components/ItemSelect';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { type Area, type Plant } from '@/types/asset-hierarchy';\nimport { router, useForm } from '@inertiajs/react';\nimport { Pencil } from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\n// Define a local form type with index signature\ninterface AreaFormData {\n    name: string;\n    plant_id: string;\n    [key: string]: any;\n}\n\ninterface AreaFormComponentProps {\n    area?: Area & {\n        plant: Plant;\n    };\n    plants?: Plant[];\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\nexport default function AreaFormComponent({ area, plants = [], initialMode = 'view', onCancel, onSuccess }: AreaFormComponentProps) {\n    const isEditing = !!area;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n    const [plantSheetOpen, setPlantSheetOpen] = useState(false);\n    const plantSelectRef = useRef<HTMLButtonElement | null>(null);\n\n    // Ensure mode updates when initialMode changes\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, put, processing, errors, clearErrors, reset } = useForm<AreaFormData>({\n        name: area?.name || '',\n        plant_id: area?.plant?.id?.toString() || '',\n    });\n\n    const handleSave = () => {\n        if (isEditing) {\n            put(route('asset-hierarchy.areas.update', { area: area.id }), {\n                onSuccess: () => {\n                    toast.success(`A área ${data.name} foi atualizada com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar área', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    const handleCreatePlantClick = () => {\n        setPlantSheetOpen(true);\n    };\n\n    const handlePlantCreated = () => {\n        setPlantSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && updatedPlants.length > 0) {\n                    // Find the newest plant (usually the last one)\n                    const newestPlant = updatedPlants[updatedPlants.length - 1];\n                    setData('plant_id', newestPlant.id.toString());\n\n                    // Focus and highlight the plant select field\n                    setTimeout(() => {\n                        const selectButton = plantSelectRef.current;\n                        if (selectButton) {\n                            selectButton.focus();\n                            // Add a temporary highlight effect with smooth transition\n                            selectButton.classList.add('ring-2', 'ring-primary', 'ring-offset-2', 'transition-all', 'duration-300');\n                            setTimeout(() => {\n                                selectButton.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');\n                                // Remove transition classes after animation completes\n                                setTimeout(() => {\n                                    selectButton.classList.remove('transition-all', 'duration-300');\n                                }, 300);\n                            }, 2000);\n                        }\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Form Fields */}\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                {/* Nome */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"name\"\n                    label=\"Nome\"\n                    placeholder={isViewMode ? 'Nome não informado' : 'Digite o nome da área'}\n                    required={!isViewMode}\n                    view={isViewMode}\n                />\n\n                {/* Planta */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={plantSelectRef}\n                        label=\"Planta\"\n                        items={plants}\n                        value={data.plant_id}\n                        onValueChange={(value) => {\n                            setData('plant_id', value);\n                            clearErrors('plant_id');\n                        }}\n                        onCreateClick={handleCreatePlantClick}\n                        placeholder={isViewMode && !data.plant_id ? 'Planta não selecionada' : 'Selecione uma planta'}\n                        error={errors.plant_id}\n                        disabled={isViewMode}\n                        view={isViewMode}\n                        required={!isViewMode}\n                    />\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            {isEditing && (\n                <div className=\"flex justify-end gap-2\">\n                    {isViewMode ? (\n                        <Button onClick={handleEdit} variant=\"default\">\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Editar\n                        </Button>\n                    ) : (\n                        <>\n                            <Button onClick={handleCancel} variant=\"outline\" disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={handleSave} disabled={processing}>\n                                {processing ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            )}\n\n            {/* CreatePlantSheet for creating new plants */}\n            <CreatePlantSheet open={plantSheetOpen} onOpenChange={setPlantSheetOpen} onSuccess={handlePlantCreated} />\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/AssetFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 43,
                "column": 35,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 43,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1603,
                                1606
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1603,
                                1606
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 629,
                "column": 62,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 629,
                "endColumn": 65,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                26122,
                                26125
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                26122,
                                26125
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateAreaSheet from '@/components/CreateAreaSheet';\nimport CreateAssetTypeSheet from '@/components/CreateAssetTypeSheet';\nimport CreateManufacturerSheet from '@/components/CreateManufacturerSheet';\nimport CreatePlantSheet from '@/components/CreatePlantSheet';\nimport CreateSectorSheet from '@/components/CreateSectorSheet';\nimport DeleteAsset from '@/components/delete-asset';\nimport InputError from '@/components/input-error';\nimport ItemSelect from '@/components/ItemSelect';\nimport PhotoUploader from '@/components/PhotoUploader';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { type Area, type Asset, type AssetForm, type AssetType, type Plant, type Sector } from '@/types/asset-hierarchy';\nimport { router, useForm } from '@inertiajs/react';\nimport { Camera, Pencil } from 'lucide-react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\ninterface Manufacturer {\n    id: number;\n    name: string;\n}\n\ninterface AssetFormComponentProps {\n    plants: Plant[];\n    assetTypes: AssetType[];\n    manufacturers: Manufacturer[];\n    asset?: Asset & {\n        asset_type: AssetType;\n        manufacturer?: Manufacturer;\n        plant: Plant;\n        area?: Area & { plant: Plant };\n        sector?: Sector;\n    };\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\ninterface AssetFormFieldsProps {\n    data: AssetForm;\n    setData: (key: string, value: any) => void;\n    errors: Partial<Record<string, string>>;\n    clearErrors: (...fields: string[]) => void;\n    plants: Plant[];\n    assetTypes: AssetType[];\n    manufacturers: Manufacturer[];\n    availableAreas: Area[];\n    availableSectors: Sector[];\n    isEditing: boolean;\n    isViewMode: boolean;\n    // Refs\n    tagInputRef?: React.RefObject<HTMLInputElement | null>;\n    assetTypeSelectRef: React.RefObject<HTMLButtonElement | null>;\n    plantSelectRef: React.RefObject<HTMLButtonElement | null>;\n    areaSelectRef: React.RefObject<HTMLButtonElement | null>;\n    sectorSelectRef: React.RefObject<HTMLButtonElement | null>;\n    manufacturerSelectRef: React.RefObject<HTMLButtonElement | null>;\n    // Handlers\n    handleCreateAssetTypeClick: () => void;\n    handleCreatePlantClick: () => void;\n    handleCreateAreaClick: () => void;\n    handleCreateSectorClick: () => void;\n    handleCreateManufacturerClick: () => void;\n}\n\nfunction AssetFormFields({\n    data,\n    setData,\n    errors,\n    clearErrors,\n    plants,\n    assetTypes,\n    manufacturers,\n    availableAreas,\n    availableSectors,\n    isEditing,\n    isViewMode,\n    tagInputRef,\n    assetTypeSelectRef,\n    plantSelectRef,\n    areaSelectRef,\n    sectorSelectRef,\n    manufacturerSelectRef,\n    handleCreateAssetTypeClick,\n    handleCreatePlantClick,\n    handleCreateAreaClick,\n    handleCreateSectorClick,\n    handleCreateManufacturerClick,\n}: AssetFormFieldsProps) {\n    return (\n        <>\n            {/* Foto e Campos Principais */}\n            <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-3\">\n                {/* Coluna 1: Foto - Spans 2 rows */}\n                <div className=\"flex lg:row-span-2\">\n                    {isViewMode ? (\n                        <div className=\"flex h-full w-full flex-col\">\n                            <Label className=\"mb-2\">Foto do Ativo</Label>\n                            <div className=\"flex flex-1 flex-col gap-2\">\n                                <div\n                                    className={`bg-muted relative min-h-[200px] flex-1 overflow-hidden rounded-lg border ${!data.photo_path ? 'bg-muted' : ''}`}\n                                >\n                                    {data.photo_path ? (\n                                        <img\n                                            src={`/storage/${data.photo_path}`}\n                                            alt={`Foto do ativo ${data.tag}`}\n                                            className=\"h-full w-full object-contain\"\n                                        />\n                                    ) : (\n                                        <div className=\"text-muted-foreground absolute inset-0 flex flex-col items-center justify-center gap-2\">\n                                            <Camera className=\"h-12 w-12\" />\n                                            <span className=\"text-sm\">Sem foto</span>\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"w-full\">\n                            <PhotoUploader\n                                label=\"Foto do Ativo\"\n                                value={data.photo}\n                                onChange={(file) => setData('photo', file)}\n                                error={errors.photo}\n                                initialPreview={isEditing && data.photo_path ? `/storage/${data.photo_path}` : null}\n                                minHeight=\"min-h-[200px]\"\n                                maxHeight=\"max-h-auto\"\n                            />\n                        </div>\n                    )}\n                </div>\n\n                {/* Coluna 2: Informações Básicas */}\n                <div className=\"space-y-6\">\n                    {/* TAG */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors,\n                        }}\n                        name=\"tag\"\n                        label=\"TAG\"\n                        placeholder=\"Digite a TAG do ativo\"\n                        required={!isViewMode}\n                        view={isViewMode}\n                        ref={tagInputRef}\n                    />\n\n                    {/* Part Number */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors,\n                        }}\n                        name=\"part_number\"\n                        label=\"Part Number\"\n                        placeholder={isViewMode ? 'Part number não informado' : 'Informe o part number do ativo'}\n                        view={isViewMode}\n                    />\n\n                    {/* Fabricante */}\n                    <div className=\"grid gap-2\">\n                        <ItemSelect\n                            ref={manufacturerSelectRef}\n                            label=\"Fabricante\"\n                            items={manufacturers}\n                            value={data.manufacturer_id?.toString() || ''}\n                            onValueChange={(value) => {\n                                setData('manufacturer_id', value);\n                                clearErrors('manufacturer_id');\n                            }}\n                            onCreateClick={handleCreateManufacturerClick}\n                            placeholder={isViewMode && !data.manufacturer_id ? 'Fabricante não selecionado' : 'Selecione um fabricante (opcional)'}\n                            error={errors.manufacturer_id}\n                            canClear={!isViewMode}\n                            view={isViewMode}\n                        />\n                    </div>\n                </div>\n\n                {/* Coluna 3: Informações Adicionais */}\n                <div className=\"space-y-6\">\n                    {/* Tipo de Ativo */}\n                    <div className=\"grid gap-2\">\n                        <ItemSelect\n                            ref={assetTypeSelectRef}\n                            label=\"Tipo de Ativo\"\n                            items={assetTypes}\n                            value={data.asset_type_id?.toString() || ''}\n                            onValueChange={(value) => {\n                                setData('asset_type_id', value);\n                                clearErrors('asset_type_id');\n                            }}\n                            onCreateClick={handleCreateAssetTypeClick}\n                            placeholder={\n                                isViewMode && !data.asset_type_id ? 'Tipo de ativo não selecionado' : 'Selecione um tipo de ativo (opcional)'\n                            }\n                            error={errors.asset_type_id}\n                            canClear={!isViewMode}\n                            view={isViewMode}\n                        />\n                    </div>\n\n                    {/* Número Serial */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors,\n                        }}\n                        name=\"serial_number\"\n                        label=\"Número Serial\"\n                        placeholder={isViewMode ? 'Número serial não informado' : 'Informe o número serial do ativo'}\n                        view={isViewMode}\n                    />\n\n                    {/* Ano de Fabricação */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors,\n                        }}\n                        name=\"manufacturing_year\"\n                        label=\"Ano de Fabricação\"\n                        placeholder={isViewMode ? 'Ano de fabricação não informado' : 'Informe o ano de fabricação do ativo'}\n                        view={isViewMode}\n                    />\n                </div>\n\n                {/* Descrição - Ocupa colunas 2 e 3 */}\n                <div className=\"lg:col-span-2 lg:col-start-2\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"description\">Descrição</Label>\n                        {isViewMode && !data.description ? (\n                            <div className=\"border-input bg-muted/20 text-muted-foreground flex min-h-[60px] w-full rounded-md border px-3 py-2 text-sm\">\n                                Sem descrição\n                            </div>\n                        ) : (\n                            <Textarea\n                                id=\"description\"\n                                value={data.description}\n                                onChange={(e) => setData('description', e.target.value)}\n                                placeholder=\"Descrição da máquina\"\n                                className=\"min-h-[60px]\"\n                                view={isViewMode}\n                            />\n                        )}\n                        <InputError message={errors.description} />\n                    </div>\n                </div>\n            </div>\n\n            {/* Localização - Grid com 3 colunas em toda largura */}\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n                {/* Planta */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={plantSelectRef}\n                        label=\"Planta\"\n                        items={plants}\n                        value={data.plant_id?.toString() || ''}\n                        onValueChange={(value) => {\n                            setData('plant_id', value);\n                            if (!value) {\n                                // Se limpar a planta, limpar também área e setor\n                                setData('area_id', '');\n                                setData('sector_id', '');\n                            } else {\n                                // Se mudar a planta, limpar área e setor\n                                setData('area_id', '');\n                                setData('sector_id', '');\n                            }\n                            clearErrors('plant_id');\n                        }}\n                        onCreateClick={handleCreatePlantClick}\n                        placeholder={isViewMode && !data.plant_id ? 'Planta não selecionada' : 'Selecione uma planta (opcional)'}\n                        error={errors.plant_id}\n                        canClear={!isViewMode}\n                        view={isViewMode}\n                    />\n                </div>\n\n                {/* Área */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={areaSelectRef}\n                        label=\"Área\"\n                        items={availableAreas}\n                        value={data.area_id?.toString() || ''}\n                        onValueChange={(value) => {\n                            setData('area_id', value);\n                            if (!value) {\n                                // Se limpar a área, limpar também o setor\n                                setData('sector_id', '');\n                            } else {\n                                // Se mudar a área, limpar o setor\n                                setData('sector_id', '');\n                            }\n                            clearErrors('area_id');\n                        }}\n                        onCreateClick={handleCreateAreaClick}\n                        placeholder={\n                            isViewMode && !data.area_id\n                                ? 'Área não selecionada'\n                                : data.plant_id\n                                  ? 'Selecione uma área (opcional)'\n                                  : 'Selecione uma planta primeiro'\n                        }\n                        error={errors.area_id}\n                        disabled={!data.plant_id}\n                        view={isViewMode}\n                        canClear={!isViewMode}\n                    />\n                </div>\n\n                {/* Setor */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={sectorSelectRef}\n                        label=\"Setor\"\n                        items={availableSectors}\n                        value={data.sector_id?.toString() || ''}\n                        onValueChange={(value) => {\n                            setData('sector_id', value);\n                            clearErrors('sector_id');\n                        }}\n                        onCreateClick={handleCreateSectorClick}\n                        placeholder={\n                            isViewMode && !data.sector_id\n                                ? 'Setor não selecionado'\n                                : data.area_id\n                                  ? 'Selecione um setor (opcional)'\n                                  : 'Selecione uma área primeiro'\n                        }\n                        error={errors.sector_id}\n                        disabled={!data.area_id}\n                        view={isViewMode}\n                        canClear={!isViewMode}\n                    />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default function AssetFormComponent({\n    assetTypes,\n    plants,\n    manufacturers,\n    asset,\n    initialMode = 'view',\n    onCancel,\n    onSuccess,\n}: AssetFormComponentProps) {\n    const isEditing = !!asset;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n\n    // Ensure mode updates when initialMode changes (e.g., after asset creation)\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, post, put, processing, errors, clearErrors, reset } = useForm<AssetForm>({\n        tag: asset?.tag || '',\n        serial_number: asset?.serial_number || '',\n        part_number: asset?.part_number || '',\n        asset_type_id: asset?.asset_type_id?.toString() || '',\n        description: asset?.description || '',\n        manufacturer: typeof asset?.manufacturer === 'string' ? asset.manufacturer : '',\n        manufacturer_id: asset?.manufacturer_id?.toString() || (typeof asset?.manufacturer === 'object' && asset?.manufacturer?.id?.toString()) || '',\n        manufacturing_year: asset?.manufacturing_year?.toString() || '',\n        plant_id: asset?.plant?.id?.toString() || '',\n        area_id: asset?.area_id?.toString() || '',\n        sector_id: asset?.sector_id?.toString() || '',\n        photo: null as File | null,\n        photo_path: asset?.photo_path || undefined,\n    });\n\n    const availableAreas = useMemo(() => {\n        if (!data.plant_id) return [];\n        const selectedPlant = plants.find((p) => p.id.toString() === data.plant_id);\n        return selectedPlant?.areas || [];\n    }, [data.plant_id, plants]);\n\n    const availableSectors = useMemo(() => {\n        if (!data.area_id) return [];\n        const selectedArea = availableAreas.find((a: Area) => a.id.toString() === data.area_id);\n        return selectedArea?.sectors || [];\n    }, [data.area_id, availableAreas]);\n\n    const handleSave = () => {\n        if (isEditing) {\n            // Lógica para edição\n            const formData = new FormData();\n            Object.keys(data).forEach((key) => {\n                if (key === 'photo') {\n                    if (data[key]) {\n                        formData.append(key, data[key] as File);\n                    }\n                } else {\n                    formData.append(key, data[key] as string);\n                }\n            });\n\n            put(route('asset-hierarchy.assets.update', { asset: asset.id }), {\n                onSuccess: () => {\n                    toast.success(`O ativo ${data.tag} foi atualizado com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar ativo', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        } else {\n            // Lógica para criação\n            post(route('asset-hierarchy.assets.store'), {\n                onSuccess: () => {\n                    toast.success('Ativo criado com sucesso!');\n                    // The backend will handle the redirect to the asset show page\n                    // No need to call onSuccess as the page will be redirected\n                },\n                onError: () => {\n                    toast.error('Erro ao criar ativo', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    // Handler functions for creating new entities\n    const handlePlantCreated = () => {\n        setPlantSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && updatedPlants.length > 0) {\n                    const newestPlant = updatedPlants[updatedPlants.length - 1];\n                    setData('plant_id', newestPlant.id.toString());\n                    setData('area_id', '');\n                    setData('sector_id', '');\n                    setTimeout(() => {\n                        plantSelectRef.current?.focus();\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    const handleAreaCreated = () => {\n        setAreaSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && data.plant_id) {\n                    const currentPlant = updatedPlants.find((p) => p.id.toString() === data.plant_id);\n                    if (currentPlant?.areas && currentPlant.areas.length > 0) {\n                        const newestArea = currentPlant.areas[currentPlant.areas.length - 1];\n                        setData('area_id', newestArea.id.toString());\n                        setData('sector_id', '');\n                        setTimeout(() => {\n                            areaSelectRef.current?.focus();\n                        }, 100);\n                    }\n                }\n            },\n        });\n    };\n\n    const handleSectorCreated = () => {\n        setSectorSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && data.plant_id && data.area_id) {\n                    const currentPlant = updatedPlants.find((p) => p.id.toString() === data.plant_id);\n                    const currentArea = currentPlant?.areas?.find((a: Area) => a.id.toString() === data.area_id);\n                    if (currentArea?.sectors && currentArea.sectors.length > 0) {\n                        const newestSector = currentArea.sectors[currentArea.sectors.length - 1];\n                        setData('sector_id', newestSector.id.toString());\n                        setTimeout(() => {\n                            sectorSelectRef.current?.focus();\n                        }, 100);\n                    }\n                }\n            },\n        });\n    };\n\n    const handleAssetTypeCreated = () => {\n        setAssetTypeSheetOpen(false);\n        router.reload({\n            only: ['assetTypes'],\n            onSuccess: (page) => {\n                const updatedAssetTypes = page.props.assetTypes as AssetType[];\n                if (updatedAssetTypes && updatedAssetTypes.length > 0) {\n                    const newestAssetType = updatedAssetTypes[updatedAssetTypes.length - 1];\n                    setData('asset_type_id', newestAssetType.id.toString());\n                    setTimeout(() => {\n                        assetTypeSelectRef.current?.focus();\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    // Refs\n    const plantSelectRef = useRef<HTMLButtonElement>(null);\n    const assetTypeSelectRef = useRef<HTMLButtonElement>(null);\n    const areaSelectRef = useRef<HTMLButtonElement>(null);\n    const sectorSelectRef = useRef<HTMLButtonElement>(null);\n    const manufacturerSelectRef = useRef<HTMLButtonElement>(null);\n    const tagInputRef = useRef<HTMLInputElement>(null);\n\n    // State for sheet visibility\n    const [plantSheetOpen, setPlantSheetOpen] = useState(false);\n    const [areaSheetOpen, setAreaSheetOpen] = useState(false);\n    const [sectorSheetOpen, setSectorSheetOpen] = useState(false);\n    const [assetTypeSheetOpen, setAssetTypeSheetOpen] = useState(false);\n    const [manufacturerSheetOpen, setManufacturerSheetOpen] = useState(false);\n\n    // Focus TAG input when creating a new asset\n    useEffect(() => {\n        if (!isEditing && tagInputRef.current) {\n            tagInputRef.current.focus();\n        }\n    }, [isEditing]);\n\n    const handleCreatePlantClick = () => {\n        // Blur the current active element to release focus\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n        setPlantSheetOpen(true);\n    };\n\n    const handleCreateAreaClick = () => {\n        setAreaSheetOpen(true);\n    };\n\n    const handleCreateSectorClick = () => {\n        setSectorSheetOpen(true);\n    };\n\n    const handleCreateAssetTypeClick = () => {\n        setAssetTypeSheetOpen(true);\n    };\n\n    const handleCreateManufacturerClick = () => {\n        setManufacturerSheetOpen(true);\n    };\n\n    const handleManufacturerCreated = () => {\n        setManufacturerSheetOpen(false);\n        router.reload({\n            only: ['manufacturers'],\n            onSuccess: (page) => {\n                const updatedManufacturers = page.props.manufacturers as Manufacturer[];\n                if (updatedManufacturers && updatedManufacturers.length > 0) {\n                    const newestManufacturer = updatedManufacturers[updatedManufacturers.length - 1];\n                    setData('manufacturer_id', newestManufacturer.id.toString());\n\n                    // Focus and highlight the manufacturer select field\n                    setTimeout(() => {\n                        const selectButton = manufacturerSelectRef.current;\n                        if (selectButton) {\n                            selectButton.focus();\n                            // Add a temporary highlight effect with smooth transition\n                            selectButton.classList.add('ring-2', 'ring-primary', 'ring-offset-2', 'transition-all', 'duration-300');\n                            setTimeout(() => {\n                                selectButton.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');\n                                // Remove transition classes after animation completes\n                                setTimeout(() => {\n                                    selectButton.classList.remove('transition-all', 'duration-300');\n                                }, 300);\n                            }, 2000);\n                        }\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    return (\n        <>\n            <form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    handleSave();\n                }}\n                className=\"space-y-6\"\n            >\n                <AssetFormFields\n                    data={data}\n                    setData={setData as (key: string, value: any) => void}\n                    errors={errors as Partial<Record<string, string>>}\n                    clearErrors={clearErrors as (...fields: string[]) => void}\n                    plants={plants}\n                    assetTypes={assetTypes}\n                    manufacturers={manufacturers}\n                    availableAreas={availableAreas}\n                    availableSectors={availableSectors}\n                    isEditing={isEditing}\n                    isViewMode={isViewMode}\n                    tagInputRef={tagInputRef}\n                    assetTypeSelectRef={assetTypeSelectRef}\n                    plantSelectRef={plantSelectRef}\n                    areaSelectRef={areaSelectRef}\n                    sectorSelectRef={sectorSelectRef}\n                    manufacturerSelectRef={manufacturerSelectRef}\n                    handleCreateAssetTypeClick={handleCreateAssetTypeClick}\n                    handleCreatePlantClick={handleCreatePlantClick}\n                    handleCreateAreaClick={handleCreateAreaClick}\n                    handleCreateSectorClick={handleCreateSectorClick}\n                    handleCreateManufacturerClick={handleCreateManufacturerClick}\n                />\n\n                {/* Action buttons */}\n                {isEditing && (\n                    <div className=\"flex flex-col gap-2 pt-4 sm:flex-row sm:items-center sm:justify-between\">\n                        {/* Delete button on the left when in edit mode */}\n                        {!isViewMode && (\n                            <div className=\"w-full sm:w-auto\">\n                                <DeleteAsset assetId={asset.id} assetTag={asset.tag} />\n                            </div>\n                        )}\n\n                        {/* Edit/Save/Cancel buttons on the right */}\n                        <div className=\"flex flex-col gap-2 sm:ml-auto sm:flex-row\">\n                            {isViewMode ? (\n                                <Button\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"w-full sm:w-auto\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        e.stopPropagation();\n                                        handleEdit();\n                                    }}\n                                >\n                                    <Pencil className=\"mr-2 h-4 w-4\" />\n                                    Editar\n                                </Button>\n                            ) : (\n                                <>\n                                    <Button type=\"button\" variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\" onClick={handleCancel}>\n                                        Cancelar\n                                    </Button>\n                                    <Button type=\"submit\" size=\"sm\" className=\"w-full sm:w-auto\" disabled={processing}>\n                                        {processing ? 'Salvando...' : 'Salvar'}\n                                    </Button>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                )}\n\n                {/* Action buttons for create mode */}\n                {!isEditing && (\n                    <div className=\"flex flex-col gap-2 pt-4 sm:flex-row sm:justify-start\">\n                        <Button type=\"submit\" className=\"w-full sm:w-auto\" disabled={processing}>\n                            {processing ? 'Criando...' : 'Criar Ativo'}\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" className=\"w-full sm:w-auto\" onClick={handleCancel}>\n                            Cancelar\n                        </Button>\n                    </div>\n                )}\n            </form>\n\n            {/* Hidden Sheets for creating new entities */}\n            <CreatePlantSheet open={plantSheetOpen} onOpenChange={setPlantSheetOpen} onSuccess={handlePlantCreated} />\n\n            <CreateAreaSheet\n                open={areaSheetOpen}\n                onOpenChange={setAreaSheetOpen}\n                plants={plants}\n                selectedPlantId={data.plant_id?.toString()}\n                disableParentFields={true}\n                onSuccess={handleAreaCreated}\n            />\n\n            <CreateSectorSheet\n                open={sectorSheetOpen}\n                onOpenChange={setSectorSheetOpen}\n                mode=\"create\"\n                plants={plants}\n                selectedPlantId={data.plant_id?.toString()}\n                selectedAreaId={data.area_id?.toString()}\n                disableParentFields={true}\n                onSuccess={handleSectorCreated}\n            />\n\n            <CreateAssetTypeSheet open={assetTypeSheetOpen} onOpenChange={setAssetTypeSheetOpen} mode=\"create\" onSuccess={handleAssetTypeCreated} />\n\n            <CreateManufacturerSheet\n                open={manufacturerSheetOpen}\n                onOpenChange={setManufacturerSheetOpen}\n                mode=\"create\"\n                onSuccess={handleManufacturerCreated}\n            />\n        </>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/AssetRuntimeInput.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 31,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 34,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                530,
                                533
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                530,
                                533
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ReportRuntimeSheet from '@/components/ReportRuntimeSheet';\nimport { Button } from '@/components/ui/button';\nimport { Activity, Clock } from 'lucide-react';\nimport { useRef } from 'react';\n\ninterface RuntimeData {\n    current_hours: number;\n    last_measurement?: {\n        hours: number;\n        datetime: string;\n        user_name?: string;\n        source?: string;\n    };\n    user_timezone?: string;\n}\n\ninterface AssetRuntimeInputProps {\n    assetId?: number;\n    runtimeData?: RuntimeData;\n    onRuntimeUpdated?: (data: any) => void;\n}\n\nexport default function AssetRuntimeInput({ assetId, runtimeData, onRuntimeUpdated }: AssetRuntimeInputProps) {\n    const reportSheetRef = useRef<HTMLButtonElement>(null);\n\n    const formatLastMeasurement = (datetime: string, userTimezone?: string) => {\n        try {\n            const date = new Date(datetime);\n            const options: Intl.DateTimeFormatOptions = {\n                day: '2-digit',\n                month: 'short',\n                year: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit',\n                timeZone: userTimezone || 'UTC',\n            };\n            return date.toLocaleDateString('pt-BR', options);\n        } catch {\n            return datetime;\n        }\n    };\n\n    const handleReportClick = () => {\n        reportSheetRef.current?.click();\n    };\n\n    const currentHours = runtimeData?.current_hours || 0;\n    const lastMeasurement = runtimeData?.last_measurement;\n    const userTimezone = runtimeData?.user_timezone;\n\n    return (\n        <div className=\"h-full space-y-4\">\n            <div className=\"flex h-full flex-col rounded-lg border border-gray-200 p-6\">\n                {/* Header with title and report button */}\n                <div className=\"mb-4 flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">Runtime do Ativo</h3>\n                    <Button onClick={handleReportClick} size=\"sm\" variant=\"action\">\n                        <Clock className=\"mr-2 h-4 w-4\" />\n                        Reportar Horimetro\n                    </Button>\n                </div>\n\n                {/* Current Runtime - More compact */}\n                <div className=\"mb-4\">\n                    <div className=\"mb-1 flex items-center gap-2\">\n                        <Activity className=\"h-4 w-4 text-gray-500\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Horímetro Calculado</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-gray-900\">{currentHours.toFixed(1)} horas</p>\n                </div>\n\n                {/* Last Measurement - More compact */}\n                {lastMeasurement ? (\n                    <div className=\"\">\n                        <div className=\"mb-1 flex items-center gap-2\">\n                            <span className=\"text-sm leading-none font-medium\">Última Medição</span>\n                        </div>\n                        <div className=\"mt-2 flex items-center gap-1 text-sm\">\n                            <span>{lastMeasurement.hours.toFixed(1)}h</span>\n                            <span>em {formatLastMeasurement(lastMeasurement.datetime, userTimezone)}</span>\n                            <span>{lastMeasurement.user_name ? `por ${lastMeasurement.user_name}` : ''}</span>\n                        </div>\n                        {lastMeasurement.source === 'shift_change' && (\n                            <p className=\"mt-1 text-xs text-gray-500\">Registrado automaticamente devido à mudança de turno</p>\n                        )}\n                        {lastMeasurement.source === 'shift_update' && (\n                            <p className=\"mt-1 text-xs text-gray-500\">Registrado automaticamente devido à atualização do turno</p>\n                        )}\n                    </div>\n                ) : (\n                    <div className=\"rounded-md bg-gray-50 p-3\">\n                        <p className=\"text-center text-xs text-gray-500\">Nenhuma medição registrada</p>\n                    </div>\n                )}\n\n                {/* Hidden ReportRuntimeSheet for programmatic triggering */}\n                <div style={{ display: 'none' }}>\n                    <ReportRuntimeSheet\n                        ref={reportSheetRef}\n                        assetId={assetId}\n                        currentRuntime={currentHours}\n                        showTrigger\n                        onSuccess={onRuntimeUpdated}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/AssetTypeFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 15,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 15,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                565,
                                568
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                565,
                                568
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { type AssetType } from '@/types/asset-hierarchy';\nimport { router, useForm } from '@inertiajs/react';\nimport { Pencil } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\n// Define a local form type with index signature\ninterface AssetTypeFormData {\n    name: string;\n    description: string;\n    [key: string]: any;\n}\n\ninterface AssetTypeFormComponentProps {\n    assetType?: AssetType;\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\nexport default function AssetTypeFormComponent({ assetType, initialMode = 'view', onCancel, onSuccess }: AssetTypeFormComponentProps) {\n    const isEditing = !!assetType;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n\n    // Ensure mode updates when initialMode changes\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, put, processing, errors, clearErrors, reset } = useForm<AssetTypeFormData>({\n        name: assetType?.name || '',\n        description: assetType?.description || '',\n    });\n\n    const handleSave = () => {\n        if (isEditing) {\n            put(route('asset-hierarchy.tipos-ativo.update', { tipos_ativo: assetType.id }), {\n                onSuccess: () => {\n                    toast.success(`O tipo de ativo ${data.name} foi atualizado com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar tipo de ativo', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Form Fields */}\n            <div className=\"grid grid-cols-1 gap-6\">\n                {/* Nome */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"name\"\n                    label=\"Nome\"\n                    placeholder={isViewMode ? 'Nome não informado' : 'Digite o nome do tipo de ativo'}\n                    required={!isViewMode}\n                    view={isViewMode}\n                />\n\n                {/* Descrição */}\n                <div className=\"grid gap-2\">\n                    <Label htmlFor=\"description\">Descrição</Label>\n                    {isViewMode && !data.description ? (\n                        <div className=\"border-input bg-muted/20 text-muted-foreground flex min-h-[60px] w-full rounded-md border px-3 py-2 text-sm\">\n                            Sem descrição\n                        </div>\n                    ) : (\n                        <Textarea\n                            id=\"description\"\n                            value={data.description}\n                            onChange={(e) => setData('description', e.target.value)}\n                            placeholder=\"Descrição do tipo de ativo\"\n                            className=\"min-h-[60px]\"\n                            view={isViewMode}\n                        />\n                    )}\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            {isEditing && (\n                <div className=\"flex justify-end gap-2\">\n                    {isViewMode ? (\n                        <Button onClick={handleEdit} variant=\"default\">\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Editar\n                        </Button>\n                    ) : (\n                        <>\n                            <Button onClick={handleCancel} variant=\"outline\" disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={handleSave} disabled={processing}>\n                                {processing ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/BaseEntitySheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 72,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 75,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                371,
                                374
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                371,
                                374
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 10,
                "column": 14,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 10,
                "endColumn": 17,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                425,
                                428
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                425,
                                428
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 41,
                "column": 61,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 41,
                "endColumn": 64,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1361,
                                1364
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1361,
                                1364
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 47,
                "column": 66,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 47,
                "endColumn": 69,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1557,
                                1560
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1557,
                                1560
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'formConfig.initialData', 'reset', and 'setData'. Either include them or remove the dependency array.",
                "line": 87,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 87,
                "endColumn": 34,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [entity, formConfig.initialData, isEditMode, mode, reset, setData]",
                        "fix": {
                            "range": [
                                3063,
                                3089
                            ],
                            "text": "[entity, formConfig.initialData, isEditMode, mode, reset, setData]"
                        }
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'data' and 'setData'. Either include them or remove the dependency array.",
                "line": 103,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 103,
                "endColumn": 55,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [formConfig.initialData, sheetOpen, isEditMode, data, setData]",
                        "fix": {
                            "range": [
                                3743,
                                3790
                            ],
                            "text": "[formConfig.initialData, sheetOpen, isEditMode, data, setData]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 4,
        "fatalErrorCount": 0,
        "warningCount": 2,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { useForm } from '@inertiajs/react';\nimport React, { useEffect } from 'react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\n\nexport interface BaseEntitySheetProps<TFormData extends Record<string, any>> {\n    // Entity data for edit mode\n    entity?: any;\n    // Sheet state\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    // Mode\n    mode?: 'create' | 'edit';\n    // Callbacks\n    onSuccess?: () => void;\n    // Trigger props (for controlled trigger)\n    triggerText?: string;\n    triggerVariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    showTrigger?: boolean;\n    triggerRef?: React.RefObject<HTMLButtonElement | null>;\n    // Form configuration\n    formConfig: {\n        initialData: TFormData;\n        createRoute: string;\n        updateRoute?: string;\n        entityName: string;\n        sheetTitle?: {\n            create?: string;\n            edit?: string;\n        };\n        sheetDescription?: {\n            create?: string;\n            edit?: string;\n        };\n    };\n    // Children render prop for form fields\n    children: (props: {\n        data: TFormData;\n        setData: (key: keyof TFormData | TFormData, value?: any) => void;\n        errors: Partial<Record<keyof TFormData, string>>;\n        processing: boolean;\n    }) => React.ReactNode;\n}\n\nexport function BaseEntitySheet<TFormData extends Record<string, any>>({\n    entity,\n    open: controlledOpen,\n    onOpenChange,\n    mode = 'create',\n    onSuccess,\n    triggerText,\n    triggerVariant = 'outline',\n    showTrigger = false,\n    triggerRef,\n    formConfig,\n    children,\n}: BaseEntitySheetProps<TFormData>) {\n    const isEditMode = mode === 'edit' && entity;\n\n    const { data, setData, post, put, processing, errors, reset } = useForm<TFormData>(formConfig.initialData);\n\n    const [internalSheetOpen, setInternalSheetOpen] = React.useState(false);\n\n    // Determine whether to use internal or external control\n    const sheetOpen = showTrigger ? internalSheetOpen : (controlledOpen ?? false);\n    const setSheetOpen = showTrigger ? setInternalSheetOpen : (onOpenChange ?? (() => {}));\n\n    // Update form data when entity changes (for edit mode)\n    useEffect(() => {\n        if (isEditMode && entity) {\n            // Allow parent to transform entity data to form data\n            const entityData = Object.keys(formConfig.initialData).reduce((acc, key) => {\n                acc[key as keyof TFormData] = entity[key] ?? formConfig.initialData[key as keyof TFormData];\n                return acc;\n            }, {} as TFormData);\n\n            // Reset form with entity data\n            Object.keys(entityData).forEach((key) => {\n                setData(key as keyof TFormData, entityData[key as keyof TFormData]);\n            });\n        } else if (!isEditMode) {\n            // Reset to initial data for create mode\n            reset();\n        }\n    }, [entity, isEditMode, mode]);\n\n    // Update form data when initialData changes in create mode\n    useEffect(() => {\n        if (!isEditMode && sheetOpen) {\n            // Update form data with new initialData values\n            Object.keys(formConfig.initialData).forEach((key) => {\n                const currentValue = data[key as keyof TFormData];\n                const newValue = formConfig.initialData[key as keyof TFormData];\n\n                // Only update if the value has changed and is not empty\n                if (newValue && newValue !== currentValue) {\n                    setData(key as keyof TFormData, newValue);\n                }\n            });\n        }\n    }, [formConfig.initialData, sheetOpen, isEditMode]);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        // Add stay parameter to data before submission\n        const submitData = { ...data, stay: true };\n\n        const successMessage = isEditMode ? `${formConfig.entityName} atualizado com sucesso!` : `${formConfig.entityName} criado com sucesso!`;\n\n        const errorMessage = isEditMode\n            ? `Erro ao atualizar ${formConfig.entityName.toLowerCase()}`\n            : `Erro ao criar ${formConfig.entityName.toLowerCase()}`;\n\n        if (isEditMode && formConfig.updateRoute) {\n            put(route(formConfig.updateRoute, entity.id), {\n                ...submitData,\n                onSuccess: () => {\n                    toast.success(successMessage);\n                    reset();\n                    setSheetOpen(false);\n                    onSuccess?.();\n                },\n                onError: () => {\n                    toast.error(errorMessage, {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n                preserveScroll: true,\n                preserveState: true,\n            });\n        } else {\n            post(route(formConfig.createRoute), {\n                ...submitData,\n                onSuccess: () => {\n                    toast.success(successMessage);\n                    reset();\n                    setSheetOpen(false);\n                    onSuccess?.();\n                },\n                onError: () => {\n                    toast.error(errorMessage, {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n                preserveScroll: true,\n                preserveState: true,\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        reset();\n        setSheetOpen(false);\n    };\n\n    const sheetTitle = isEditMode\n        ? formConfig.sheetTitle?.edit || `Editar ${formConfig.entityName}`\n        : formConfig.sheetTitle?.create || `Novo ${formConfig.entityName}`;\n\n    const sheetDescription = isEditMode\n        ? formConfig.sheetDescription?.edit || `Atualize as informações do ${formConfig.entityName.toLowerCase()}`\n        : formConfig.sheetDescription?.create || `Adicione um novo ${formConfig.entityName.toLowerCase()} ao sistema`;\n\n    return (\n        <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>\n            {showTrigger && (\n                <SheetTrigger asChild>\n                    <Button variant={triggerVariant} ref={triggerRef}>\n                        {triggerText || `Novo ${formConfig.entityName}`}\n                    </Button>\n                </SheetTrigger>\n            )}\n            <SheetContent\n                className=\"sm:max-w-lg\"\n                onOpenAutoFocus={(e) => {\n                    // Prevent default focus behavior to allow custom focus management\n                    e.preventDefault();\n                }}\n            >\n                <SheetHeader className=\"\">\n                    <SheetTitle>{sheetTitle}</SheetTitle>\n                    <SheetDescription>{sheetDescription}</SheetDescription>\n                </SheetHeader>\n\n                <form onSubmit={handleSubmit} className=\"m-4 space-y-6\">\n                    <div className=\"grid gap-6\">{children({ data, setData, errors, processing })}</div>\n\n                    <SheetFooter className=\"flex justify-end gap-2\">\n                        <Button type=\"submit\" disabled={processing}>\n                            {processing ? 'Salvando...' : 'Salvar'}\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={handleCancel} disabled={processing}>\n                            Cancelar\n                        </Button>\n                    </SheetFooter>\n                </form>\n            </SheetContent>\n        </Sheet>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateAreaSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 9,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 9,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                300,
                                303
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                300,
                                303
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import React, { useEffect, useRef } from 'react';\n\nimport { BaseEntitySheet } from '@/components/BaseEntitySheet';\nimport ItemSelect from '@/components/ItemSelect';\nimport TextInput from '@/components/TextInput';\nimport { Area } from '@/types/entities/area';\n\ninterface AreaForm {\n    [key: string]: any;\n    name: string;\n    plant_id: string;\n}\n\ninterface CreateAreaSheetProps {\n    area?: Area;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    mode?: 'create' | 'edit';\n    onSuccess?: () => void;\n    plants?: {\n        id: number;\n        name: string;\n    }[];\n    selectedPlantId?: string;\n    disableParentFields?: boolean;\n    // Props para SheetTrigger\n    triggerText?: string;\n    triggerVariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    showTrigger?: boolean;\n    triggerRef?: React.RefObject<HTMLButtonElement | null>;\n}\n\nconst CreateAreaSheet: React.FC<CreateAreaSheetProps> = ({\n    area,\n    open,\n    onOpenChange,\n    mode = 'create',\n    onSuccess,\n    plants = [],\n    selectedPlantId,\n    disableParentFields = false,\n    triggerText = 'Nova Área',\n    triggerVariant = 'outline',\n    showTrigger = false,\n    triggerRef,\n}) => {\n    const nameInputRef = useRef<HTMLInputElement>(null);\n\n    // Auto-focus the name input when sheet opens for creation\n    useEffect(() => {\n        if (open && mode === 'create') {\n            // Use requestAnimationFrame to ensure the DOM is ready\n            const focusInput = () => {\n                requestAnimationFrame(() => {\n                    if (nameInputRef.current) {\n                        nameInputRef.current.focus();\n                        nameInputRef.current.select();\n                    }\n                });\n            };\n\n            // Try multiple times with increasing delays to handle animation and focus traps\n            const timeouts = [100, 300, 500];\n            const timers = timeouts.map((delay) => setTimeout(focusInput, delay));\n\n            // Cleanup timeouts\n            return () => {\n                timers.forEach((timer) => clearTimeout(timer));\n            };\n        }\n    }, [open, mode]);\n\n    // Handle onOpenChange to focus when sheet opens\n    const handleOpenChange = (open: boolean) => {\n        if (onOpenChange) {\n            onOpenChange(open);\n        }\n\n        // Focus the input when opening in create mode\n        if (open && mode === 'create') {\n            setTimeout(() => {\n                nameInputRef.current?.focus();\n            }, 100);\n        }\n    };\n\n    return (\n        <BaseEntitySheet<AreaForm>\n            entity={area}\n            open={open}\n            onOpenChange={handleOpenChange}\n            mode={mode}\n            onSuccess={onSuccess}\n            triggerText={triggerText}\n            triggerVariant={triggerVariant}\n            showTrigger={showTrigger}\n            triggerRef={triggerRef}\n            formConfig={{\n                initialData: {\n                    name: '',\n                    plant_id: selectedPlantId || '',\n                },\n                createRoute: 'asset-hierarchy.areas.store',\n                updateRoute: 'asset-hierarchy.areas.update',\n                entityName: 'Área',\n            }}\n        >\n            {({ data, setData, errors }) => (\n                <>\n                    {/* Nome da Área - Campo Obrigatório */}\n                    <TextInput\n                        ref={nameInputRef}\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"name\"\n                        label=\"Nome da Área\"\n                        placeholder=\"Nome da área\"\n                        required\n                    />\n\n                    {/* Planta */}\n                    <div className=\"grid gap-2\">\n                        <ItemSelect\n                            label=\"Planta\"\n                            items={plants}\n                            value={data.plant_id?.toString() || ''}\n                            onValueChange={(value) => setData('plant_id', value)}\n                            placeholder=\"Selecione uma planta\"\n                            error={errors.plant_id}\n                            required={!disableParentFields}\n                            disabled={disableParentFields}\n                        />\n                        {disableParentFields && (\n                            <p className=\"text-muted-foreground text-sm\">A planta foi pré-selecionada e não pode ser alterada.</p>\n                        )}\n                    </div>\n                </>\n            )}\n        </BaseEntitySheet>\n    );\n};\n\nexport default CreateAreaSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateAssetTypeSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                266,
                                269
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                266,
                                269
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import React, { useEffect, useRef } from 'react';\n\nimport { BaseEntitySheet } from '@/components/BaseEntitySheet';\nimport TextInput from '@/components/TextInput';\nimport { AssetType } from '@/types/entities/asset-type';\n\ninterface AssetTypeForm {\n    [key: string]: any;\n    name: string;\n    description: string;\n}\n\ninterface CreateAssetTypeSheetProps {\n    assetType?: AssetType;\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    mode: 'create' | 'edit';\n    onSuccess?: () => void;\n}\n\nconst CreateAssetTypeSheet: React.FC<CreateAssetTypeSheetProps> = ({ assetType, open, onOpenChange, mode, onSuccess }) => {\n    const nameInputRef = useRef<HTMLInputElement>(null);\n\n    // Auto-focus the name input when sheet opens for creation\n    useEffect(() => {\n        if (open && mode === 'create') {\n            // Use requestAnimationFrame to ensure the DOM is ready\n            const focusInput = () => {\n                requestAnimationFrame(() => {\n                    if (nameInputRef.current) {\n                        nameInputRef.current.focus();\n                        nameInputRef.current.select();\n                    }\n                });\n            };\n\n            // Try multiple times with increasing delays to handle animation and focus traps\n            const timeouts = [100, 300, 500];\n            const timers = timeouts.map((delay) => setTimeout(focusInput, delay));\n\n            // Cleanup timeouts\n            return () => {\n                timers.forEach((timer) => clearTimeout(timer));\n            };\n        }\n    }, [open, mode]);\n\n    // Handle onOpenChange to focus when sheet opens\n    const handleOpenChange = (open: boolean) => {\n        if (onOpenChange) {\n            onOpenChange(open);\n        }\n\n        // Focus the input when opening in create mode\n        if (open && mode === 'create') {\n            setTimeout(() => {\n                nameInputRef.current?.focus();\n            }, 100);\n        }\n    };\n\n    return (\n        <BaseEntitySheet<AssetTypeForm>\n            entity={assetType}\n            open={open}\n            onOpenChange={handleOpenChange}\n            mode={mode}\n            onSuccess={onSuccess}\n            formConfig={{\n                initialData: {\n                    name: '',\n                    description: '',\n                },\n                createRoute: 'asset-hierarchy.tipos-ativo.store',\n                updateRoute: 'asset-hierarchy.tipos-ativo.update',\n                entityName: 'Tipo de Ativo',\n                sheetTitle: {\n                    create: 'Novo Tipo de Ativo',\n                    edit: 'Editar Tipo de Ativo',\n                },\n                sheetDescription: {\n                    create: 'Adicione um novo tipo de ativo ao sistema',\n                    edit: 'Edite os dados do tipo de ativo',\n                },\n            }}\n        >\n            {({ data, setData, errors }) => (\n                <>\n                    {/* Nome do Tipo - Campo Obrigatório */}\n                    <TextInput\n                        ref={nameInputRef}\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"name\"\n                        label=\"Nome\"\n                        placeholder=\"Nome do tipo de ativo\"\n                        required\n                    />\n\n                    {/* Descrição */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"description\"\n                        label=\"Descrição\"\n                        placeholder=\"Descrição do tipo de ativo\"\n                    />\n                </>\n            )}\n        </BaseEntitySheet>\n    );\n};\n\nexport default CreateAssetTypeSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateManufacturerSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 10,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 10,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                374,
                                377
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                374,
                                377
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import React, { useEffect, useRef } from 'react';\n\nimport { BaseEntitySheet } from '@/components/BaseEntitySheet';\nimport TextInput from '@/components/TextInput';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Manufacturer } from '@/types/entities/manufacturer';\n\ninterface ManufacturerForm {\n    [key: string]: any;\n    name: string;\n    website: string;\n    email: string;\n    phone: string;\n    country: string;\n    notes: string;\n}\n\ninterface CreateManufacturerSheetProps {\n    manufacturer?: Manufacturer;\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    mode: 'create' | 'edit';\n    onSuccess?: () => void;\n}\n\nconst CreateManufacturerSheet: React.FC<CreateManufacturerSheetProps> = ({ manufacturer, open, onOpenChange, mode, onSuccess }) => {\n    const nameInputRef = useRef<HTMLInputElement>(null);\n\n    // Auto-focus the name input when sheet opens for creation\n    useEffect(() => {\n        if (open && mode === 'create') {\n            // Use requestAnimationFrame to ensure the DOM is ready\n            const focusInput = () => {\n                requestAnimationFrame(() => {\n                    if (nameInputRef.current) {\n                        nameInputRef.current.focus();\n                        nameInputRef.current.select();\n                    }\n                });\n            };\n\n            // Try multiple times with increasing delays to handle animation and focus traps\n            const timeouts = [100, 300, 500];\n            const timers = timeouts.map((delay) => setTimeout(focusInput, delay));\n\n            // Cleanup timeouts\n            return () => {\n                timers.forEach((timer) => clearTimeout(timer));\n            };\n        }\n    }, [open, mode]);\n\n    // Handle onOpenChange to focus when sheet opens\n    const handleOpenChange = (open: boolean) => {\n        if (onOpenChange) {\n            onOpenChange(open);\n        }\n\n        // Focus the input when opening in create mode\n        if (open && mode === 'create') {\n            setTimeout(() => {\n                nameInputRef.current?.focus();\n            }, 100);\n        }\n    };\n\n    return (\n        <BaseEntitySheet<ManufacturerForm>\n            entity={manufacturer}\n            open={open}\n            onOpenChange={handleOpenChange}\n            mode={mode}\n            onSuccess={onSuccess}\n            formConfig={{\n                initialData: {\n                    name: '',\n                    website: '',\n                    email: '',\n                    phone: '',\n                    country: '',\n                    notes: '',\n                },\n                createRoute: 'asset-hierarchy.manufacturers.store',\n                updateRoute: 'asset-hierarchy.manufacturers.update',\n                entityName: 'Fabricante',\n            }}\n        >\n            {({ data, setData, errors }) => (\n                <>\n                    {/* Nome do Fabricante - Campo Obrigatório */}\n                    <TextInput\n                        ref={nameInputRef}\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"name\"\n                        label=\"Nome do Fabricante\"\n                        placeholder=\"Nome do fabricante\"\n                        required\n                    />\n\n                    {/* Website */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"website\"\n                        label=\"Website\"\n                        placeholder=\"https://www.exemplo.com\"\n                    />\n\n                    {/* Email e Telefone - Grid com 2 colunas */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                        <TextInput\n                            form={{\n                                data,\n                                setData,\n                                errors,\n                                clearErrors: () => {},\n                            }}\n                            name=\"email\"\n                            label=\"E-mail\"\n                            placeholder=\"contato@exemplo.com\"\n                        />\n                        <TextInput\n                            form={{\n                                data,\n                                setData,\n                                errors,\n                                clearErrors: () => {},\n                            }}\n                            name=\"phone\"\n                            label=\"Telefone\"\n                            placeholder=\"+55 11 99999-9999\"\n                        />\n                    </div>\n\n                    {/* País */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"country\"\n                        label=\"País\"\n                        placeholder=\"Brasil\"\n                    />\n\n                    {/* Observações */}\n                    <div className=\"space-y-2\">\n                        <Label htmlFor=\"notes\" className=\"text-muted-foreground text-sm\">\n                            Observações\n                        </Label>\n                        <Textarea\n                            id=\"notes\"\n                            placeholder=\"Observações sobre o fabricante...\"\n                            value={data.notes}\n                            onChange={(e) => setData('notes', e.target.value)}\n                            className=\"min-h-[100px]\"\n                        />\n                        {errors.notes && <p className=\"text-destructive text-sm\">{errors.notes}</p>}\n                    </div>\n                </>\n            )}\n        </BaseEntitySheet>\n    );\n};\n\nexport default CreateManufacturerSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreatePlantSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 15,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 15,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                708,
                                711
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                708,
                                711
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { cn } from '@/lib/utils';\nimport { Check, ChevronsUpDown } from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { BaseEntitySheet } from '@/components/BaseEntitySheet';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { estados } from '@/data/estados';\nimport { Plant as ImportedPlant } from '@/types/entities/plant';\n\ninterface PlantForm {\n    [key: string]: any;\n    name: string;\n    street: string;\n    number: string;\n    city: string;\n    state: string;\n    zip_code: string;\n    gps_coordinates: string;\n}\n\ninterface CreatePlantSheetProps {\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    onSuccess?: () => void;\n    triggerText?: string;\n    triggerVariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    showTrigger?: boolean;\n    triggerRef?: React.RefObject<HTMLButtonElement | null>;\n    plant?: ImportedPlant;\n    mode?: 'create' | 'edit';\n}\n\nconst CreatePlantSheet: React.FC<CreatePlantSheetProps> = ({\n    open: controlledOpen,\n    onOpenChange,\n    onSuccess,\n    triggerText = 'Nova Planta',\n    triggerVariant = 'outline',\n    showTrigger = false,\n    triggerRef,\n    plant,\n    mode = 'create',\n}) => {\n    const [open, setOpen] = useState(false);\n    const nameInputRef = useRef<HTMLInputElement>(null);\n\n    // Auto-focus the name input when sheet opens for creation\n    useEffect(() => {\n        if (controlledOpen && mode === 'create') {\n            // Use requestAnimationFrame to ensure the DOM is ready\n            const focusInput = () => {\n                requestAnimationFrame(() => {\n                    if (nameInputRef.current) {\n                        nameInputRef.current.focus();\n                        // Force focus in case it's being prevented\n                        nameInputRef.current.select();\n                    }\n                });\n            };\n\n            // Try multiple times with increasing delays to handle animation and focus traps\n            const timeouts = [100, 300, 500];\n            const timers = timeouts.map((delay) => setTimeout(focusInput, delay));\n\n            // Cleanup timeouts\n            return () => {\n                timers.forEach((timer) => clearTimeout(timer));\n            };\n        }\n    }, [controlledOpen, mode]);\n\n    // Handle onOpenChange to focus when sheet opens\n    const handleOpenChange = (open: boolean) => {\n        if (onOpenChange) {\n            onOpenChange(open);\n        }\n\n        // Focus the input when opening in create mode\n        if (open && mode === 'create') {\n            setTimeout(() => {\n                nameInputRef.current?.focus();\n            }, 100);\n        }\n    };\n\n    const formatCEP = (value: string) => {\n        // Remove todos os caracteres não numéricos\n        const numbers = value.replace(/\\D/g, '');\n        // Limita a 8 dígitos\n        const cep = numbers.slice(0, 8);\n        // Adiciona o hífen após os 5 primeiros dígitos\n        return cep.replace(/(\\d{5})(\\d{3})/, '$1-$2');\n    };\n\n    return (\n        <BaseEntitySheet<PlantForm>\n            entity={plant}\n            open={controlledOpen}\n            onOpenChange={handleOpenChange}\n            mode={mode}\n            onSuccess={onSuccess}\n            triggerText={triggerText}\n            triggerVariant={triggerVariant}\n            showTrigger={showTrigger}\n            triggerRef={triggerRef}\n            formConfig={{\n                initialData: {\n                    name: '',\n                    street: '',\n                    number: '',\n                    city: '',\n                    state: '',\n                    zip_code: '',\n                    gps_coordinates: '',\n                },\n                createRoute: 'asset-hierarchy.plantas.store',\n                updateRoute: 'asset-hierarchy.plantas.update',\n                entityName: 'Planta',\n            }}\n        >\n            {({ data, setData, errors }) => (\n                <>\n                    {/* Nome da Planta - Campo Obrigatório */}\n                    <TextInput\n                        ref={nameInputRef}\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"name\"\n                        label=\"Nome da Planta\"\n                        placeholder=\"Nome da planta\"\n                        required\n                    />\n\n                    {/* Endereço - Grid com 2 colunas */}\n                    <div className=\"grid gap-2\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"col-span-2\">\n                                <TextInput\n                                    form={{\n                                        data,\n                                        setData,\n                                        errors,\n                                        clearErrors: () => {},\n                                    }}\n                                    name=\"street\"\n                                    label=\"Rua\"\n                                    placeholder=\"Nome da rua\"\n                                />\n                            </div>\n                            <div>\n                                <TextInput\n                                    form={{\n                                        data,\n                                        setData,\n                                        errors,\n                                        clearErrors: () => {},\n                                    }}\n                                    name=\"number\"\n                                    label=\"Número\"\n                                    placeholder=\"Número\"\n                                />\n                            </div>\n                            <div>\n                                <TextInput\n                                    form={{\n                                        data,\n                                        setData: (name, value) => {\n                                            if (name === 'zip_code') {\n                                                setData(name, formatCEP(value));\n                                            } else {\n                                                setData(name, value);\n                                            }\n                                        },\n                                        errors,\n                                        clearErrors: () => {},\n                                    }}\n                                    name=\"zip_code\"\n                                    label=\"CEP\"\n                                    placeholder=\"00000-000\"\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Cidade e Estado - Grid com 2 colunas */}\n                    <div className=\"grid gap-2\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                                <TextInput\n                                    form={{\n                                        data,\n                                        setData,\n                                        errors,\n                                        clearErrors: () => {},\n                                    }}\n                                    name=\"city\"\n                                    label=\"Cidade\"\n                                    placeholder=\"Cidade\"\n                                />\n                            </div>\n                            <div>\n                                <Label htmlFor=\"state\" className=\"text-muted-foreground text-sm\">\n                                    Estado\n                                </Label>\n                                <Popover open={open} onOpenChange={setOpen}>\n                                    <PopoverTrigger asChild>\n                                        <Button id=\"state\" variant=\"outline\" role=\"combobox\" aria-expanded={open} className=\"w-full justify-between\">\n                                            {data.state ? estados.find((estado) => estado.value === data.state)?.label : 'Selecione um estado...'}\n                                            <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                        </Button>\n                                    </PopoverTrigger>\n                                    <PopoverContent className=\"w-full p-0\">\n                                        <Command>\n                                            <CommandInput placeholder=\"Buscar estado...\" />\n                                            <CommandList>\n                                                <CommandEmpty>Nenhum estado encontrado.</CommandEmpty>\n                                                <CommandGroup>\n                                                    {estados.map((estado) => (\n                                                        <CommandItem\n                                                            key={estado.value}\n                                                            value={estado.value}\n                                                            onSelect={(currentValue) => {\n                                                                setData('state', currentValue === data.state ? '' : currentValue);\n                                                                setOpen(false);\n                                                            }}\n                                                        >\n                                                            <Check\n                                                                className={cn(\n                                                                    'mr-2 h-4 w-4',\n                                                                    data.state === estado.value ? 'opacity-100' : 'opacity-0',\n                                                                )}\n                                                            />\n                                                            {estado.label}\n                                                        </CommandItem>\n                                                    ))}\n                                                </CommandGroup>\n                                            </CommandList>\n                                        </Command>\n                                    </PopoverContent>\n                                </Popover>\n                            </div>\n                        </div>\n                    </div>\n\n                    {/* Coordenadas GPS */}\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"gps_coordinates\"\n                        label=\"Coordenadas GPS\"\n                        placeholder=\"Ex: -23.550520, -46.633308\"\n                    />\n                </>\n            )}\n        </BaseEntitySheet>\n    );\n};\n\nexport default CreatePlantSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateRoutineButton.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateSectorSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 10,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 10,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                379,
                                382
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                379,
                                382
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import React, { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { BaseEntitySheet } from '@/components/BaseEntitySheet';\nimport ItemSelect from '@/components/ItemSelect';\nimport TextInput from '@/components/TextInput';\nimport { type Plant } from '@/types/asset-hierarchy';\nimport { Sector } from '@/types/entities/sector';\n\ninterface SectorForm {\n    [key: string]: any;\n    name: string;\n    area_id: string;\n}\n\ninterface CreateSectorSheetProps {\n    sector?: Sector;\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    mode: 'create' | 'edit';\n    plants: Plant[];\n    onSuccess?: () => void;\n    selectedPlantId?: string;\n    selectedAreaId?: string;\n    disableParentFields?: boolean;\n}\n\nconst CreateSectorSheet: React.FC<CreateSectorSheetProps> = ({\n    sector,\n    open,\n    onOpenChange,\n    mode,\n    plants = [],\n    onSuccess,\n    selectedPlantId,\n    selectedAreaId,\n    disableParentFields = false,\n}) => {\n    const isEditMode = mode === 'edit';\n    const [localSelectedPlant, setLocalSelectedPlant] = useState<string>(selectedPlantId || '');\n    const nameInputRef = useRef<HTMLInputElement>(null);\n\n    // Update selected plant when sector changes (for edit mode) or when selectedPlantId changes\n    useEffect(() => {\n        if (isEditMode && sector) {\n            // Set the plant based on the sector's area\n            if (sector.area?.plant?.id) {\n                setLocalSelectedPlant(sector.area.plant.id.toString());\n            }\n        } else if (!isEditMode && selectedPlantId) {\n            setLocalSelectedPlant(selectedPlantId);\n        }\n    }, [sector, isEditMode, selectedPlantId]);\n\n    // Auto-focus the name input when sheet opens for creation\n    useEffect(() => {\n        if (open && mode === 'create') {\n            // Use requestAnimationFrame to ensure the DOM is ready\n            const focusInput = () => {\n                requestAnimationFrame(() => {\n                    if (nameInputRef.current) {\n                        nameInputRef.current.focus();\n                        nameInputRef.current.select();\n                    }\n                });\n            };\n\n            // Try multiple times with increasing delays to handle animation and focus traps\n            const timeouts = [100, 300, 500];\n            const timers = timeouts.map((delay) => setTimeout(focusInput, delay));\n\n            // Cleanup timeouts\n            return () => {\n                timers.forEach((timer) => clearTimeout(timer));\n            };\n        }\n    }, [open, mode]);\n\n    // Handle onOpenChange to focus when sheet opens\n    const handleOpenChange = (open: boolean) => {\n        if (onOpenChange) {\n            onOpenChange(open);\n        }\n\n        // Focus the input when opening in create mode\n        if (open && mode === 'create') {\n            setTimeout(() => {\n                nameInputRef.current?.focus();\n            }, 100);\n        }\n    };\n\n    const availableAreas = useMemo(() => {\n        if (!localSelectedPlant) return [];\n        const selectedPlant = plants.find((p) => p.id.toString() === localSelectedPlant);\n        return selectedPlant?.areas || [];\n    }, [localSelectedPlant, plants]);\n\n    return (\n        <BaseEntitySheet<SectorForm>\n            entity={sector}\n            open={open}\n            onOpenChange={handleOpenChange}\n            mode={mode}\n            onSuccess={onSuccess}\n            formConfig={{\n                initialData: {\n                    name: '',\n                    area_id: selectedAreaId || '',\n                },\n                createRoute: 'asset-hierarchy.setores.store',\n                updateRoute: 'asset-hierarchy.setores.update',\n                entityName: 'Setor',\n            }}\n        >\n            {({ data, setData, errors }) => (\n                <>\n                    {/* Nome do Setor - Campo Obrigatório */}\n                    <TextInput\n                        ref={nameInputRef}\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors: () => {},\n                        }}\n                        name=\"name\"\n                        label=\"Nome do Setor\"\n                        placeholder=\"Nome do setor\"\n                        required\n                    />\n\n                    {/* Planta */}\n                    <div className=\"grid gap-2\">\n                        <ItemSelect\n                            label=\"Planta\"\n                            items={plants}\n                            value={localSelectedPlant}\n                            onValueChange={(value) => {\n                                setLocalSelectedPlant(value);\n                                if (!isEditMode && !disableParentFields) {\n                                    setData('area_id', ''); // Limpa a área quando mudar a planta\n                                }\n                            }}\n                            placeholder=\"Selecione uma planta\"\n                            required\n                            disabled={isEditMode || disableParentFields}\n                        />\n                        {(isEditMode || disableParentFields) && (\n                            <p className=\"text-muted-foreground text-sm\">\n                                {isEditMode\n                                    ? 'A planta não pode ser alterada ao editar um setor.'\n                                    : 'A planta foi pré-selecionada e não pode ser alterada.'}\n                            </p>\n                        )}\n                    </div>\n\n                    {/* Área */}\n                    <div className=\"grid gap-2\">\n                        <ItemSelect\n                            label=\"Área\"\n                            items={availableAreas}\n                            value={data.area_id?.toString() || ''}\n                            onValueChange={(value) => setData('area_id', value)}\n                            placeholder={!localSelectedPlant ? 'Selecione uma planta primeiro' : 'Selecione uma área'}\n                            error={errors.area_id}\n                            disabled={!localSelectedPlant || isEditMode || disableParentFields}\n                            required\n                        />\n                        {(isEditMode || disableParentFields) && (\n                            <p className=\"text-muted-foreground text-sm\">\n                                {isEditMode\n                                    ? 'A área não pode ser alterada ao editar um setor.'\n                                    : 'A área foi pré-selecionada e não pode ser alterada.'}\n                            </p>\n                        )}\n                    </div>\n                </>\n            )}\n        </BaseEntitySheet>\n    );\n};\n\nexport default CreateSectorSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/CreateShiftSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 53,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 53,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1842,
                                1845
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1842,
                                1845
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 293,
                "column": 68,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 293,
                "endColumn": 71,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                11608,
                                11611
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                11608,
                                11611
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 533,
                "column": 47,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 533,
                "endColumn": 50,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                21665,
                                21668
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                21665,
                                21668
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 563,
                "column": 47,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 563,
                "endColumn": 50,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                22994,
                                22997
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                22994,
                                22997
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 596,
                "column": 54,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 596,
                "endColumn": 57,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                24507,
                                24510
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                24507,
                                24510
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 5,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import TextInput from '@/components/TextInput';\nimport TimeSelect from '@/components/TimeSelect';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { type ShiftForm } from '@/types/asset-hierarchy';\nimport { useForm } from '@inertiajs/react';\nimport { AlertCircle, AlertTriangle, Clock, Copy, Plus, Table, Trash2 } from 'lucide-react';\nimport React, { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\nimport ShiftCalendarView from '@/components/ShiftCalendarView';\nimport ShiftTableView from '@/components/ShiftTableView';\nimport axios from 'axios';\n\ninterface Break {\n    start_time: string;\n    end_time: string;\n}\n\ninterface Shift {\n    start_time: string;\n    end_time: string;\n    active: boolean;\n    breaks: Break[];\n}\n\ninterface Schedule {\n    weekday: string;\n    shifts: Shift[];\n}\n\ninterface AffectedAsset {\n    id: number;\n    tag: string;\n    description: string | null;\n    asset_type: string | null;\n    plant: string | null;\n    area: string | null;\n    sector: string | null;\n    current_runtime_hours: number;\n}\n\ninterface CreateShiftSheetProps {\n    isOpen?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    onSuccess?: (shift: any) => void;\n    triggerText?: string;\n    triggerVariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    showTrigger?: boolean;\n    initialShift?: {\n        id: number;\n        name: string;\n        timezone?: string;\n        schedules: Schedule[];\n    };\n}\n\nconst weekdays = [\n    { key: 'Monday', label: 'Segunda' },\n    { key: 'Tuesday', label: 'Terça' },\n    { key: 'Wednesday', label: 'Quarta' },\n    { key: 'Thursday', label: 'Quinta' },\n    { key: 'Friday', label: 'Sexta' },\n    { key: 'Saturday', label: 'Sábado' },\n    { key: 'Sunday', label: 'Domingo' },\n];\n\n// Helper functions from shift-editor.tsx\nconst isBreakValid = (shift: Shift, breakTime: Break): boolean => {\n    const shiftStart = new Date(`2000-01-01T${shift.start_time}`);\n    const shiftEnd = new Date(`2000-01-01T${shift.end_time}`);\n    const breakStart = new Date(`2000-01-01T${breakTime.start_time}`);\n    const breakEnd = new Date(`2000-01-01T${breakTime.end_time}`);\n\n    // Se o turno termina no dia seguinte\n    if (shiftEnd < shiftStart) {\n        shiftEnd.setDate(shiftEnd.getDate() + 1);\n    }\n\n    // Se o intervalo termina no dia seguinte\n    if (breakEnd < breakStart) {\n        breakEnd.setDate(breakEnd.getDate() + 1);\n    }\n\n    return breakStart >= shiftStart && breakEnd <= shiftEnd;\n};\n\nconst timeToMinutes = (time: string): number => {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n};\n\nconst minutesToTime = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60) % 24;\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n};\n\nconst calculateDuration = (start: string, end: string): number => {\n    const startMinutes = timeToMinutes(start);\n    const endMinutes = timeToMinutes(end);\n\n    // Se o horário final for menor que o inicial, significa que atravessou a meia-noite\n    if (endMinutes < startMinutes) {\n        return 24 * 60 - startMinutes + endMinutes;\n    }\n\n    return endMinutes - startMinutes;\n};\n\nconst addMinutes = (time: string, minutes: number): string => {\n    const totalMinutes = timeToMinutes(time) + minutes;\n    return minutesToTime(totalMinutes);\n};\n\nconst findLargestGap = (shift: Shift): { start: string; end: string } | null => {\n    if (shift.breaks.length === 0) {\n        return {\n            start: shift.start_time,\n            end: shift.end_time,\n        };\n    }\n\n    // Ordena os intervalos por horário de início\n    const sortedBreaks = [...shift.breaks].sort((a, b) => timeToMinutes(a.start_time) - timeToMinutes(b.start_time));\n\n    let largestGap = 0;\n    let gapStart = shift.start_time;\n    let gapEnd = shift.end_time;\n\n    // Verifica o período antes do primeiro intervalo\n    const firstGap = calculateDuration(shift.start_time, sortedBreaks[0].start_time);\n    if (firstGap > largestGap) {\n        largestGap = firstGap;\n        gapStart = shift.start_time;\n        gapEnd = sortedBreaks[0].start_time;\n    }\n\n    // Verifica os períodos entre intervalos\n    for (let i = 0; i < sortedBreaks.length - 1; i++) {\n        const currentGap = calculateDuration(sortedBreaks[i].end_time, sortedBreaks[i + 1].start_time);\n        if (currentGap > largestGap) {\n            largestGap = currentGap;\n            gapStart = sortedBreaks[i].end_time;\n            gapEnd = sortedBreaks[i + 1].start_time;\n        }\n    }\n\n    // Verifica o período após o último intervalo\n    const lastGap = calculateDuration(sortedBreaks[sortedBreaks.length - 1].end_time, shift.end_time);\n    if (lastGap > largestGap) {\n        largestGap = lastGap;\n        gapStart = sortedBreaks[sortedBreaks.length - 1].end_time;\n        gapEnd = shift.end_time;\n    }\n\n    return largestGap > 0 ? { start: gapStart, end: gapEnd } : null;\n};\n\nconst hasOverlappingShifts = (shift1: Shift, shift2: Shift): boolean => {\n    const shift1Start = timeToMinutes(shift1.start_time);\n    const shift1End = timeToMinutes(shift1.end_time);\n    const shift2Start = timeToMinutes(shift2.start_time);\n    const shift2End = timeToMinutes(shift2.end_time);\n\n    // Se algum dos turnos atravessa a meia-noite\n    if (shift1End < shift1Start) {\n        // Verifica se o turno 2 começa antes do turno 1 terminar\n        if (shift2Start < shift1End) return true;\n        // Verifica se o turno 2 termina depois do turno 1 começar\n        if (shift2End > shift1Start) return true;\n        // Verifica se o turno 2 atravessa a meia-noite e se sobrepõe\n        if (shift2End < shift2Start && shift2Start < shift1End && shift2End > shift1Start) return true;\n    } else if (shift2End < shift2Start) {\n        // Verifica se o turno 1 começa antes do turno 2 terminar\n        if (shift1Start < shift2End) return true;\n        // Verifica se o turno 1 termina depois do turno 2 começar\n        if (shift1End > shift2Start) return true;\n        // Verifica se o turno 1 atravessa a meia-noite e se sobrepõe\n        if (shift1End < shift1Start && shift1Start < shift2End && shift1End > shift2Start) return true;\n    } else {\n        // Caso nenhum dos turnos atravesse a meia-noite\n        return shift1Start < shift2End && shift2Start < shift1End;\n    }\n\n    return false;\n};\n\nconst findOverlappingShifts = (shifts: Shift[], currentShiftIndex: number): number[] => {\n    const currentShift = shifts[currentShiftIndex];\n    const overlappingIndices: number[] = [];\n\n    for (let i = 0; i < shifts.length; i++) {\n        if (i !== currentShiftIndex && hasOverlappingShifts(currentShift, shifts[i])) {\n            overlappingIndices.push(i);\n        }\n    }\n\n    return overlappingIndices;\n};\n\nconst hasOverlappingBreaks = (break1: Break, break2: Break): boolean => {\n    const break1Start = timeToMinutes(break1.start_time);\n    const break1End = timeToMinutes(break1.end_time);\n    const break2Start = timeToMinutes(break2.start_time);\n    const break2End = timeToMinutes(break2.end_time);\n\n    // Se algum dos intervalos atravessa a meia-noite\n    if (break1End < break1Start) {\n        // Verifica se o intervalo 2 começa antes do intervalo 1 terminar\n        if (break2Start < break1End) return true;\n        // Verifica se o intervalo 2 termina depois do intervalo 1 começar\n        if (break2End > break1Start) return true;\n        // Verifica se o intervalo 2 atravessa a meia-noite e se sobrepõe\n        if (break2End < break2Start && break2Start < break1End && break2End > break1Start) return true;\n    } else if (break2End < break2Start) {\n        // Verifica se o intervalo 1 começa antes do intervalo 2 terminar\n        if (break1Start < break2End) return true;\n        // Verifica se o intervalo 1 termina depois do intervalo 2 começar\n        if (break1End > break2Start) return true;\n        // Verifica se o intervalo 1 atravessa a meia-noite e se sobrepõe\n        if (break1End < break1Start && break1Start < break2End && break1End > break2Start) return true;\n    } else {\n        // Caso nenhum dos intervalos atravesse a meia-noite\n        return break1Start < break2End && break2Start < break1End;\n    }\n\n    return false;\n};\n\nconst isBreakOverlapping = (shift: Shift, currentBreak: Break, currentBreakIndex: number): boolean => {\n    return shift.breaks.some((breakTime, index) => index !== currentBreakIndex && hasOverlappingBreaks(currentBreak, breakTime));\n};\n\nconst CreateShiftSheet = forwardRef<HTMLButtonElement, CreateShiftSheetProps>(\n    ({ isOpen, onOpenChange, onSuccess, triggerText = 'Novo Turno', triggerVariant = 'outline', showTrigger = false, initialShift }, ref) => {\n        const [open, setOpen] = useState(false);\n        const buttonRef = useRef<HTMLButtonElement>(null);\n        const nameInputRef = useRef<HTMLInputElement>(null);\n\n        // Expose button click to parent component\n        useImperativeHandle(ref, () => buttonRef.current!, []);\n\n        // Get user's timezone\n        const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n        // Initialize form data based on whether we're editing or creating\n        const getInitialFormData = (): ShiftForm & { timezone: string } => {\n            if (initialShift) {\n                return {\n                    name: initialShift.name,\n                    timezone: initialShift.timezone || userTimezone,\n                    schedules: initialShift.schedules,\n                };\n            }\n\n            return {\n                name: '',\n                timezone: userTimezone,\n                schedules: weekdays.map((day) => ({\n                    weekday: day.key,\n                    shifts:\n                        day.key === 'Saturday' || day.key === 'Sunday'\n                            ? []\n                            : [\n                                  {\n                                      start_time: '07:00',\n                                      end_time: '17:00',\n                                      active: true,\n                                      breaks: [{ start_time: '12:00', end_time: '13:00' }],\n                                  },\n                              ],\n                })),\n            };\n        };\n\n        const { data, setData, processing, errors, clearErrors } = useForm<ShiftForm & { timezone: string }>(getInitialFormData());\n\n        const [selectedDay, setSelectedDay] = useState(weekdays[0].key);\n        const [selectedDays, setSelectedDays] = useState<string[]>([]);\n        const [viewMode, setViewMode] = useState<'timeline' | 'table'>('timeline');\n        const [copyPopoverOpen, setCopyPopoverOpen] = useState(false);\n        const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n        const [affectedAssets, setAffectedAssets] = useState<AffectedAsset[]>([]);\n\n        const [pendingSubmitData, setPendingSubmitData] = useState<any>(null);\n        const [updateMode, setUpdateMode] = useState<'all' | 'selected'>('all');\n        const [selectedAssetIds, setSelectedAssetIds] = useState<number[]>([]);\n\n        const effectiveOpen = isOpen !== undefined ? isOpen : open;\n        const effectiveSetOpen = onOpenChange || setOpen;\n\n        // Auto-focus name input when sheet opens\n        useEffect(() => {\n            if (effectiveOpen && nameInputRef.current) {\n                // Use requestAnimationFrame to ensure the sheet animation has started\n                requestAnimationFrame(() => {\n                    // Add a small delay to ensure the sheet is fully rendered\n                    setTimeout(() => {\n                        nameInputRef.current?.focus();\n                    }, 100);\n                });\n            }\n        }, [effectiveOpen]);\n\n        // Additional focus attempt when the component mounts and sheet is open\n        useEffect(() => {\n            if (effectiveOpen) {\n                // Try multiple times to ensure focus works\n                const attempts = [100, 200, 300, 500];\n                attempts.forEach((delay) => {\n                    setTimeout(() => {\n                        if (nameInputRef.current && document.activeElement !== nameInputRef.current) {\n                            nameInputRef.current.focus();\n                        }\n                    }, delay);\n                });\n            }\n        }, [effectiveOpen]);\n\n        const addShift = (dayIndex: number) => {\n            const newSchedules = [...data.schedules];\n            const existingShifts = newSchedules[dayIndex].shifts;\n\n            // Se não houver turnos, usa o padrão\n            if (existingShifts.length === 0) {\n                newSchedules[dayIndex].shifts.push({\n                    start_time: '07:00',\n                    end_time: '17:00',\n                    active: true,\n                    breaks: [{ start_time: '12:00', end_time: '13:00' }],\n                });\n            } else {\n                // Pega o último turno\n                const lastShift = existingShifts[existingShifts.length - 1];\n                const lastEndTime = lastShift.end_time;\n\n                // Calcula o novo horário\n                const [lastEndHour, lastEndMinute] = lastEndTime.split(':').map(Number);\n                const newStartHour = lastEndHour;\n                const newStartMinute = lastEndMinute;\n\n                // Calcula o horário de término (9 horas depois)\n                let newEndHour = newStartHour + 9;\n                if (newEndHour >= 24) {\n                    newEndHour -= 24;\n                }\n\n                // Calcula o horário do intervalo (4 horas depois do início)\n                let breakStartHour = newStartHour + 4;\n                if (breakStartHour >= 24) {\n                    breakStartHour -= 24;\n                }\n                let breakEndHour = breakStartHour + 1;\n                if (breakEndHour >= 24) {\n                    breakEndHour -= 24;\n                }\n\n                // Formata os horários\n                const formatTime = (hour: number, minute: number) => {\n                    return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                };\n\n                newSchedules[dayIndex].shifts.push({\n                    start_time: formatTime(newStartHour, newStartMinute),\n                    end_time: formatTime(newEndHour, newStartMinute),\n                    active: true,\n                    breaks: [\n                        {\n                            start_time: formatTime(breakStartHour, newStartMinute),\n                            end_time: formatTime(breakEndHour, newStartMinute),\n                        },\n                    ],\n                });\n            }\n\n            setData('schedules', newSchedules);\n        };\n\n        const removeShift = (dayIndex: number, shiftIndex: number) => {\n            const newSchedules = data.schedules.map((day, idx) => {\n                if (idx === dayIndex) {\n                    return {\n                        ...day,\n                        shifts: day.shifts.filter((_, index) => index !== shiftIndex),\n                    };\n                }\n                return day;\n            });\n\n            setData('schedules', newSchedules);\n        };\n\n        const addBreak = (dayIndex: number, shiftIndex: number) => {\n            const newSchedules = [...data.schedules];\n            const shift = newSchedules[dayIndex].shifts[shiftIndex];\n\n            if (shift.breaks.length === 0) {\n                // Se não houver intervalos, adiciona um intervalo de 30 minutos no meio do turno\n                const shiftDuration = calculateDuration(shift.start_time, shift.end_time);\n                const breakStart = addMinutes(shift.start_time, Math.floor(shiftDuration / 2) - 15);\n                const breakEnd = addMinutes(breakStart, 30);\n\n                newSchedules[dayIndex].shifts[shiftIndex].breaks.push({\n                    start_time: breakStart,\n                    end_time: breakEnd,\n                });\n            } else {\n                // Encontra o maior período sem intervalo\n                const largestGap = findLargestGap(shift);\n\n                if (largestGap) {\n                    const gapDuration = calculateDuration(largestGap.start, largestGap.end);\n                    const breakStart = addMinutes(largestGap.start, Math.floor(gapDuration / 2) - 7);\n                    const breakEnd = addMinutes(breakStart, 15);\n\n                    newSchedules[dayIndex].shifts[shiftIndex].breaks.push({\n                        start_time: breakStart,\n                        end_time: breakEnd,\n                    });\n                }\n            }\n\n            setData('schedules', newSchedules);\n        };\n\n        const removeBreak = (dayIndex: number, shiftIndex: number, breakIndex: number) => {\n            const newSchedules = data.schedules.map((day, idx) => {\n                if (idx === dayIndex) {\n                    return {\n                        ...day,\n                        shifts: day.shifts.map((shift, sIdx) => {\n                            if (sIdx === shiftIndex) {\n                                return {\n                                    ...shift,\n                                    breaks: shift.breaks.filter((_, bIdx) => bIdx !== breakIndex),\n                                };\n                            }\n                            return shift;\n                        }),\n                    };\n                }\n                return day;\n            });\n\n            setData('schedules', newSchedules);\n        };\n\n        const updateBreak = (dayIndex: number, shiftIndex: number, breakIndex: number, field: keyof Break, value: string) => {\n            const newSchedules = [...data.schedules];\n            newSchedules[dayIndex].shifts[shiftIndex].breaks[breakIndex][field] = value;\n            setData('schedules', newSchedules);\n        };\n\n        const applyToSelectedDays = () => {\n            const sourceDay = data.schedules.find((s) => s.weekday === selectedDay);\n            if (!sourceDay) return;\n\n            const newSchedules = data.schedules.map((schedule) => {\n                if (selectedDays.includes(schedule.weekday)) {\n                    // Cria uma cópia profunda do dia de origem\n                    return {\n                        ...sourceDay,\n                        weekday: schedule.weekday,\n                        shifts: sourceDay.shifts.map((shift) => ({\n                            ...shift,\n                            breaks: shift.breaks.map((breakTime) => ({ ...breakTime })),\n                        })),\n                    };\n                }\n                return schedule;\n            });\n\n            setData('schedules', newSchedules);\n            setSelectedDays([]);\n            setCopyPopoverOpen(false);\n        };\n\n        const handleSubmit = (e: React.FormEvent) => {\n            e.preventDefault();\n\n            // Remove os segundos de todos os horários antes de enviar\n            const formattedData = {\n                ...data,\n                timezone: data.timezone, // Include timezone in submission\n                schedules: data.schedules.map((schedule) => ({\n                    ...schedule,\n                    shifts: schedule.shifts.map((shift) => ({\n                        ...shift,\n                        start_time: shift.start_time?.substring(0, 5) || shift.start_time,\n                        end_time: shift.end_time?.substring(0, 5) || shift.end_time,\n                        breaks: shift.breaks.map((breakTime) => ({\n                            start_time: breakTime.start_time?.substring(0, 5) || breakTime.start_time,\n                            end_time: breakTime.end_time?.substring(0, 5) || breakTime.end_time,\n                        })),\n                    })),\n                })),\n            };\n\n            const isEditing = !!initialShift;\n\n            // If editing, check for affected assets first\n            if (isEditing) {\n                axios\n                    .get(route('asset-hierarchy.shifts.assets', { shift: initialShift.id }))\n                    .then((response) => {\n                        if (response.data.total > 0) {\n                            setAffectedAssets(response.data.assets);\n                            setPendingSubmitData(formattedData);\n                            setShowConfirmDialog(true);\n                        } else {\n                            // No assets affected, proceed with update\n                            performUpdate(formattedData);\n                        }\n                    })\n                    .catch((error) => {\n                        toast.error('Erro ao verificar ativos afetados');\n                        console.error(error);\n                    });\n            } else {\n                // Creating new shift, proceed directly\n                performCreate(formattedData);\n            }\n        };\n\n        const performCreate = (formattedData: any) => {\n            axios\n                .post(route('asset-hierarchy.shifts.store'), formattedData, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Accept: 'application/json',\n                    },\n                })\n                .then((response) => {\n                    clearErrors();\n                    effectiveSetOpen(false);\n                    toast.success('Turno criado com sucesso!');\n                    if (onSuccess && response.data.shift) {\n                        onSuccess(response.data.shift);\n                    }\n                })\n                .catch((error) => {\n                    if (error.response && error.response.data && error.response.data.errors) {\n                        // Handle validation errors\n                        Object.keys(error.response.data.errors).forEach((key) => {\n                            toast.error(error.response.data.errors[key][0]);\n                        });\n                    } else {\n                        toast.error('Erro ao criar turno', {\n                            description: 'Ocorreu um erro. Por favor, verifique os dados e tente novamente.',\n                        });\n                    }\n                });\n        };\n\n        const performUpdate = (formattedData: any) => {\n            axios\n                .put(route('asset-hierarchy.shifts.update', { shift: initialShift!.id }), formattedData, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Accept: 'application/json',\n                    },\n                })\n                .then((response) => {\n                    clearErrors();\n                    effectiveSetOpen(false);\n                    setShowConfirmDialog(false);\n                    setPendingSubmitData(null);\n                    setAffectedAssets([]);\n                    toast.success('Turno atualizado com sucesso!');\n                    if (onSuccess && response.data.shift) {\n                        onSuccess(response.data.shift);\n                    }\n                })\n                .catch((error) => {\n                    if (error.response && error.response.data && error.response.data.errors) {\n                        // Handle validation errors\n                        Object.keys(error.response.data.errors).forEach((key) => {\n                            toast.error(error.response.data.errors[key][0]);\n                        });\n                    } else {\n                        toast.error('Erro ao atualizar turno', {\n                            description: 'Ocorreu um erro. Por favor, verifique os dados e tente novamente.',\n                        });\n                    }\n                });\n        };\n\n        const performCopyAndUpdate = (formattedData: any) => {\n            const dataWithAssets = {\n                ...formattedData,\n                asset_ids: selectedAssetIds,\n            };\n\n            axios\n                .post(route('asset-hierarchy.shifts.copy-and-update', { shift: initialShift!.id }), dataWithAssets, {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Accept: 'application/json',\n                    },\n                })\n                .then((response) => {\n                    clearErrors();\n                    effectiveSetOpen(false);\n                    setShowConfirmDialog(false);\n                    setPendingSubmitData(null);\n                    setAffectedAssets([]);\n                    setSelectedAssetIds([]);\n                    setUpdateMode('all');\n                    toast.success(response.data.message || 'Novo turno criado e ativos atualizados com sucesso!');\n                    if (onSuccess && response.data.shift) {\n                        onSuccess(response.data.shift);\n                    }\n                })\n                .catch((error) => {\n                    if (error.response && error.response.data && error.response.data.errors) {\n                        // Handle validation errors\n                        Object.keys(error.response.data.errors).forEach((key) => {\n                            toast.error(error.response.data.errors[key][0]);\n                        });\n                    } else {\n                        toast.error('Erro ao criar cópia do turno', {\n                            description: 'Ocorreu um erro. Por favor, verifique os dados e tente novamente.',\n                        });\n                    }\n                });\n        };\n\n        const handleConfirmUpdate = () => {\n            if (pendingSubmitData) {\n                if (updateMode === 'all') {\n                    performUpdate(pendingSubmitData);\n                } else {\n                    performCopyAndUpdate(pendingSubmitData);\n                }\n            }\n        };\n\n        const handleCancelUpdate = () => {\n            setShowConfirmDialog(false);\n            setPendingSubmitData(null);\n            setAffectedAssets([]);\n            setSelectedAssetIds([]);\n            setUpdateMode('all');\n        };\n\n        const handleCancel = () => {\n            clearErrors();\n            effectiveSetOpen(false);\n            setSelectedDays([]);\n            setCopyPopoverOpen(false);\n        };\n\n        return (\n            <>\n                {showTrigger && (\n                    <Button ref={buttonRef} variant={triggerVariant} onClick={() => effectiveSetOpen(true)} className=\"gap-2\">\n                        <Plus className=\"h-4 w-4\" />\n                        {triggerText}\n                    </Button>\n                )}\n\n                <Sheet open={effectiveOpen} onOpenChange={effectiveSetOpen}>\n                    <SheetContent\n                        className=\"w-full overflow-y-auto sm:max-w-[950px]\"\n                        onOpenAutoFocus={(e) => {\n                            // Prevent default auto-focus behavior\n                            e.preventDefault();\n                            // Our custom focus logic will handle it\n                        }}\n                    >\n                        <SheetHeader>\n                            <SheetTitle>{initialShift ? 'Editar Turno' : 'Cadastrar Turno'}</SheetTitle>\n                        </SheetHeader>\n\n                        <form onSubmit={handleSubmit} className=\"mr-4 ml-4 space-y-4\">\n                            <div className=\"grid grid-cols-1 justify-items-start\">\n                                <div className=\"w-full space-y-6\">\n                                    {/* Alert about automatic runtime recording for shift updates */}\n                                    {initialShift && (\n                                        <Alert>\n                                            <AlertCircle className=\"h-4 w-4\" />\n                                            <AlertDescription>\n                                                Ao atualizar este turno, você será solicitado a confirmar a alteração se houver ativos associados. O\n                                                horímetro atual será registrado automaticamente para todos os ativos afetados, preservando o histórico\n                                                de operação.\n                                            </AlertDescription>\n                                        </Alert>\n                                    )}\n\n                                    {/* Campo de nome do turno */}\n                                    <div className=\"w-full space-y-2\">\n                                        <TextInput\n                                            form={{\n                                                data,\n                                                setData,\n                                                errors,\n                                                clearErrors,\n                                            }}\n                                            name=\"name\"\n                                            label=\"Nome do Turno\"\n                                            placeholder=\"Digite o nome do turno\"\n                                            required\n                                            ref={nameInputRef}\n                                        />\n                                    </div>\n\n                                    {/* Timezone display */}\n                                    <div className=\"w-full space-y-2\">\n                                        <Label className=\"text-muted-foreground text-sm\">Fuso Horário: {data.timezone}</Label>\n                                        <p className=\"text-muted-foreground text-xs\">Os horários do turno serão configurados neste fuso horário</p>\n                                    </div>\n\n                                    {/* Seletor de dias da semana */}\n                                    <Tabs value={selectedDay} onValueChange={setSelectedDay}>\n                                        <TabsList className=\"grid grid-cols-7 gap-2\">\n                                            {weekdays.map((day) => (\n                                                <TabsTrigger key={day.key} value={day.key} className=\"px-4\">\n                                                    {day.label}\n                                                </TabsTrigger>\n                                            ))}\n                                        </TabsList>\n\n                                        {/* Conteúdo de cada dia da semana */}\n                                        {weekdays.map((day, dayIndex) => (\n                                            <TabsContent key={day.key} value={day.key} className=\"!pr-0 !pl-2\">\n                                                <div className=\"flex flex-row items-center justify-between pt-6 pb-6\">\n                                                    <h3 className=\"text-lg font-semibold\">Turnos da {day.label}</h3>\n                                                    <div className=\"flex items-center gap-2\">\n                                                        {/* Botão para copiar turnos para múltiplos dias */}\n                                                        <Popover modal={true} open={copyPopoverOpen} onOpenChange={setCopyPopoverOpen}>\n                                                            <PopoverTrigger asChild>\n                                                                <Button\n                                                                    type=\"button\"\n                                                                    variant=\"outline\"\n                                                                    size=\"sm\"\n                                                                    disabled={data.schedules[dayIndex].shifts.length === 0}\n                                                                >\n                                                                    <Copy className=\"mr-2 h-4 w-4\" />\n                                                                    Copiar para Múltiplos Dias\n                                                                </Button>\n                                                            </PopoverTrigger>\n                                                            <PopoverContent className=\"w-80 p-6\" align=\"end\" sideOffset={5}>\n                                                                {/* Conteúdo do popover de cópia */}\n                                                                <div className=\"space-y-5\">\n                                                                    <div className=\"mt-1 grid grid-cols-2 gap-4\">\n                                                                        {weekdays\n                                                                            .filter((d) => d.key !== day.key)\n                                                                            .map((d) => (\n                                                                                <div key={d.key} className=\"flex items-center space-x-1 py-1\">\n                                                                                    <Checkbox\n                                                                                        checked={selectedDays.includes(d.key)}\n                                                                                        onCheckedChange={(checked) => {\n                                                                                            if (checked) {\n                                                                                                setSelectedDays([...selectedDays, d.key]);\n                                                                                            } else {\n                                                                                                setSelectedDays(\n                                                                                                    selectedDays.filter((day) => day !== d.key),\n                                                                                                );\n                                                                                            }\n                                                                                        }}\n                                                                                        id={`copy-day-${d.key}`}\n                                                                                        className=\"h-5 w-5\"\n                                                                                    />\n                                                                                    <Label htmlFor={`copy-day-${d.key}`} className=\"cursor-pointer\">\n                                                                                        {d.label}\n                                                                                    </Label>\n                                                                                </div>\n                                                                            ))}\n                                                                    </div>\n                                                                    <div className=\"pt-3\">\n                                                                        <Button\n                                                                            type=\"button\"\n                                                                            onClick={applyToSelectedDays}\n                                                                            size=\"sm\"\n                                                                            disabled={selectedDays.length === 0}\n                                                                            className=\"w-full\"\n                                                                        >\n                                                                            Aplicar\n                                                                        </Button>\n                                                                    </div>\n                                                                </div>\n                                                            </PopoverContent>\n                                                        </Popover>\n                                                        {/* Botão para adicionar novo turno */}\n                                                        <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => addShift(dayIndex)}>\n                                                            <Plus className=\"mr-2 h-4 w-4\" />\n                                                            Adicionar Turno\n                                                        </Button>\n                                                    </div>\n                                                </div>\n\n                                                {/* Lista de turnos do dia */}\n                                                {data.schedules[dayIndex].shifts.length === 0 ? (\n                                                    <div className=\"bg-muted/50 rounded-lg border p-6 transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]\">\n                                                        <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n                                                            <div className=\"bg-muted mb-3 flex size-12 items-center justify-center rounded-full\">\n                                                                <Clock className=\"text-muted-foreground size-6\" />\n                                                            </div>\n                                                            <h3 className=\"mb-1 text-lg font-medium\">Nenhum turno adicionado</h3>\n                                                            <p className=\"text-muted-foreground mb-4 text-sm\">\n                                                                Adicione turnos para este dia da semana.\n                                                            </p>\n                                                        </div>\n                                                    </div>\n                                                ) : (\n                                                    data.schedules[dayIndex].shifts.map((shift, shiftIndex) => {\n                                                        const overlappingShifts = findOverlappingShifts(data.schedules[dayIndex].shifts, shiftIndex);\n\n                                                        return (\n                                                            <Card\n                                                                key={`shift-${dayIndex}-${shiftIndex}-${shift.start_time}-${shift.end_time}`}\n                                                                className=\"bg-muted/50 mb-4 transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]\"\n                                                            >\n                                                                <CardHeader className=\"flex flex-col space-y-2\">\n                                                                    <div className=\"flex items-center\">\n                                                                        <Label className=\"text-md font-semibold\">Turno {shiftIndex + 1}</Label>\n                                                                    </div>\n                                                                    <div className=\"flex items-center space-x-2\">\n                                                                        <div className=\"flex items-center space-x-2\">\n                                                                            {/* Seletor de horário de início */}\n                                                                            <TimeSelect\n                                                                                value={shift.start_time}\n                                                                                onChange={(value: string) => {\n                                                                                    const newSchedules = [...data.schedules];\n                                                                                    newSchedules[dayIndex].shifts[shiftIndex].start_time = value;\n                                                                                    setData('schedules', newSchedules);\n                                                                                }}\n                                                                            />\n                                                                            <span className=\"text-muted-foreground\">até</span>\n                                                                            {/* Seletor de horário de término */}\n                                                                            <TimeSelect\n                                                                                value={shift.end_time}\n                                                                                onChange={(value: string) => {\n                                                                                    const newSchedules = [...data.schedules];\n                                                                                    newSchedules[dayIndex].shifts[shiftIndex].end_time = value;\n                                                                                    setData('schedules', newSchedules);\n                                                                                }}\n                                                                            />\n                                                                            {/* Botão para remover turno */}\n                                                                            <Button\n                                                                                type=\"button\"\n                                                                                variant=\"ghost\"\n                                                                                size=\"icon\"\n                                                                                onClick={() => removeShift(dayIndex, shiftIndex)}\n                                                                                className=\"h-10 w-10\"\n                                                                            >\n                                                                                <Trash2 className=\"text-destructive h-4 w-4\" />\n                                                                            </Button>\n                                                                        </div>\n                                                                        {overlappingShifts.length > 0 && (\n                                                                            <Alert\n                                                                                variant=\"destructive\"\n                                                                                className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                            >\n                                                                                <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                                <AlertDescription className=\"text-sm\">\n                                                                                    Este turno está sobrepondo com{' '}\n                                                                                    {overlappingShifts.length === 1 ? 'o turno' : 'os turnos'}{' '}\n                                                                                    {overlappingShifts.map((i) => i + 1).join(', ')}\n                                                                                </AlertDescription>\n                                                                            </Alert>\n                                                                        )}\n                                                                    </div>\n                                                                </CardHeader>\n                                                                <CardContent className=\"-mt-2 space-y-2\">\n                                                                    <div className=\"grid grid-cols-1 gap-2\">\n                                                                        {/* Seção de intervalos */}\n                                                                        <div className=\"space-y-0.5 pl-4\">\n                                                                            <div className=\"mb-2 flex items-center justify-between\">\n                                                                                <Label className=\"ml-2 pt-2 text-base font-medium\">Intervalos</Label>\n                                                                                {/* Botão para adicionar intervalo */}\n                                                                                <Button\n                                                                                    type=\"button\"\n                                                                                    variant=\"outline\"\n                                                                                    size=\"sm\"\n                                                                                    onClick={() => addBreak(dayIndex, shiftIndex)}\n                                                                                >\n                                                                                    <Plus className=\"mr-2 h-4 w-4\" />\n                                                                                    Adicionar Intervalo\n                                                                                </Button>\n                                                                            </div>\n                                                                            {shift.breaks.length === 0 ? (\n                                                                                <Card className=\"bg-background shadow-none\">\n                                                                                    <CardContent className=\"-mt-3 -mb-3 ml-2 flex items-start space-x-2 px-2 py-0\">\n                                                                                        <div className=\"bg-muted -mt-0.75 flex size-8 items-center justify-center rounded-full\">\n                                                                                            <Clock className=\"text-muted-foreground size-4\" />\n                                                                                        </div>\n                                                                                        <div className=\"flex flex-col py-0.5\">\n                                                                                            <h3 className=\"text-base font-medium\">\n                                                                                                Nenhum intervalo adicionado\n                                                                                            </h3>\n                                                                                            <p className=\"text-muted-foreground text-sm\">\n                                                                                                Adicione intervalos para este turno.\n                                                                                            </p>\n                                                                                        </div>\n                                                                                    </CardContent>\n                                                                                </Card>\n                                                                            ) : (\n                                                                                <div className=\"space-y-2\">\n                                                                                    {/* Lista de intervalos */}\n                                                                                    {shift.breaks.map((breakTime, breakIndex) => {\n                                                                                        const isValidInShift = isBreakValid(shift, breakTime);\n                                                                                        const isOverlapping =\n                                                                                            isValidInShift &&\n                                                                                            isBreakOverlapping(shift, breakTime, breakIndex);\n\n                                                                                        return (\n                                                                                            <Card\n                                                                                                key={`break-${dayIndex}-${shiftIndex}-${breakIndex}-${breakTime.start_time}-${breakTime.end_time}`}\n                                                                                                className=\"bg-background shadow-none\"\n                                                                                            >\n                                                                                                <CardContent className=\"-mt-3 -mb-3 ml-1 flex items-center space-x-2 px-2\">\n                                                                                                    <div className=\"flex items-center space-x-2\">\n                                                                                                        {/* Seletor de horário de início do intervalo */}\n                                                                                                        <TimeSelect\n                                                                                                            value={breakTime.start_time}\n                                                                                                            onChange={(value: string) =>\n                                                                                                                updateBreak(\n                                                                                                                    dayIndex,\n                                                                                                                    shiftIndex,\n                                                                                                                    breakIndex,\n                                                                                                                    'start_time',\n                                                                                                                    value,\n                                                                                                                )\n                                                                                                            }\n                                                                                                        />\n                                                                                                        <span className=\"text-muted-foreground\">\n                                                                                                            até\n                                                                                                        </span>\n                                                                                                        {/* Seletor de horário de término do intervalo */}\n                                                                                                        <TimeSelect\n                                                                                                            value={breakTime.end_time}\n                                                                                                            onChange={(value: string) =>\n                                                                                                                updateBreak(\n                                                                                                                    dayIndex,\n                                                                                                                    shiftIndex,\n                                                                                                                    breakIndex,\n                                                                                                                    'end_time',\n                                                                                                                    value,\n                                                                                                                )\n                                                                                                            }\n                                                                                                        />\n                                                                                                        {/* Botão para remover intervalo */}\n                                                                                                        <Button\n                                                                                                            type=\"button\"\n                                                                                                            variant=\"ghost\"\n                                                                                                            size=\"icon\"\n                                                                                                            className=\"h-10 w-10\"\n                                                                                                            onClick={() =>\n                                                                                                                removeBreak(\n                                                                                                                    dayIndex,\n                                                                                                                    shiftIndex,\n                                                                                                                    breakIndex,\n                                                                                                                )\n                                                                                                            }\n                                                                                                        >\n                                                                                                            <Trash2 className=\"text-destructive h-4 w-4\" />\n                                                                                                        </Button>\n                                                                                                    </div>\n                                                                                                    {!isValidInShift && (\n                                                                                                        <Alert\n                                                                                                            variant=\"destructive\"\n                                                                                                            className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                                                        >\n                                                                                                            <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                                                            <AlertDescription className=\"text-sm\">\n                                                                                                                O intervalo deve estar dentro do\n                                                                                                                horário do turno\n                                                                                                            </AlertDescription>\n                                                                                                        </Alert>\n                                                                                                    )}\n                                                                                                    {isOverlapping && (\n                                                                                                        <Alert\n                                                                                                            variant=\"destructive\"\n                                                                                                            className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                                                        >\n                                                                                                            <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                                                            <AlertDescription className=\"text-sm\">\n                                                                                                                Este intervalo está sobrepondo com\n                                                                                                                outro intervalo do turno\n                                                                                                            </AlertDescription>\n                                                                                                        </Alert>\n                                                                                                    )}\n                                                                                                </CardContent>\n                                                                                            </Card>\n                                                                                        );\n                                                                                    })}\n                                                                                </div>\n                                                                            )}\n                                                                        </div>\n                                                                    </div>\n                                                                </CardContent>\n                                                            </Card>\n                                                        );\n                                                    })\n                                                )}\n                                            </TabsContent>\n                                        ))}\n                                    </Tabs>\n\n                                    {/* Seção de visualização */}\n                                    <div className=\"space-y-4\">\n                                        {/* Seletor de modo de visualização */}\n                                        <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'timeline' | 'table')}>\n                                            <TabsList className=\"grid w-[200px] grid-cols-2\">\n                                                <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\n                                                    <Clock className=\"h-4 w-4\" />\n                                                    Timeline\n                                                </TabsTrigger>\n                                                <TabsTrigger value=\"table\" className=\"flex items-center gap-2\">\n                                                    <Table className=\"h-4 w-4\" />\n                                                    Tabela\n                                                </TabsTrigger>\n                                            </TabsList>\n                                        </Tabs>\n\n                                        {/* Visualização dos turnos */}\n                                        <div className=\"relative\">\n                                            {/* Visualização em timeline */}\n                                            <div\n                                                className={`transition-opacity duration-300 ${viewMode === 'timeline' ? 'opacity-100' : 'pointer-events-none absolute inset-0 opacity-0'}`}\n                                            >\n                                                <Card>\n                                                    <CardHeader>\n                                                        <CardTitle>Visualização dos Turnos</CardTitle>\n                                                    </CardHeader>\n                                                    <CardContent>\n                                                        <ShiftCalendarView schedules={data.schedules} />\n                                                    </CardContent>\n                                                </Card>\n                                            </div>\n                                            {/* Visualização em tabela */}\n                                            <div\n                                                className={`transition-opacity duration-300 ${viewMode === 'table' ? 'opacity-100' : 'pointer-events-none absolute inset-0 opacity-0'}`}\n                                            >\n                                                <Card>\n                                                    <CardHeader>\n                                                        <CardTitle>Visão Geral Semanal</CardTitle>\n                                                    </CardHeader>\n                                                    <CardContent>\n                                                        <ShiftTableView schedules={data.schedules} />\n                                                    </CardContent>\n                                                </Card>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"flex justify-end gap-3 border-t pt-6\">\n                                <Button type=\"button\" variant=\"outline\" onClick={handleCancel} disabled={processing}>\n                                    Cancelar\n                                </Button>\n                                <Button type=\"submit\" disabled={processing}>\n                                    {processing ? (initialShift ? 'Atualizando...' : 'Criando...') : 'Salvar'}\n                                </Button>\n                            </div>\n                        </form>\n                    </SheetContent>\n                </Sheet>\n\n                {/* Confirmation Dialog for Affected Assets */}\n                <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n                    <DialogContent className=\"flex max-h-[80vh] max-w-2xl flex-col overflow-hidden\">\n                        <DialogHeader>\n                            <DialogTitle className=\"flex items-center gap-2\">\n                                <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                                Confirmação de Atualização de Turno\n                            </DialogTitle>\n                            <DialogDescription>\n                                Esta alteração afetará {affectedAssets.length} {affectedAssets.length === 1 ? 'ativo' : 'ativos'}. Escolha como deseja\n                                proceder:\n                            </DialogDescription>\n                        </DialogHeader>\n\n                        <div className=\"my-4 space-y-4\">\n                            {/* Update Mode Selection */}\n                            <div className=\"space-y-3\">\n                                <div className=\"flex items-start space-x-3\">\n                                    <input\n                                        type=\"radio\"\n                                        id=\"update-all\"\n                                        name=\"update-mode\"\n                                        value=\"all\"\n                                        checked={updateMode === 'all'}\n                                        onChange={() => {\n                                            setUpdateMode('all');\n                                            setSelectedAssetIds([]);\n                                        }}\n                                        className=\"mt-1\"\n                                    />\n                                    <label htmlFor=\"update-all\" className=\"cursor-pointer\">\n                                        <div className=\"font-medium\">Atualizar todos os ativos</div>\n                                        <div className=\"text-muted-foreground text-sm\">\n                                            O turno existente será atualizado e todos os {affectedAssets.length} ativos continuarão usando este turno.\n                                        </div>\n                                    </label>\n                                </div>\n\n                                <div className=\"flex items-start space-x-3\">\n                                    <input\n                                        type=\"radio\"\n                                        id=\"update-selected\"\n                                        name=\"update-mode\"\n                                        value=\"selected\"\n                                        checked={updateMode === 'selected'}\n                                        onChange={() => {\n                                            setUpdateMode('selected');\n                                            // Select all assets by default when switching to this mode\n                                            setSelectedAssetIds(affectedAssets.map((a) => a.id));\n                                        }}\n                                        className=\"mt-1\"\n                                    />\n                                    <label htmlFor=\"update-selected\" className=\"cursor-pointer\">\n                                        <div className=\"font-medium\">Criar cópia do turno para ativos selecionados</div>\n                                        <div className=\"text-muted-foreground text-sm\">\n                                            Um novo turno será criado com as alterações e apenas os ativos selecionados serão associados a ele.\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n\n                            {/* Asset List */}\n                            <div className=\"max-h-[300px] overflow-y-auto rounded-lg border p-2\">\n                                {updateMode === 'selected' && (\n                                    <div className=\"mb-2 flex items-center justify-between border-b pb-2\">\n                                        <span className=\"text-sm font-medium\">Selecione os ativos para atualizar:</span>\n                                        <Button\n                                            type=\"button\"\n                                            variant=\"ghost\"\n                                            size=\"sm\"\n                                            onClick={() => {\n                                                if (selectedAssetIds.length === affectedAssets.length) {\n                                                    setSelectedAssetIds([]);\n                                                } else {\n                                                    setSelectedAssetIds(affectedAssets.map((a) => a.id));\n                                                }\n                                            }}\n                                        >\n                                            {selectedAssetIds.length === affectedAssets.length ? 'Desmarcar Todos' : 'Selecionar Todos'}\n                                        </Button>\n                                    </div>\n                                )}\n                                <div className=\"space-y-2\">\n                                    {affectedAssets.map((asset) => (\n                                        <Card key={asset.id} className=\"p-3\">\n                                            <div className=\"flex items-start justify-between\">\n                                                <div className=\"flex flex-1 items-start space-x-3\">\n                                                    {updateMode === 'selected' && (\n                                                        <Checkbox\n                                                            checked={selectedAssetIds.includes(asset.id)}\n                                                            onCheckedChange={(checked) => {\n                                                                if (checked) {\n                                                                    setSelectedAssetIds([...selectedAssetIds, asset.id]);\n                                                                } else {\n                                                                    setSelectedAssetIds(selectedAssetIds.filter((id) => id !== asset.id));\n                                                                }\n                                                            }}\n                                                            className=\"mt-1\"\n                                                        />\n                                                    )}\n                                                    <div className=\"flex-1 space-y-1\">\n                                                        <div className=\"font-medium\">{asset.tag}</div>\n                                                        {asset.description && (\n                                                            <div className=\"text-muted-foreground text-sm\">{asset.description}</div>\n                                                        )}\n                                                        <div className=\"text-muted-foreground space-x-2 text-xs\">\n                                                            {asset.asset_type && <span>Tipo: {asset.asset_type}</span>}\n                                                            {asset.plant && <span>• Planta: {asset.plant}</span>}\n                                                            {asset.area && <span>• Área: {asset.area}</span>}\n                                                            {asset.sector && <span>• Setor: {asset.sector}</span>}\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                <div className=\"ml-4 text-right\">\n                                                    <div className=\"text-sm font-medium\">Horímetro Atual</div>\n                                                    <div className=\"text-lg\">{asset.current_runtime_hours.toFixed(2)}h</div>\n                                                </div>\n                                            </div>\n                                        </Card>\n                                    ))}\n                                </div>\n                            </div>\n\n                            {updateMode === 'selected' && (\n                                <div className=\"text-muted-foreground text-sm\">\n                                    {selectedAssetIds.length} de {affectedAssets.length} ativos selecionados\n                                </div>\n                            )}\n\n                            {/* Runtime Recording Note */}\n                            <Alert>\n                                <AlertCircle className=\"h-4 w-4\" />\n                                <AlertDescription className=\"text-sm\">\n                                    O horímetro atual será registrado automaticamente para {updateMode === 'all' ? 'todos os' : 'os'} ativos{' '}\n                                    {updateMode === 'selected' ? 'selecionados' : 'afetados'} antes da alteração, preservando o histórico de operação.\n                                </AlertDescription>\n                            </Alert>\n                        </div>\n\n                        <DialogFooter>\n                            <Button variant=\"outline\" onClick={handleCancelUpdate} disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button\n                                onClick={handleConfirmUpdate}\n                                disabled={processing || (updateMode === 'selected' && selectedAssetIds.length === 0)}\n                            >\n                                {processing ? 'Processando...' : updateMode === 'all' ? 'Atualizar Todos' : 'Criar Cópia e Atualizar'}\n                            </Button>\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n            </>\n        );\n    },\n);\n\nCreateShiftSheet.displayName = 'CreateShiftSheet';\n\nexport default CreateShiftSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/EditRoutineSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 15,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 15,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                669,
                                672
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                669,
                                672
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 120,
                "column": 35,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 120,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3980,
                                3983
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3980,
                                3983
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 143,
                "column": 39,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 143,
                "endColumn": 42,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                5014,
                                5017
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                5014,
                                5017
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 150,
                "column": 35,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 150,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                5378,
                                5381
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                5378,
                                5381
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 182,
                "column": 56,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 182,
                "endColumn": 59,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6525,
                                6528
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6525,
                                6528
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 5,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { router } from '@inertiajs/react';\nimport React from 'react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Sheet, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\nimport { Textarea } from '@/components/ui/textarea';\nimport { FileText, Save, X } from 'lucide-react';\nimport { Routine } from './RoutineList';\n\ninterface RoutineForm {\n    [key: string]: any;\n    name: string;\n    trigger_hours: number;\n    status: 'Active' | 'Inactive';\n    description: string;\n}\n\ninterface EditRoutineSheetProps {\n    isOpen?: boolean;\n    onOpenChange?: (open: boolean) => void;\n    onSuccess?: (routine: Routine) => void;\n    routine?: Routine;\n    isNew?: boolean;\n    assetId?: number;\n    // Props para SheetTrigger\n    triggerText?: string;\n    triggerVariant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';\n    showTrigger?: boolean;\n    triggerRef?: React.RefObject<HTMLButtonElement | null>;\n    triggerIcon?: React.ReactNode;\n}\n\nconst routineStatuses = [\n    { value: 'Active', label: 'Ativo' },\n    { value: 'Inactive', label: 'Inativo' },\n];\n\nconst EditRoutineSheet: React.FC<EditRoutineSheetProps> = ({\n    isOpen,\n    onOpenChange,\n    onSuccess,\n    routine,\n    isNew = false,\n    assetId,\n    triggerText = 'Editar Rotina',\n    triggerVariant = 'outline',\n    showTrigger = false,\n    triggerRef,\n    triggerIcon,\n}) => {\n    const [data, setData] = React.useState<RoutineForm>({\n        name: routine?.name || '',\n        trigger_hours: routine?.trigger_hours || 0,\n        status: routine?.status || 'Active',\n        description: routine?.description || '',\n    });\n\n    const [processing, setProcessing] = React.useState(false);\n    const [errors, setErrors] = React.useState<Partial<Record<keyof RoutineForm, string>>>({});\n\n    const [internalSheetOpen, setInternalSheetOpen] = React.useState(false);\n\n    // Determina se deve usar controle interno ou externo\n    const sheetOpen = isOpen !== undefined ? isOpen : internalSheetOpen;\n    const setSheetOpen = isOpen !== undefined && onOpenChange ? onOpenChange : setInternalSheetOpen;\n\n    // Atualiza os dados quando a routine muda\n    React.useEffect(() => {\n        if (routine) {\n            setData({\n                name: routine.name || '',\n                trigger_hours: routine.trigger_hours || 0,\n                status: routine.status || 'Active',\n                description: routine.description || '',\n            });\n        }\n    }, [routine]);\n\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        // Validação básica\n        const newErrors: Partial<Record<keyof RoutineForm, string>> = {};\n\n        if (!data.name.trim()) {\n            newErrors.name = 'Nome da rotina é obrigatório';\n        }\n\n        if (data.trigger_hours <= 0) {\n            newErrors.trigger_hours = 'Intervalo deve ser maior que 0';\n        }\n\n        if (Object.keys(newErrors).length > 0) {\n            setErrors(newErrors);\n            return;\n        }\n\n        setProcessing(true);\n        setErrors({});\n\n        if (isNew) {\n            // Criar nova rotina usando RoutineController\n            if (!assetId) {\n                toast.error('ID do ativo não fornecido');\n                setProcessing(false);\n                return;\n            }\n\n            router.post(route('maintenance.assets.routines.store', assetId), data, {\n                onSuccess: () => {\n                    toast.success('Rotina criada com sucesso!');\n                    setProcessing(false);\n                    setSheetOpen(false);\n                    // Backend will redirect to routines tab with newRoutineId\n                },\n                onError: (errors: any) => {\n                    console.error('Erro ao criar rotina:', errors);\n                    if (errors.name) setErrors((prev) => ({ ...prev, name: errors.name }));\n                    if (errors.trigger_hours) setErrors((prev) => ({ ...prev, trigger_hours: errors.trigger_hours }));\n                    toast.error('Erro ao criar rotina. Verifique os campos e tente novamente.');\n                    setProcessing(false);\n                },\n            });\n        } else {\n            // Atualizar rotina existente usando RoutineController\n            if (!routine?.id) {\n                toast.error('ID da rotina não encontrado');\n                setProcessing(false);\n                return;\n            }\n\n            if (!assetId) {\n                toast.error('ID do ativo não fornecido');\n                setProcessing(false);\n                return;\n            }\n\n            router.put(route('maintenance.assets.routines.update', { asset: assetId, routine: routine.id }), data, {\n                onSuccess: (response: any) => {\n                    const savedRoutine: Routine = response.props?.routine || { ...routine, ...data };\n                    toast.success('Rotina atualizada com sucesso!');\n                    setProcessing(false);\n                    setSheetOpen(false);\n                    onSuccess?.(savedRoutine);\n                },\n                onError: (errors: any) => {\n                    console.error('Erro ao atualizar rotina:', errors);\n                    if (errors.name) setErrors((prev) => ({ ...prev, name: errors.name }));\n                    if (errors.trigger_hours) setErrors((prev) => ({ ...prev, trigger_hours: errors.trigger_hours }));\n                    toast.error('Erro ao atualizar rotina. Verifique os campos e tente novamente.');\n                    setProcessing(false);\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        // Resetar dados para o estado original\n        if (routine) {\n            setData({\n                name: routine.name || '',\n                trigger_hours: routine.trigger_hours || 0,\n                status: routine.status || 'Active',\n                description: routine.description || '',\n            });\n        } else {\n            setData({\n                name: '',\n                trigger_hours: 0,\n                status: 'Active',\n                description: '',\n            });\n        }\n        setErrors({});\n        setSheetOpen(false);\n    };\n\n    const updateData = (key: keyof RoutineForm, value: any) => {\n        setData((prev) => ({ ...prev, [key]: value }));\n        // Limpar erro do campo quando ele é alterado\n        if (errors[key]) {\n            setErrors((prev) => ({ ...prev, [key]: undefined }));\n        }\n    };\n\n    return (\n        <Sheet open={sheetOpen} onOpenChange={setSheetOpen}>\n            {showTrigger && (\n                <SheetTrigger asChild>\n                    <Button variant={triggerVariant} ref={triggerRef}>\n                        {triggerIcon}\n                        {triggerText}\n                    </Button>\n                </SheetTrigger>\n            )}\n            <SheetContent className=\"sm:max-w-lg\">\n                <SheetHeader>\n                    <SheetTitle className=\"flex items-center gap-2\">\n                        <FileText className=\"h-5 w-5\" />\n                        {isNew ? 'Nova Rotina de Manutenção' : 'Editar Rotina'}\n                    </SheetTitle>\n                    <SheetDescription>{isNew ? 'Configure uma nova rotina de manutenção' : 'Atualize os dados da rotina'}</SheetDescription>\n                </SheetHeader>\n\n                <form onSubmit={handleSubmit} className=\"m-4 space-y-6\">\n                    <div className=\"space-y-4\">\n                        {/* Nome da Rotina */}\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"name\">Nome da Rotina *</Label>\n                            <Input\n                                id=\"name\"\n                                value={data.name}\n                                onChange={(e) => updateData('name', e.target.value)}\n                                placeholder=\"Ex: Verificação mensal de óleo\"\n                                className={errors.name ? 'border-red-500' : ''}\n                            />\n                            {errors.name && <p className=\"text-sm text-red-500\">{errors.name}</p>}\n                        </div>\n\n                        {/* Intervalo de Acionamento */}\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"trigger_hours\">Intervalo de Acionamento (horas) *</Label>\n                            <Input\n                                id=\"trigger_hours\"\n                                type=\"number\"\n                                min=\"1\"\n                                value={data.trigger_hours}\n                                onChange={(e) => updateData('trigger_hours', parseInt(e.target.value) || 0)}\n                                placeholder=\"Ex: 720 (30 dias)\"\n                                className={errors.trigger_hours ? 'border-red-500' : ''}\n                            />\n                            {errors.trigger_hours && <p className=\"text-sm text-red-500\">{errors.trigger_hours}</p>}\n                        </div>\n\n                        {/* Status */}\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"status\">Status</Label>\n                            <Select value={data.status} onValueChange={(value) => updateData('status', value as 'Active' | 'Inactive')}>\n                                <SelectTrigger id=\"status\">\n                                    <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {routineStatuses.map((status) => (\n                                        <SelectItem key={status.value} value={status.value}>\n                                            {status.label}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </div>\n\n                        {/* Descrição */}\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"description\">Descrição</Label>\n                            <Textarea\n                                id=\"description\"\n                                value={data.description}\n                                onChange={(e) => updateData('description', e.target.value)}\n                                placeholder=\"Descreva os detalhes desta rotina de manutenção...\"\n                                rows={3}\n                            />\n                        </div>\n                    </div>\n\n                    <SheetFooter className=\"flex justify-end gap-2\">\n                        <Button type=\"submit\" disabled={processing || !data.name || data.trigger_hours <= 0}>\n                            <Save className=\"mr-1 h-4 w-4\" />\n                            {processing ? 'Salvando...' : 'Salvar'}\n                        </Button>\n                        <Button type=\"button\" variant=\"outline\" onClick={handleCancel} disabled={processing}>\n                            <X className=\"mr-1 h-4 w-4\" />\n                            Cancelar\n                        </Button>\n                    </SheetFooter>\n                </form>\n            </SheetContent>\n        </Sheet>\n    );\n};\n\nexport default EditRoutineSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/InlineRoutineForm.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 37,
                "column": 15,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 37,
                "endColumn": 18,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                970,
                                973
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                970,
                                973
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'initializeExecution'. Either include it or remove the dependency array.",
                "line": 63,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 63,
                "endColumn": 20,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [initializeExecution, routine.id]",
                        "fix": {
                            "range": [
                                2016,
                                2028
                            ],
                            "text": "[initializeExecution, routine.id]"
                        }
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 117,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 117,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                4200,
                                4203
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                4200,
                                4203
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 149,
                "column": 65,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 149,
                "endColumn": 68,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                5199,
                                5202
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                5199,
                                5202
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'_' is assigned a value but never used.",
                "line": 166,
                "column": 32,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 166,
                "endColumn": 33
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 229,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 229,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                8342,
                                8345
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                8342,
                                8345
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 268,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 268,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9742,
                                9745
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9742,
                                9745
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 297,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 297,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                10780,
                                10783
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                10780,
                                10783
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 7,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { TaskBaseCard, TaskContent } from '@/components/tasks';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { cn } from '@/lib/utils';\nimport { Task, TaskState, TaskTypes } from '@/types/task';\nimport { router } from '@inertiajs/react';\nimport axios from 'axios';\nimport { AlertCircle, CheckCircle2, ClipboardCheck, Loader2, X } from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\ninterface RoutineData {\n    id: number;\n    name: string;\n    form?: {\n        id: number;\n        tasks: Task[];\n    };\n}\n\ninterface ExecutionData {\n    id: number;\n    status: string;\n    form_execution?: {\n        id: number;\n        form_version?: {\n            id: number;\n            tasks: Task[];\n        };\n    };\n}\n\ninterface TaskResponseData {\n    id: number;\n    form_task_id: string;\n    response: any;\n    is_completed: boolean;\n}\n\ninterface Props {\n    routine: RoutineData;\n    assetId: number;\n    onClose?: () => void;\n    onComplete?: () => void;\n}\n\nexport default function InlineRoutineForm({ routine, assetId, onClose, onComplete }: Props) {\n    const [tasks, setTasks] = useState<Task[]>([]);\n    const [currentTaskIndex, setCurrentTaskIndex] = useState(0);\n    const [execution, setExecution] = useState<ExecutionData | null>(null);\n    const [taskResponses, setTaskResponses] = useState<Record<string, TaskResponseData>>({});\n    const [loading, setLoading] = useState(true);\n    const [saving, setSaving] = useState(false);\n    const [completing, setCompleting] = useState(false);\n    const [progress, setProgress] = useState({ total: 0, completed: 0, percentage: 0 });\n    const [taskIcons, setTaskIcons] = useState<Record<string, React.ReactNode>>({});\n    const taskRefs = useRef<Record<number, HTMLDivElement | null>>({});\n\n    // Initialize or get existing execution\n    useEffect(() => {\n        initializeExecution();\n    }, [routine.id]);\n\n    const initializeExecution = async () => {\n        try {\n            setLoading(true);\n            const response = await axios.post(\n                route('maintenance.assets.routines.inline-execution.start', {\n                    asset: assetId,\n                    routine: routine.id,\n                }),\n            );\n\n            const executionData = response.data.execution;\n            const formExecution = response.data.form_execution;\n            const existingResponses = response.data.task_responses || [];\n\n            setExecution(executionData);\n\n            // Use form version tasks if available, otherwise use routine form tasks\n            const tasksToUse = formExecution?.form_version?.tasks || routine.form?.tasks || [];\n            setTasks(\n                tasksToUse.map((task: Task) => ({\n                    ...task,\n                    state: TaskState.Viewing,\n                })),\n            );\n\n            // Process existing responses\n            const responsesMap: Record<string, TaskResponseData> = {};\n            existingResponses.forEach((response: TaskResponseData) => {\n                responsesMap[response.form_task_id] = response;\n            });\n            setTaskResponses(responsesMap);\n\n            // Calculate progress\n            const total = tasksToUse.length;\n            const completed = Object.keys(responsesMap).length;\n            setProgress({\n                total,\n                completed,\n                percentage: total > 0 ? Math.round((completed / total) * 100) : 0,\n            });\n\n            // Find first incomplete task\n            const firstIncompleteIndex = tasksToUse.findIndex((task: Task) => !responsesMap[task.id]);\n            const initialIndex = firstIncompleteIndex >= 0 ? firstIncompleteIndex : 0;\n            setCurrentTaskIndex(initialIndex);\n\n            // Set the initial task to responding state\n            const initialTasks = tasksToUse.map((task: Task, idx: number) => ({\n                ...task,\n                state: idx === initialIndex ? TaskState.Responding : TaskState.Viewing,\n            }));\n            setTasks(initialTasks);\n        } catch (error: any) {\n            console.error('Error initializing execution:', error);\n            toast.error('Erro ao iniciar execução', {\n                description: error.response?.data?.error || 'Tente novamente',\n            });\n            if (onClose) onClose();\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const updateTaskIcon = (taskId: string, icon: React.ReactNode) => {\n        setTaskIcons((prev) => ({\n            ...prev,\n            [taskId]: icon,\n        }));\n    };\n\n    const scrollToTask = (index: number) => {\n        setTimeout(() => {\n            taskRefs.current[index]?.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center',\n            });\n        }, 100);\n    };\n\n    const handleTaskUpdate = async (taskId: string, updatedTask: Task) => {\n        // Update task state locally\n        setTasks(tasks.map((t) => (t.id === taskId ? updatedTask : t)));\n    };\n\n    const handleTaskSave = async (taskId: string, responseData: any) => {\n        if (!execution || saving) return;\n\n        setSaving(true);\n        try {\n            const formData = new FormData();\n            formData.append('task_id', taskId);\n\n            // Ensure we have some response data\n            const dataToSend = responseData || {};\n\n            // Handle different response types\n            if (dataToSend.files && dataToSend.files.length > 0) {\n                dataToSend.files.forEach((file: File, index: number) => {\n                    formData.append(`files[${index}]`, file);\n                });\n                // Remove files from response data to avoid sending as JSON\n                const { files: _, ...restData } = dataToSend;\n                // Send response as array fields instead of JSON string\n                Object.keys(restData).forEach((key) => {\n                    formData.append(`response[${key}]`, restData[key]);\n                });\n            } else {\n                // Send response as array fields instead of JSON string\n                Object.keys(dataToSend).forEach((key) => {\n                    formData.append(`response[${key}]`, dataToSend[key]);\n                });\n            }\n\n            const response = await axios.post(\n                route('maintenance.assets.routines.inline-execution.save-task', {\n                    asset: assetId,\n                    routine: routine.id,\n                    execution: execution.id,\n                }),\n                formData,\n                {\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                    },\n                },\n            );\n\n            // Update task responses\n            const taskResponse = response.data.task_response;\n            setTaskResponses((prev) => ({\n                ...prev,\n                [taskId]: {\n                    id: taskResponse.id,\n                    form_task_id: taskId,\n                    response: taskResponse.response,\n                    is_completed: taskResponse.is_completed,\n                },\n            }));\n\n            // Update progress\n            setProgress(response.data.progress);\n\n            // Mark task as completed visually\n            setTasks(tasks.map((t) => (t.id === taskId ? { ...t, state: TaskState.Viewing, completed: true } : t)));\n\n            toast.success('Tarefa salva com sucesso');\n\n            // Auto-advance to next task if not the last one\n            if (currentTaskIndex < tasks.length - 1) {\n                const nextIndex = currentTaskIndex + 1;\n                setCurrentTaskIndex(nextIndex);\n                scrollToTask(nextIndex);\n\n                // Set next task to responding state\n                setTasks(\n                    tasks.map((t, idx) => ({\n                        ...t,\n                        state: idx === nextIndex ? TaskState.Responding : TaskState.Viewing,\n                    })),\n                );\n            } else if (response.data.all_tasks_completed) {\n                // All tasks completed, automatically complete the routine\n                handleCompleteExecution();\n            }\n        } catch (error: any) {\n            console.error('Error saving task:', error);\n\n            // Check for validation errors\n            if (error.response?.status === 422 && error.response?.data?.errors) {\n                const errors = error.response.data.errors;\n                const errorMessages = Object.values(errors).flat().join(', ');\n                toast.error('Erro de validação', {\n                    description: errorMessages,\n                });\n            } else {\n                toast.error('Erro ao salvar tarefa', {\n                    description: error.response?.data?.message || error.response?.data?.error || 'Tente novamente',\n                });\n            }\n        } finally {\n            setSaving(false);\n        }\n    };\n\n    const handleCompleteExecution = async () => {\n        if (!execution || completing) return;\n\n        setCompleting(true);\n        try {\n            await axios.post(\n                route('maintenance.assets.routines.inline-execution.complete', {\n                    asset: assetId,\n                    routine: routine.id,\n                    execution: execution.id,\n                }),\n            );\n\n            toast.success('Rotina concluída com sucesso!');\n            if (onComplete) onComplete();\n            if (onClose) onClose();\n\n            // Reload the page to refresh the routine list\n            router.reload();\n        } catch (error: any) {\n            console.error('Error completing execution:', error);\n            if (error.response?.data?.missing_tasks) {\n                toast.error('Existem tarefas obrigatórias não preenchidas', {\n                    description: error.response.data.missing_tasks.join(', '),\n                });\n            } else {\n                toast.error('Erro ao concluir rotina', {\n                    description: error.response?.data?.error || 'Tente novamente',\n                });\n            }\n        } finally {\n            setCompleting(false);\n        }\n    };\n\n    const handleCancelExecution = async () => {\n        if (!execution) return;\n\n        try {\n            await axios.post(\n                route('maintenance.assets.routines.inline-execution.cancel', {\n                    asset: assetId,\n                    routine: routine.id,\n                    execution: execution.id,\n                }),\n            );\n            toast.info('Execução cancelada');\n            if (onClose) onClose();\n        } catch (error: any) {\n            console.error('Error canceling execution:', error);\n            toast.error('Erro ao cancelar execução');\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"flex items-center justify-center py-12\">\n                <Loader2 className=\"text-muted-foreground h-8 w-8 animate-spin\" />\n            </div>\n        );\n    }\n\n    if (!execution || tasks.length === 0) {\n        return (\n            <Card className=\"bg-muted/30\">\n                <CardContent className=\"flex flex-col items-center justify-center px-4 py-8 text-center\">\n                    <AlertCircle className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                    <h3 className=\"mb-2 text-lg font-medium\">Erro ao carregar formulário</h3>\n                    <p className=\"text-muted-foreground mb-4 text-sm\">Não foi possível carregar o formulário desta rotina.</p>\n                    <Button variant=\"outline\" onClick={onClose}>\n                        Fechar\n                    </Button>\n                </CardContent>\n            </Card>\n        );\n    }\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Header with progress */}\n            <div className=\"bg-background/95 sticky top-0 z-10 -mx-4 border-b px-4 pb-4 backdrop-blur-sm\">\n                <div className=\"mb-4 flex items-center justify-between\">\n                    <div>\n                        <h3 className=\"text-lg font-semibold\">Preenchendo: {routine.name}</h3>\n                        <p className=\"text-muted-foreground text-sm\">\n                            Tarefa {Math.min(currentTaskIndex + 1, tasks.length)} de {tasks.length}\n                        </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                        <Button variant=\"ghost\" size=\"sm\" onClick={handleCancelExecution} disabled={saving || completing}>\n                            <X className=\"mr-1 h-4 w-4\" />\n                            Cancelar\n                        </Button>\n                        {progress.percentage === 100 && (\n                            <Button size=\"sm\" onClick={handleCompleteExecution} disabled={completing}>\n                                {completing ? (\n                                    <>\n                                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                                        Concluindo...\n                                    </>\n                                ) : (\n                                    <>\n                                        <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                                        Concluir Rotina\n                                    </>\n                                )}\n                            </Button>\n                        )}\n                    </div>\n                </div>\n                <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">Progresso</span>\n                        <span className=\"font-medium\">{progress.percentage}%</span>\n                    </div>\n                    <Progress value={progress.percentage} className=\"h-2\" />\n                </div>\n            </div>\n\n            {/* Task list */}\n            <div className=\"space-y-4\">\n                {tasks.map((task, index) => {\n                    const taskType = TaskTypes.find((t) => t.value === task.type);\n                    const icon = taskIcons[task.id] || (taskType ? <taskType.icon className=\"size-5\" /> : <ClipboardCheck className=\"size-5\" />);\n                    const isCompleted = !!taskResponses[task.id];\n                    const isCurrent = index === currentTaskIndex;\n\n                    return (\n                        <div\n                            key={`task-${task.id}`}\n                            ref={(el) => {\n                                taskRefs.current[index] = el;\n                            }}\n                            className={cn(\n                                'transition-all duration-300',\n                                isCurrent && 'ring-primary rounded-lg ring-2 ring-offset-2',\n                                isCompleted && 'opacity-75',\n                            )}\n                        >\n                            <TaskBaseCard\n                                id={task.id}\n                                mode={task.state === TaskState.Responding ? 'respond' : 'preview'}\n                                icon={icon}\n                                title={task.description}\n                                isRequired={task.isRequired}\n                                onTaskUpdate={() => {}}\n                            >\n                                {isCompleted && (\n                                    <div className=\"mb-2 flex items-center gap-1 text-sm text-green-600\">\n                                        <CheckCircle2 className=\"h-4 w-4\" />\n                                        <span>Tarefa concluída</span>\n                                    </div>\n                                )}\n                                <TaskContent\n                                    task={task}\n                                    mode={task.state === TaskState.Responding ? 'respond' : 'preview'}\n                                    onUpdate={(updatedTask) => handleTaskUpdate(task.id, updatedTask)}\n                                    onIconChange={(newIcon) => updateTaskIcon(task.id, newIcon)}\n                                    onSave={(responseData) => handleTaskSave(task.id, responseData)}\n                                    showSaveButton={task.state === TaskState.Responding && !isCompleted}\n                                    disabled={saving}\n                                    isLastTask={index === tasks.length - 1}\n                                />\n                            </TaskBaseCard>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/InlineRoutineFormEditor.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 50,
                "column": 28,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 50,
                "endColumn": 31,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1736,
                                1739
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1736,
                                1739
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 182,
                "column": 37,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 182,
                "endColumn": 40,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6457,
                                6460
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6457,
                                6460
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 186,
                "column": 35,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 186,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6547,
                                6550
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6547,
                                6550
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 3,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { TaskBaseCard, TaskContent } from '@/components/tasks';\nimport AddTaskButton from '@/components/tasks/AddTaskButton';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { DefaultMeasurement, Task, TaskOperations, TaskState, TaskType, TaskTypes } from '@/types/task';\nimport { UnitCategory } from '@/types/units';\nimport {\n    closestCenter,\n    defaultDropAnimationSideEffects,\n    DndContext,\n    DragOverlay,\n    KeyboardSensor,\n    MeasuringStrategy,\n    PointerSensor,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport { restrictToVerticalAxis, restrictToWindowEdges } from '@dnd-kit/modifiers';\nimport { arrayMove, SortableContext, sortableKeyboardCoordinates, verticalListSortingStrategy } from '@dnd-kit/sortable';\nimport { router } from '@inertiajs/react';\nimport { AlertCircle, ClipboardCheck, Save, Upload } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\nimport { FormStatusBadge } from '@/components/form-lifecycle';\n\ninterface RoutineData {\n    id: number;\n    name: string;\n    form?: {\n        id: number;\n        tasks: Task[];\n        isDraft?: boolean;\n        currentVersionId?: number | null;\n        has_draft_changes?: boolean;\n        current_version?: {\n            id?: number;\n            version_number: string;\n            published_at?: string;\n        };\n    };\n}\n\ninterface Props {\n    routine: RoutineData;\n    assetId: number;\n    onClose?: () => void;\n    onSuccess?: (formData: any) => void;\n}\n\nexport default function InlineRoutineFormEditor({ routine, assetId, onClose, onSuccess }: Props) {\n    const [tasks, setTasks] = useState<Task[]>(\n        (routine.form?.tasks || []).map((task) => ({\n            ...task,\n            state: TaskState.Previewing, // Set all tasks to Previewing state for the editor\n        })),\n    );\n    const [originalTasks] = useState<Task[]>(\n        (routine.form?.tasks || []).map((task) => ({\n            ...task,\n            state: TaskState.Previewing, // Set all tasks to Previewing state for the editor\n        })),\n    );\n    const [activeId, setActiveId] = useState<string | null>(null);\n    const [saving, setSaving] = useState(false);\n    const [publishing, setPublishing] = useState(false);\n    const [taskIcons, setTaskIcons] = useState<Record<string, React.ReactNode>>({});\n    const [hasDraftChanges, setHasDraftChanges] = useState(routine.form?.has_draft_changes || false);\n    const [showExitDialog, setShowExitDialog] = useState(false);\n    const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n\n    // Estados para última categoria e unidade selecionada\n    const [lastMeasurementCategory, setLastMeasurementCategory] = useState<UnitCategory>('Comprimento');\n    const [lastMeasurementUnit, setLastMeasurementUnit] = useState<string>('m');\n\n    // Check if form has a published version\n    const hasPublishedVersion = routine.form?.currentVersionId !== null && routine.form?.currentVersionId !== undefined;\n\n    // Track unsaved changes\n    useEffect(() => {\n        const tasksChanged = JSON.stringify(tasks) !== JSON.stringify(originalTasks);\n        setHasUnsavedChanges(tasksChanged);\n    }, [tasks, originalTasks]);\n\n    // Função para atualizar o ícone de uma tarefa específica\n    const updateTaskIcon = (taskId: string, icon: React.ReactNode) => {\n        setTaskIcons((prev) => ({\n            ...prev,\n            [taskId]: icon,\n        }));\n    };\n\n    // Funções utilitárias para gerenciamento de tarefas\n    const taskMethods = {\n        update: (index: number, operation: (task: Task) => Task) => {\n            const updatedTasks = [...tasks];\n            updatedTasks[index] = operation(updatedTasks[index]);\n            setTasks(updatedTasks);\n        },\n\n        add: (index: number, task: Task) => {\n            const existingIds = new Set(tasks.map((t) => t.id));\n            if (existingIds.has(task.id)) {\n                task = {\n                    ...task,\n                    id: TaskOperations.generateNextId(tasks),\n                };\n            }\n\n            const updatedTasks = [...tasks];\n            updatedTasks.splice(index + 1, 0, task);\n            setTasks(updatedTasks);\n        },\n\n        remove: (index: number) => {\n            const updatedTasks = [...tasks];\n            updatedTasks.splice(index, 1);\n            setTasks(updatedTasks);\n        },\n\n        createAt: (index: number, type?: TaskType, newTask?: Task) => {\n            if (!type && !newTask) return;\n\n            let taskToAdd: Task;\n\n            if (newTask) {\n                taskToAdd = newTask;\n                if (taskToAdd.type === 'measurement') {\n                    taskToAdd.measurement = {\n                        ...DefaultMeasurement,\n                        category: lastMeasurementCategory,\n                        unit: lastMeasurementUnit,\n                    };\n                }\n            } else if (type) {\n                taskToAdd = TaskOperations.createAtIndex(tasks, index, type);\n\n                if (type === 'measurement') {\n                    taskToAdd.measurement = {\n                        ...DefaultMeasurement,\n                        category: lastMeasurementCategory,\n                        unit: lastMeasurementUnit,\n                    };\n                }\n\n                if (type === 'code_reader') {\n                    taskToAdd.codeReaderType = 'barcode';\n                }\n            } else {\n                return;\n            }\n\n            taskMethods.add(index, taskToAdd);\n        },\n\n        setState: (index: number, state: TaskState) => {\n            taskMethods.update(index, (task) => ({\n                ...task,\n                state,\n            }));\n        },\n\n        getById: (id: string) => {\n            const taskId = parseInt(id.replace('task-', ''));\n            return tasks.find((task) => task.id === taskId.toString());\n        },\n    };\n\n    const sensors = useSensors(\n        useSensor(PointerSensor, {\n            activationConstraint: {\n                distance: 5,\n            },\n        }),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        }),\n    );\n\n    const handleDragStart = (event: any) => {\n        setActiveId(event.active.id);\n    };\n\n    const handleDragEnd = (event: any) => {\n        setActiveId(null);\n        const { active, over } = event;\n\n        if (active.id !== over?.id && over) {\n            setTasks((items) => {\n                const oldIndex = items.findIndex((item) => `task-${item.id}` === active.id);\n                const newIndex = items.findIndex((item) => `task-${item.id}` === over.id);\n\n                if (oldIndex !== -1 && newIndex !== -1) {\n                    return arrayMove(items, oldIndex, newIndex);\n                }\n                return items;\n            });\n        }\n    };\n\n    const handleDragCancel = () => {\n        setActiveId(null);\n    };\n\n    const handleSave = async () => {\n        setSaving(true);\n\n        const tasksToSave = tasks.map((task) => ({\n            ...task,\n            measurement: task.measurement\n                ? {\n                      ...task.measurement,\n                      name: task.measurement.name,\n                      min: task.measurement.min,\n                      target: task.measurement.target,\n                      max: task.measurement.max,\n                      unit: task.measurement.unit,\n                      category: task.measurement.category,\n                  }\n                : undefined,\n            options: task.options?.map((option) => option) || [],\n            instructionImages: task.instructionImages || [],\n        }));\n\n        router.post(\n            route('maintenance.assets.routines.forms.store', {\n                asset: assetId,\n                routine: routine.id,\n            }),\n            {\n                tasks: JSON.stringify(tasksToSave),\n            },\n            {\n                onSuccess: () => {\n                    toast.success('Rascunho salvo com sucesso!');\n                    setHasDraftChanges(true);\n                    setSaving(false);\n                    setHasUnsavedChanges(false);\n                    // Reload the page to show the saved draft tasks\n                    router.reload();\n                },\n                onError: () => {\n                    toast.error('Erro ao salvar formulário', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                    setSaving(false);\n                },\n            },\n        );\n    };\n\n    const handlePublish = async () => {\n        setPublishing(true);\n\n        router.post(\n            route('maintenance.assets.routines.forms.publish', {\n                asset: assetId,\n                routine: routine.id,\n            }),\n            {},\n            {\n                onSuccess: () => {\n                    toast.success('Formulário publicado com sucesso!');\n                    setHasDraftChanges(false);\n                    if (onSuccess) {\n                        onSuccess({ published: true });\n                    }\n                    // Reload the page to refresh the data\n                    router.reload();\n                },\n                onError: () => {\n                    toast.error('Erro ao publicar formulário');\n                    setPublishing(false);\n                },\n            },\n        );\n    };\n\n    const handleClose = () => {\n        if (hasUnsavedChanges) {\n            setShowExitDialog(true);\n        } else {\n            onClose?.();\n        }\n    };\n\n    const handleConfirmExit = () => {\n        setShowExitDialog(false);\n        onClose?.();\n    };\n\n    const handleSaveAndExit = async () => {\n        setSaving(true);\n\n        const tasksToSave = tasks.map((task) => ({\n            ...task,\n            measurement: task.measurement\n                ? {\n                      ...task.measurement,\n                      name: task.measurement.name,\n                      min: task.measurement.min,\n                      target: task.measurement.target,\n                      max: task.measurement.max,\n                      unit: task.measurement.unit,\n                      category: task.measurement.category,\n                  }\n                : undefined,\n            options: task.options?.map((option) => option) || [],\n            instructionImages: task.instructionImages || [],\n        }));\n\n        router.post(\n            route('maintenance.assets.routines.forms.store', {\n                asset: assetId,\n                routine: routine.id,\n            }),\n            {\n                tasks: JSON.stringify(tasksToSave),\n            },\n            {\n                onSuccess: () => {\n                    toast.success('Rascunho salvo com sucesso!');\n                    setShowExitDialog(false);\n                    onClose?.();\n                },\n                onError: () => {\n                    toast.error('Erro ao salvar formulário', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                    setSaving(false);\n                },\n            },\n        );\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"sticky top-0 z-10 -mb-2 flex items-center justify-between bg-white/75 px-4 py-5 backdrop-blur-sm\">\n                <div className=\"-mt-2 -ml-2 flex flex-wrap items-baseline gap-3\">\n                    <div className=\"flex flex-wrap items-baseline\">\n                        <p className=\"mt-1 ml-2 truncate text-sm text-gray-500\">Tarefas de</p>\n                        <h3 className=\"mt-2 ml-2 text-base font-semibold text-gray-900\">{routine.name}</h3>\n                    </div>\n                    {routine.form && (\n                        <FormStatusBadge\n                            form={{\n                                ...routine.form,\n                                current_version_id: routine.form.currentVersionId ?? null,\n                                has_draft_changes: routine.form.has_draft_changes ?? routine.form.isDraft,\n                            }}\n                            size=\"sm\"\n                        />\n                    )}\n                </div>\n                <div className=\"flex gap-2\">\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={handleClose}>\n                        Voltar\n                    </Button>\n                    <Button type=\"button\" size=\"sm\" disabled={saving || tasks.length === 0} onClick={handleSave}>\n                        {saving ? (\n                            <>\n                                <Save className=\"mr-2 h-4 w-4 animate-pulse\" />\n                                Salvando...\n                            </>\n                        ) : (\n                            <>\n                                <Save className=\"mr-2 h-4 w-4\" />\n                                Salvar Rascunho\n                            </>\n                        )}\n                    </Button>\n                    {hasDraftChanges && (\n                        <Button type=\"button\" size=\"sm\" variant=\"action\" disabled={publishing || tasks.length === 0} onClick={handlePublish}>\n                            {publishing ? (\n                                <>\n                                    <Upload className=\"mr-2 h-4 w-4 animate-pulse\" />\n                                    Publicando...\n                                </>\n                            ) : (\n                                <>\n                                    <Upload className=\"mr-2 h-4 w-4\" />\n                                    Publicar\n                                </>\n                            )}\n                        </Button>\n                    )}\n                </div>\n            </div>\n\n            {/* Alert for unpublished changes */}\n            {hasDraftChanges && hasPublishedVersion && (\n                <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>\n                        Existem alterações não publicadas. Publique para tornar as mudanças disponíveis para execução.\n                    </AlertDescription>\n                </Alert>\n            )}\n\n            <div className=\"mt-4 grid gap-6\">\n                <DndContext\n                    sensors={sensors}\n                    collisionDetection={closestCenter}\n                    onDragStart={handleDragStart}\n                    onDragEnd={handleDragEnd}\n                    onDragCancel={handleDragCancel}\n                    modifiers={[restrictToVerticalAxis, restrictToWindowEdges]}\n                    measuring={{\n                        droppable: {\n                            strategy: MeasuringStrategy.Always,\n                        },\n                    }}\n                >\n                    <div className=\"grid gap-4\">\n                        <SortableContext items={tasks.map((task) => `task-${task.id}`)} strategy={verticalListSortingStrategy}>\n                            {tasks.length === 0 ? (\n                                <Card className=\"bg-muted/30\">\n                                    <CardContent className=\"flex flex-col items-center justify-center px-4 py-8 text-center sm:px-6\">\n                                        <div className=\"bg-muted/50 mb-4 flex size-12 items-center justify-center rounded-full\">\n                                            <ClipboardCheck className=\"text-foreground/60 size-6\" />\n                                        </div>\n                                        <h3 className=\"mb-2 text-lg font-medium\">Nenhuma tarefa adicionada</h3>\n                                        <p className=\"text-muted-foreground mx-auto mb-6 max-w-xs text-sm\">\n                                            Adicione tarefas para compor o formulário.\n                                        </p>\n                                        <div className=\"w-full sm:w-auto\">\n                                            <AddTaskButton\n                                                label=\"Nova Tarefa\"\n                                                taskTypes={TaskTypes}\n                                                tasks={tasks}\n                                                currentIndex={-1}\n                                                onTaskAdded={(newTask) => {\n                                                    const updatedTasks = [...tasks, newTask];\n                                                    setTasks(updatedTasks);\n                                                }}\n                                            />\n                                        </div>\n                                    </CardContent>\n                                </Card>\n                            ) : (\n                                tasks.map((task, index) => {\n                                    const taskType = TaskTypes.find((t) => t.value === task.type);\n                                    const icon =\n                                        taskIcons[task.id] ||\n                                        (taskType ? <taskType.icon className=\"size-5\" /> : <ClipboardCheck className=\"size-5\" />);\n\n                                    return (\n                                        <TaskBaseCard\n                                            key={`task-${task.id}`}\n                                            id={task.id}\n                                            mode={\n                                                TaskOperations.isEditing(task)\n                                                    ? 'edit'\n                                                    : TaskOperations.isPreviewing(task)\n                                                      ? 'preview'\n                                                      : TaskOperations.isResponding(task)\n                                                        ? 'respond'\n                                                        : 'preview'\n                                            }\n                                            icon={icon}\n                                            title={task.description}\n                                            onTitleChange={(newTitle) => {\n                                                taskMethods.update(index, (t) => ({\n                                                    ...t,\n                                                    description: newTitle,\n                                                }));\n                                            }}\n                                            onRemove={() => {\n                                                taskMethods.remove(index);\n                                            }}\n                                            onNewTask={(newTask) => taskMethods.createAt(index, undefined, newTask)}\n                                            onPreview={() => {\n                                                if (TaskOperations.isEditing(task)) {\n                                                    taskMethods.setState(index, TaskState.Viewing);\n                                                } else {\n                                                    taskMethods.setState(index, TaskState.Previewing);\n                                                }\n                                            }}\n                                            onEdit={() => taskMethods.setState(index, TaskState.Editing)}\n                                            onNext={() => taskMethods.setState(index, TaskState.Viewing)}\n                                            taskTypes={TaskTypes}\n                                            tasks={tasks}\n                                            currentIndex={index}\n                                            isRequired={task.isRequired}\n                                            onRequiredChange={(required) =>\n                                                taskMethods.update(index, (t) => TaskOperations.updateRequired(t, required))\n                                            }\n                                            onTaskUpdate={(updatedTask) => {\n                                                taskMethods.update(index, () => updatedTask);\n                                            }}\n                                        >\n                                            <TaskContent\n                                                task={task}\n                                                mode={\n                                                    TaskOperations.isEditing(task)\n                                                        ? 'edit'\n                                                        : TaskOperations.isPreviewing(task)\n                                                          ? 'preview'\n                                                          : TaskOperations.isResponding(task)\n                                                            ? 'respond'\n                                                            : 'preview'\n                                                }\n                                                onUpdate={(updatedTask) => {\n                                                    if (updatedTask.type === 'measurement' && updatedTask.measurement) {\n                                                        setLastMeasurementCategory(updatedTask.measurement.category);\n                                                        setLastMeasurementUnit(updatedTask.measurement.unit);\n                                                    }\n                                                    taskMethods.update(index, () => updatedTask);\n                                                }}\n                                                onIconChange={(newIcon) => updateTaskIcon(task.id, newIcon)}\n                                            />\n                                        </TaskBaseCard>\n                                    );\n                                })\n                            )}\n                        </SortableContext>\n                    </div>\n\n                    <DragOverlay\n                        dropAnimation={{\n                            sideEffects: defaultDropAnimationSideEffects({\n                                styles: {\n                                    active: {\n                                        opacity: '0.5',\n                                    },\n                                },\n                            }),\n                        }}\n                    >\n                        {activeId\n                            ? (() => {\n                                  const task = taskMethods.getById(activeId);\n                                  if (!task) return null;\n\n                                  const taskType = TaskTypes.find((t) => t.value === task.type);\n                                  const icon =\n                                      taskIcons[task.id] || (taskType ? <taskType.icon className=\"size-5\" /> : <ClipboardCheck className=\"size-5\" />);\n\n                                  return (\n                                      <TaskBaseCard\n                                          key={`overlay-${task.id}`}\n                                          id={task.id}\n                                          mode={TaskOperations.isEditing(task) ? 'edit' : 'preview'}\n                                          icon={icon}\n                                          title={task.description}\n                                          isRequired={task.isRequired}\n                                          onTaskUpdate={() => {}}\n                                      >\n                                          <TaskContent\n                                              task={task}\n                                              mode={TaskOperations.isEditing(task) ? 'edit' : 'preview'}\n                                              onUpdate={() => {}}\n                                              onIconChange={(newIcon) => updateTaskIcon(task.id, newIcon)}\n                                          />\n                                      </TaskBaseCard>\n                                  );\n                              })()\n                            : null}\n                    </DragOverlay>\n                </DndContext>\n            </div>\n\n            {/* Confirmation Dialog for Unsaved Changes */}\n            <Dialog open={showExitDialog} onOpenChange={setShowExitDialog}>\n                <DialogContent>\n                    <DialogHeader>\n                        <DialogTitle>Alterações não salvas</DialogTitle>\n                        <DialogDescription>Você tem alterações não salvas. O que deseja fazer?</DialogDescription>\n                    </DialogHeader>\n                    <DialogFooter className=\"flex gap-2 sm:gap-0\">\n                        <Button variant=\"outline\" onClick={() => setShowExitDialog(false)}>\n                            Continuar editando\n                        </Button>\n                        <Button variant=\"ghost\" onClick={handleConfirmExit}>\n                            Sair sem salvar\n                        </Button>\n                        <Button onClick={handleSaveAndExit} disabled={saving || tasks.length === 0}>\n                            {saving ? 'Salvando...' : 'Salvar e sair'}\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ItemSelect.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ManufacturerFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                682,
                                685
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                682,
                                685
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import InputError from '@/components/input-error';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { router, useForm } from '@inertiajs/react';\nimport { Pencil } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\n// Define a local form type with index signature\ninterface ManufacturerFormData {\n    name: string;\n    website: string;\n    email: string;\n    phone: string;\n    country: string;\n    notes: string;\n    [key: string]: any;\n}\n\ninterface ManufacturerData {\n    id: number;\n    name: string;\n    website?: string | null;\n    email?: string | null;\n    phone?: string | null;\n    country?: string | null;\n    notes?: string | null;\n}\n\ninterface ManufacturerFormComponentProps {\n    manufacturer?: ManufacturerData;\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\nexport default function ManufacturerFormComponent({ manufacturer, initialMode = 'view', onCancel, onSuccess }: ManufacturerFormComponentProps) {\n    const isEditing = !!manufacturer;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n\n    // Ensure mode updates when initialMode changes\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, put, processing, errors, clearErrors, reset } = useForm<ManufacturerFormData>({\n        name: manufacturer?.name || '',\n        website: manufacturer?.website || '',\n        email: manufacturer?.email || '',\n        phone: manufacturer?.phone || '',\n        country: manufacturer?.country || '',\n        notes: manufacturer?.notes || '',\n    });\n\n    const handleSave = () => {\n        if (isEditing) {\n            put(route('asset-hierarchy.manufacturers.update', manufacturer.id), {\n                onSuccess: () => {\n                    toast.success(`O fabricante ${data.name} foi atualizado com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar fabricante', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Form Fields */}\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                {/* Nome */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"name\"\n                    label=\"Nome do Fabricante\"\n                    placeholder={isViewMode ? 'Nome não informado' : 'Digite o nome do fabricante'}\n                    required={!isViewMode}\n                    view={isViewMode}\n                />\n\n                {/* País */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"country\"\n                    label=\"País\"\n                    placeholder={isViewMode ? 'País não informado' : 'Digite o país'}\n                    view={isViewMode}\n                />\n\n                {/* Website */}\n                <div className=\"grid gap-2\">\n                    <Label htmlFor=\"website\">Website</Label>\n                    {isViewMode ? (\n                        <div className=\"text-muted-foreground text-sm\">\n                            {data.website ? (\n                                <a href={data.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline\">\n                                    {data.website}\n                                </a>\n                            ) : (\n                                'Website não informado'\n                            )}\n                        </div>\n                    ) : (\n                        <>\n                            <Input\n                                id=\"website\"\n                                type=\"url\"\n                                value={data.website}\n                                onChange={(e) => setData('website', e.target.value)}\n                                placeholder=\"https://www.exemplo.com\"\n                            />\n                            <InputError message={errors.website} />\n                        </>\n                    )}\n                </div>\n\n                {/* Email */}\n                <div className=\"grid gap-2\">\n                    <Label htmlFor=\"email\">E-mail</Label>\n                    {isViewMode ? (\n                        <div className=\"text-muted-foreground text-sm\">\n                            {data.email ? (\n                                <a href={`mailto:${data.email}`} className=\"text-primary hover:underline\">\n                                    {data.email}\n                                </a>\n                            ) : (\n                                'E-mail não informado'\n                            )}\n                        </div>\n                    ) : (\n                        <>\n                            <Input\n                                id=\"email\"\n                                type=\"email\"\n                                value={data.email}\n                                onChange={(e) => setData('email', e.target.value)}\n                                placeholder=\"contato@exemplo.com\"\n                            />\n                            <InputError message={errors.email} />\n                        </>\n                    )}\n                </div>\n\n                {/* Telefone */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"phone\"\n                    label=\"Telefone\"\n                    placeholder={isViewMode ? 'Telefone não informado' : '+55 11 99999-9999'}\n                    view={isViewMode}\n                />\n\n                {/* Observações - Ocupa toda a largura */}\n                <div className=\"md:col-span-2\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"notes\">Observações</Label>\n                        {isViewMode && !data.notes ? (\n                            <div className=\"border-input bg-muted/20 text-muted-foreground flex min-h-[60px] w-full rounded-md border px-3 py-2 text-sm\">\n                                Sem observações\n                            </div>\n                        ) : (\n                            <Textarea\n                                id=\"notes\"\n                                value={data.notes}\n                                onChange={(e) => setData('notes', e.target.value)}\n                                placeholder=\"Observações sobre o fabricante...\"\n                                className=\"min-h-[100px]\"\n                                view={isViewMode}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            {isEditing && (\n                <div className=\"flex justify-end gap-2\">\n                    {isViewMode ? (\n                        <Button onClick={handleEdit} variant=\"default\">\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Editar\n                        </Button>\n                    ) : (\n                        <>\n                            <Button onClick={handleCancel} variant=\"outline\" disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={handleSave} disabled={processing}>\n                                {processing ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/PhotoUploader.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'previewUrl'. Either include it or remove the dependency array.",
                "line": 40,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 40,
                "endColumn": 15,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [previewUrl, value]",
                        "fix": {
                            "range": [
                                1232,
                                1239
                            ],
                            "text": "[previewUrl, value]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CameraCapture from '@/components/camera-capture';\nimport InputError from '@/components/input-error';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Camera, Upload } from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface PhotoUploaderProps {\n    label?: string;\n    onChange: (file: File | null) => void;\n    value: File | null;\n    error?: string;\n    minHeight?: string;\n    maxHeight?: string;\n    id?: string;\n    initialPreview?: string | null;\n    disabled?: boolean;\n}\n\nexport default function PhotoUploader({\n    label = 'Foto',\n    onChange,\n    value,\n    error,\n    minHeight = 'min-h-[238px]',\n    maxHeight = 'max-h-[238px]',\n    id = 'photo',\n    initialPreview = null,\n    disabled = false,\n}: PhotoUploaderProps) {\n    const [previewUrl, setPreviewUrl] = useState<string | null>(initialPreview);\n    const [showCamera, setShowCamera] = useState(false);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        // Se tivermos um valor (File) inicial, criar a previsão\n        if (value instanceof File && !previewUrl) {\n            setPreviewUrl(URL.createObjectURL(value));\n        }\n    }, [value]);\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (file) {\n            onChange(file);\n            setPreviewUrl(URL.createObjectURL(file));\n        }\n    };\n\n    const handlePhotoCapture = (file: File) => {\n        onChange(file);\n        setPreviewUrl(URL.createObjectURL(file));\n        // Resetar o input de arquivo para permitir a seleção do mesmo arquivo novamente\n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    };\n\n    const handleRemovePhoto = (e: React.MouseEvent) => {\n        e.preventDefault(); // Prevenir que o evento se propague\n        setPreviewUrl(null);\n        onChange(null);\n        // Resetar o input de arquivo para permitir a seleção do mesmo arquivo novamente\n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    };\n\n    const handleOpenCamera = (e: React.MouseEvent) => {\n        e.preventDefault(); // Prevenir que o evento se propague e submeta o formulário\n        setShowCamera(true);\n    };\n\n    return (\n        <div className=\"flex h-full flex-col\">\n            {label && (\n                <Label htmlFor={id} className=\"mb-2\">\n                    {label}\n                </Label>\n            )}\n            <div className=\"flex flex-1 flex-col gap-2\">\n                <div className={`bg-muted relative flex-1 overflow-hidden rounded-lg border ${minHeight} ${maxHeight}`}>\n                    {previewUrl ? (\n                        <div className=\"relative h-full w-full\">\n                            <img src={previewUrl} alt=\"Preview\" className=\"h-auto w-full object-contain\" />\n                            <Button\n                                type=\"button\"\n                                variant=\"warning\"\n                                size=\"sm\"\n                                className=\"absolute top-2 right-2\"\n                                onClick={handleRemovePhoto}\n                                disabled={disabled}\n                            >\n                                Remover\n                            </Button>\n                        </div>\n                    ) : (\n                        <div className=\"text-muted-foreground absolute inset-0 flex flex-col items-center justify-center gap-2\">\n                            <Camera className=\"h-12 w-12\" />\n                            <span className=\"text-sm\">Nenhuma foto selecionada</span>\n                        </div>\n                    )}\n                </div>\n                <div className=\"flex gap-2\">\n                    <div className=\"relative flex-1\">\n                        <input\n                            ref={fileInputRef}\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={handleFileChange}\n                            className=\"hidden\"\n                            id={id}\n                            disabled={disabled}\n                        />\n                        <Button type=\"button\" variant=\"outline\" className=\"w-full\" asChild disabled={disabled}>\n                            <label htmlFor={id} className=\"flex cursor-pointer items-center justify-center gap-2\">\n                                <Upload className=\"h-4 w-4\" />\n                                Selecionar Arquivo\n                            </label>\n                        </Button>\n                    </div>\n                    <Button type=\"button\" variant=\"outline\" onClick={handleOpenCamera} className=\"flex-1\" disabled={disabled}>\n                        <Camera className=\"mr-2 h-4 w-4\" />\n                        Usar Câmera\n                    </Button>\n                </div>\n                {error && <InputError message={error} />}\n            </div>\n\n            {showCamera && <CameraCapture onCapture={handlePhotoCapture} onClose={() => setShowCamera(false)} />}\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/PlantFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                651,
                                654
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                651,
                                654
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import MapComponent from '@/components/map';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { type Plant } from '@/types/entities/plant';\nimport { router, useForm } from '@inertiajs/react';\nimport { Pencil } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\n// Define a local form type with index signature\ninterface PlantFormData {\n    name: string;\n    street: string;\n    number: string;\n    city: string;\n    state: string;\n    zip_code: string;\n    gps_coordinates: string;\n    [key: string]: any;\n}\n\ninterface PlantFormComponentProps {\n    plant?: Plant;\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\nexport default function PlantFormComponent({ plant, initialMode = 'view', onCancel, onSuccess }: PlantFormComponentProps) {\n    const isEditing = !!plant;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n\n    // Ensure mode updates when initialMode changes\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, put, processing, errors, clearErrors, reset } = useForm<PlantFormData>({\n        name: plant?.name || '',\n        street: plant?.street || '',\n        number: plant?.number || '',\n        city: plant?.city || '',\n        state: plant?.state || '',\n        zip_code: plant?.zip_code || '',\n        gps_coordinates: plant?.gps_coordinates || '',\n    });\n\n    const handleSave = () => {\n        if (isEditing) {\n            put(route('asset-hierarchy.plantas.update', { plant: plant.id }), {\n                onSuccess: () => {\n                    toast.success(`A planta ${data.name} foi atualizada com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar planta', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Form Fields */}\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                {/* Nome */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"name\"\n                    label=\"Nome\"\n                    placeholder={isViewMode ? 'Nome não informado' : 'Digite o nome da planta'}\n                    required={!isViewMode}\n                    view={isViewMode}\n                />\n\n                {/* CEP */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"zip_code\"\n                    label=\"CEP\"\n                    placeholder={isViewMode ? 'CEP não informado' : 'Digite o CEP'}\n                    view={isViewMode}\n                />\n\n                {/* Rua */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"street\"\n                    label=\"Rua\"\n                    placeholder={isViewMode ? 'Rua não informada' : 'Digite o nome da rua'}\n                    view={isViewMode}\n                />\n\n                {/* Número */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"number\"\n                    label=\"Número\"\n                    placeholder={isViewMode ? 'Número não informado' : 'Digite o número'}\n                    view={isViewMode}\n                />\n\n                {/* Cidade */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"city\"\n                    label=\"Cidade\"\n                    placeholder={isViewMode ? 'Cidade não informada' : 'Digite a cidade'}\n                    view={isViewMode}\n                />\n\n                {/* Estado */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"state\"\n                    label=\"Estado\"\n                    placeholder={isViewMode ? 'Estado não informado' : 'Digite o estado'}\n                    view={isViewMode}\n                />\n\n                {/* Coordenadas GPS */}\n                <div className=\"md:col-span-2\">\n                    <TextInput\n                        form={{\n                            data,\n                            setData,\n                            errors,\n                            clearErrors,\n                        }}\n                        name=\"gps_coordinates\"\n                        label=\"Coordenadas GPS\"\n                        placeholder={isViewMode ? 'Coordenadas não informadas' : 'Digite as coordenadas GPS'}\n                        view={isViewMode}\n                    />\n                </div>\n            </div>\n\n            {/* Map Preview - Only show if we have coordinates */}\n            {data.gps_coordinates && (\n                <div className=\"space-y-2\">\n                    <Label>Localização no Mapa</Label>\n                    <div className=\"h-64 w-full overflow-hidden rounded-lg border\">\n                        <MapComponent coordinates={data.gps_coordinates} />\n                    </div>\n                </div>\n            )}\n\n            {/* Action Buttons */}\n            {isEditing && (\n                <div className=\"flex justify-end gap-2\">\n                    {isViewMode ? (\n                        <Button onClick={handleEdit} variant=\"default\">\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Editar\n                        </Button>\n                    ) : (\n                        <>\n                            <Button onClick={handleCancel} variant=\"outline\" disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={handleSave} disabled={processing}>\n                                {processing ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ReportRuntimeSheet.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 21,
                "column": 24,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 21,
                "endColumn": 27,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                933,
                                936
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                933,
                                936
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 86,
                "column": 27,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 86,
                "endColumn": 30,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3617,
                                3620
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3617,
                                3620
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import TimeSelect from '@/components/TimeSelect';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';\nimport { Textarea } from '@/components/ui/textarea';\nimport { cn } from '@/lib/utils';\nimport { router } from '@inertiajs/react';\nimport axios from 'axios';\nimport { format } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { Calendar as CalendarIcon, Clock } from 'lucide-react';\nimport React, { forwardRef, useState } from 'react';\n\ninterface ReportRuntimeSheetProps {\n    assetId?: number;\n    currentRuntime: number;\n    showTrigger?: boolean;\n    onSuccess?: (data: any) => void;\n}\n\nconst ReportRuntimeSheet = forwardRef<HTMLButtonElement, ReportRuntimeSheetProps>(\n    ({ assetId, currentRuntime, showTrigger = false, onSuccess }, ref) => {\n        const [isOpen, setIsOpen] = useState(false);\n        const [reportedHours, setReportedHours] = useState(currentRuntime.toString());\n        const [notes, setNotes] = useState('');\n        const [isSubmitting, setIsSubmitting] = useState(false);\n        const [error, setError] = useState<string | null>(null);\n\n        // Initialize with current date and time\n        const [measurementDate, setMeasurementDate] = useState<Date>(new Date());\n        const [measurementTime, setMeasurementTime] = useState(format(new Date(), 'HH:mm'));\n        const [calendarOpen, setCalendarOpen] = useState(false);\n\n        const handleSubmit = async (e: React.FormEvent) => {\n            e.preventDefault();\n\n            if (!assetId) {\n                setError('ID do ativo não encontrado');\n                return;\n            }\n\n            const reportedHoursValue = parseFloat(reportedHours);\n\n            if (isNaN(reportedHoursValue) || reportedHoursValue < 0) {\n                setError('Por favor, insira um valor válido de horas');\n                return;\n            }\n\n            // Combine date and time into a single datetime\n            const [timeHours, timeMinutes] = measurementTime.split(':').map(Number);\n            const measurementDateTime = new Date(measurementDate);\n            measurementDateTime.setHours(timeHours, timeMinutes, 0, 0);\n\n            // Check if the measurement datetime is in the future\n            if (measurementDateTime > new Date()) {\n                setError('A data e hora da medição não pode ser no futuro');\n                return;\n            }\n\n            setIsSubmitting(true);\n            setError(null);\n\n            try {\n                const response = await axios.post(`/asset-hierarchy/assets/${assetId}/runtime`, {\n                    reported_hours: reportedHoursValue,\n                    notes: notes || null,\n                    // toISOString() always returns UTC time (with 'Z' suffix)\n                    // The user selects in their local time, but we send UTC to the backend\n                    measurement_datetime: measurementDateTime.toISOString(),\n                });\n\n                if (response.data.success) {\n                    setIsOpen(false);\n                    setNotes('');\n\n                    if (onSuccess) {\n                        onSuccess(response.data.runtime_data);\n                    }\n\n                    // Refresh the page data\n                    router.reload();\n                }\n            } catch (err: any) {\n                if (err.response?.data?.errors?.measurement_datetime) {\n                    setError(err.response.data.errors.measurement_datetime[0]);\n                } else {\n                    setError(err.response?.data?.message || 'Erro ao reportar horímetro');\n                }\n            } finally {\n                setIsSubmitting(false);\n            }\n        };\n\n        return (\n            <Sheet open={isOpen} onOpenChange={setIsOpen}>\n                {showTrigger && (\n                    <SheetTrigger asChild>\n                        <Button ref={ref} size=\"sm\" variant=\"outline\">\n                            <Clock className=\"mr-2 h-4 w-4\" />\n                            Reportar Horímetro\n                        </Button>\n                    </SheetTrigger>\n                )}\n                <SheetContent>\n                    <SheetHeader>\n                        <SheetTitle>Reportar Horímetro</SheetTitle>\n                        <SheetDescription>Insira o valor atual do horímetro do ativo</SheetDescription>\n                    </SheetHeader>\n                    <form onSubmit={handleSubmit} className=\"mr-4 ml-4 space-y-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"current-hours\">Horímetro Atual</Label>\n                            <div className=\"text-muted-foreground text-sm\">{currentRuntime.toFixed(1)} horas</div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"reported-hours\">Novo Horímetro</Label>\n                            <Input\n                                id=\"reported-hours\"\n                                type=\"number\"\n                                step=\"0.1\"\n                                value={reportedHours}\n                                onChange={(e) => setReportedHours(e.target.value)}\n                                placeholder=\"Ex: 1234.5\"\n                                required\n                            />\n                        </div>\n\n                        {/* Date Selection */}\n                        <div className=\"space-y-2\">\n                            <Label>Data da Medição</Label>\n                            <Popover modal={true} open={calendarOpen} onOpenChange={setCalendarOpen}>\n                                <PopoverTrigger asChild>\n                                    <Button\n                                        variant=\"outline\"\n                                        className={cn('w-full justify-start text-left font-normal', !measurementDate && 'text-muted-foreground')}\n                                    >\n                                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                        {measurementDate ? format(measurementDate, 'dd/MM/yyyy', { locale: ptBR }) : 'Selecione a data'}\n                                    </Button>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"z-[100] w-auto p-0\">\n                                    <Calendar\n                                        mode=\"single\"\n                                        selected={measurementDate}\n                                        onSelect={(date) => {\n                                            if (date) {\n                                                setMeasurementDate(date);\n                                                setCalendarOpen(false);\n                                            }\n                                        }}\n                                        disabled={(date) => date > new Date()}\n                                        initialFocus\n                                    />\n                                </PopoverContent>\n                            </Popover>\n                        </div>\n\n                        {/* Time Selection */}\n                        <div className=\"space-y-2\">\n                            <TimeSelect label=\"Hora da Medição\" value={measurementTime} onChange={setMeasurementTime} />\n                            {/* Show warning if date is today */}\n                            {measurementDate && measurementDate.toDateString() === new Date().toDateString() && (\n                                <p className=\"text-muted-foreground text-xs\">Nota: A hora selecionada não pode ser no futuro</p>\n                            )}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"notes\">Observações (opcional)</Label>\n                            <Textarea\n                                id=\"notes\"\n                                value={notes}\n                                onChange={(e) => setNotes(e.target.value)}\n                                placeholder=\"Adicione observações sobre esta medição...\"\n                                rows={3}\n                            />\n                        </div>\n\n                        {error && <div className=\"text-sm text-red-600\">{error}</div>}\n\n                        <div className=\"flex gap-2 pt-4\">\n                            <Button type=\"button\" variant=\"outline\" onClick={() => setIsOpen(false)} disabled={isSubmitting} className=\"flex-1\">\n                                Cancelar\n                            </Button>\n                            <Button type=\"submit\" disabled={isSubmitting} className=\"flex-1\">\n                                {isSubmitting ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </div>\n                    </form>\n                </SheetContent>\n            </Sheet>\n        );\n    },\n);\n\nReportRuntimeSheet.displayName = 'ReportRuntimeSheet';\n\nexport default ReportRuntimeSheet;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/RoutineList.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'fetchRoutineFormData' and 'isNew'. Either include them or remove the dependency array.",
                "line": 180,
                "column": 12,
                "nodeType": "ArrayExpression",
                "endLine": 180,
                "endColumn": 43,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [routine?.id, routine?.form_id, isNew, fetchRoutineFormData]",
                        "fix": {
                            "range": [
                                6380,
                                6411
                            ],
                            "text": "[routine?.id, routine?.form_id, isNew, fetchRoutineFormData]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import EditRoutineSheet from '@/components/EditRoutineSheet';\nimport { FormExecutionGuard, FormStatusBadge, FormVersionHistory } from '@/components/form-lifecycle';\nimport { getFormState } from '@/components/form-lifecycle/FormStatusBadge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport { Task } from '@/types/task';\nimport { Link, router } from '@inertiajs/react';\nimport axios from 'axios';\nimport {\n    AlertCircle,\n    CalendarRange,\n    ClipboardCheck,\n    Clock,\n    Edit2,\n    Eye,\n    FileText,\n    History,\n    Info,\n    MoreVertical,\n    Plus,\n    Trash2,\n    Upload,\n} from 'lucide-react';\nimport { forwardRef, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\nexport interface Routine {\n    id?: number;\n    name: string;\n    trigger_hours: number;\n    status: 'Active' | 'Inactive';\n    description?: string;\n    form_id?: number;\n    form?: {\n        id: number;\n        name: string;\n        tasks: Task[];\n        has_draft_changes?: boolean;\n        is_draft?: boolean;\n        current_version_id?: number | null;\n        current_version?: {\n            id?: number;\n            version_number: string;\n            published_at?: string;\n        };\n    };\n}\n\ninterface ShiftSchedule {\n    weekday: string;\n    shifts: Array<{\n        start_time: string;\n        end_time: string;\n        active: boolean;\n        breaks: Array<{\n            start_time: string;\n            end_time: string;\n        }>;\n    }>;\n}\n\ninterface Shift {\n    id: number;\n    name: string;\n    schedules: ShiftSchedule[];\n}\n\ninterface RoutineListProps {\n    routine?: Routine;\n    onSave?: (routine: Routine) => void;\n    onDelete?: (routine: Routine) => void;\n    onCancel?: () => void;\n    isNew?: boolean;\n    assetId?: number;\n    onEditForm?: () => void;\n    onFillForm?: () => void;\n    isCompressed?: boolean;\n    shift?: Shift | null;\n}\n\n// Helper function to calculate shift work hours per week\nconst calculateShiftHoursPerWeek = (shift: Shift | null | undefined): number => {\n    if (!shift?.schedules) return 0;\n\n    let totalMinutes = 0;\n\n    shift.schedules.forEach((schedule) => {\n        schedule.shifts.forEach((shiftTime) => {\n            if (shiftTime.active) {\n                const [startHours, startMinutes] = shiftTime.start_time.split(':').map(Number);\n                const [endHours, endMinutes] = shiftTime.end_time.split(':').map(Number);\n\n                const startTotalMinutes = startHours * 60 + startMinutes;\n                let endTotalMinutes = endHours * 60 + endMinutes;\n\n                // Handle shifts that cross midnight\n                if (endTotalMinutes < startTotalMinutes) {\n                    endTotalMinutes += 24 * 60;\n                }\n\n                const shiftDuration = endTotalMinutes - startTotalMinutes;\n                totalMinutes += shiftDuration;\n\n                // Subtract break time\n                shiftTime.breaks.forEach((breakTime) => {\n                    const [breakStartHours, breakStartMinutes] = breakTime.start_time.split(':').map(Number);\n                    const [breakEndHours, breakEndMinutes] = breakTime.end_time.split(':').map(Number);\n\n                    const breakStartTotalMinutes = breakStartHours * 60 + breakStartMinutes;\n                    let breakEndTotalMinutes = breakEndHours * 60 + breakEndMinutes;\n\n                    if (breakEndTotalMinutes < breakStartTotalMinutes) {\n                        breakEndTotalMinutes += 24 * 60;\n                    }\n\n                    totalMinutes -= breakEndTotalMinutes - breakStartTotalMinutes;\n                });\n            }\n        });\n    });\n\n    return totalMinutes / 60; // Return hours\n};\n\nconst RoutineList = forwardRef<{ focusAddTasksButton: () => void }, RoutineListProps>(\n    ({ routine, onSave, onDelete, isNew = false, assetId, onEditForm, onFillForm, isCompressed = false, shift }, ref) => {\n        // Referência para o trigger do sheet\n        const editSheetTriggerRef = useRef<HTMLButtonElement>(null);\n        const [isSheetOpen, setIsSheetOpen] = useState(false);\n\n        // Referência para o botão \"Adicionar Tarefas\"\n        const addTasksButtonRef = useRef<HTMLButtonElement>(null);\n\n        // Estados para controle do modal de exclusão\n        const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n        const [confirmationText, setConfirmationText] = useState('');\n        const [isDeleting, setIsDeleting] = useState(false);\n\n        // Estado para controlar o dropdown\n        const [dropdownOpen, setDropdownOpen] = useState(false);\n\n        // Estado para armazenar dados completos da rotina com formulário\n        const [routineWithForm, setRoutineWithForm] = useState<Routine | null>(null);\n        const [loadingForm, setLoadingForm] = useState(false);\n\n        // Estado para controlar o modal de histórico de versões\n        const [showVersionHistory, setShowVersionHistory] = useState(false);\n\n        // Estado para controlar o modal de aviso de nova versão\n        const [showNewVersionDialog, setShowNewVersionDialog] = useState(false);\n\n        // Dados da rotina ou dados vazios para nova rotina\n        const routineData = routineWithForm ||\n            routine || {\n                name: '',\n                trigger_hours: 0,\n                status: 'Active' as const,\n                description: '',\n                form: undefined,\n            };\n\n        // Get form state for conditional rendering\n        const formState = routineData.form\n            ? getFormState({\n                  ...routineData.form,\n                  current_version_id: routineData.form.current_version_id ?? null,\n              })\n            : null;\n\n        // Fetch form data when component mounts if routine has a form\n        useEffect(() => {\n            if (routine?.id && routine?.form_id && !isNew) {\n                fetchRoutineFormData();\n            }\n        }, [routine?.id, routine?.form_id]);\n\n        const fetchRoutineFormData = async () => {\n            if (!routine?.id) return;\n\n            setLoadingForm(true);\n            try {\n                const response = await axios.get(route('maintenance.routines.form-data', routine.id));\n                setRoutineWithForm(response.data.routine);\n            } catch (error) {\n                console.error('Error fetching routine form data:', error);\n            } finally {\n                setLoadingForm(false);\n            }\n        };\n\n        const formatTriggerHours = (hours: number) => {\n            const shiftHoursPerWeek = calculateShiftHoursPerWeek(shift);\n\n            // Base hours format - always show in hours as stored in database\n            const hoursText = `${hours} hora${hours !== 1 ? 's' : ''}`;\n\n            // Work days estimate\n            let workDaysText = null;\n            if (shift && shiftHoursPerWeek > 0) {\n                const shiftHoursPerDay = shiftHoursPerWeek / 7;\n                const workDays = hours / shiftHoursPerDay;\n\n                if (workDays < 1) {\n                    workDaysText = 'menos de 1 dia de trabalho';\n                } else {\n                    const days = Math.round(workDays);\n                    workDaysText = `${days} dia${days !== 1 ? 's' : ''} de trabalho`;\n                }\n            }\n\n            return { hoursText, workDaysText };\n        };\n\n        const handleEditClick = () => {\n            setIsSheetOpen(true);\n            editSheetTriggerRef.current?.click();\n        };\n\n        const handleSheetSuccess = (updatedRoutine: Routine) => {\n            setIsSheetOpen(false);\n            if (onSave) {\n                onSave(updatedRoutine);\n            }\n            // Refresh form data after routine update\n            if (updatedRoutine.id) {\n                fetchRoutineFormData();\n            }\n        };\n\n        const handleSheetOpenChange = (open: boolean) => {\n            setIsSheetOpen(open);\n        };\n\n        const handleDelete = () => {\n            if (!routine?.id) return;\n            setDropdownOpen(false);\n            setShowDeleteDialog(true);\n        };\n\n        const confirmDelete = () => {\n            if (!routine?.id) return;\n\n            setIsDeleting(true);\n            router.delete(route('maintenance.assets.routines.destroy', { asset: assetId, routine: routine.id }), {\n                onSuccess: () => {\n                    toast.success('Rotina excluída com sucesso!');\n                    setShowDeleteDialog(false);\n                    setConfirmationText('');\n                    setIsDeleting(false);\n                    // Chamar callback para atualizar a lista\n                    if (onDelete && routine) {\n                        onDelete(routine);\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao excluir rotina. Tente novamente.');\n                    setIsDeleting(false);\n                },\n            });\n        };\n\n        const cancelDelete = () => {\n            setShowDeleteDialog(false);\n            setConfirmationText('');\n        };\n\n        const isConfirmationValid = confirmationText === 'EXCLUIR';\n\n        const handlePublishForm = async () => {\n            try {\n                await axios.post(\n                    route('maintenance.assets.routines.forms.publish', {\n                        asset: assetId,\n                        routine: routine?.id,\n                    }),\n                );\n                toast.success('Formulário publicado com sucesso!');\n                // Refresh form data\n                await fetchRoutineFormData();\n            } catch {\n                toast.error('Erro ao publicar formulário');\n            }\n        };\n\n        const handleEditFormClick = () => {\n            // Close the dropdown menu first to avoid aria-hidden focus issues\n            setDropdownOpen(false);\n\n            // Small delay to ensure dropdown is closed before opening dialog\n            setTimeout(() => {\n                // Check if form is published (not unpublished and not already in draft)\n                if (formState === 'published') {\n                    // Show warning dialog for published forms\n                    setShowNewVersionDialog(true);\n                } else {\n                    // For unpublished or draft forms, edit directly\n                    if (onEditForm) onEditForm();\n                }\n            }, 100);\n        };\n\n        const confirmEditForm = () => {\n            setShowNewVersionDialog(false);\n            if (onEditForm) onEditForm();\n        };\n\n        // Expose method to focus the add tasks button\n        useImperativeHandle(ref, () => ({\n            focusAddTasksButton: () => {\n                if (addTasksButtonRef.current) {\n                    addTasksButtonRef.current.focus();\n                    // Add a visual indicator that the button should be clicked\n                    addTasksButtonRef.current.classList.add('ring-2', 'ring-primary', 'ring-offset-2');\n                    setTimeout(() => {\n                        addTasksButtonRef.current?.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');\n                    }, 3000);\n                }\n            },\n        }));\n\n        // Se for nova rotina, renderizar um card especial\n        if (isNew) {\n            return (\n                <>\n                    <Card className=\"hover:border-primary/50 border-2 border-dashed transition-colors\">\n                        <CardContent className=\"flex flex-col items-center justify-center p-8\">\n                            <FileText className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                            <h3 className=\"mb-2 text-center text-lg font-semibold\">Nova Rotina de Manutenção</h3>\n                            <p className=\"text-muted-foreground mb-4 text-center text-sm\">Configure uma nova rotina de manutenção para este ativo</p>\n                            <Button onClick={handleEditClick}>\n                                <Plus className=\"mr-1 h-4 w-4\" />\n                                Criar Rotina\n                            </Button>\n                        </CardContent>\n                    </Card>\n\n                    {/* EditRoutineSheet com SheetTrigger interno */}\n                    <div style={{ display: 'none' }}>\n                        <EditRoutineSheet\n                            showTrigger={true}\n                            triggerText=\"Trigger Oculto\"\n                            triggerVariant=\"outline\"\n                            triggerRef={editSheetTriggerRef}\n                            routine={routineData}\n                            isNew={true}\n                            assetId={assetId}\n                            onSuccess={handleSheetSuccess}\n                            isOpen={isSheetOpen}\n                            onOpenChange={handleSheetOpenChange}\n                        />\n                    </div>\n                </>\n            );\n        }\n\n        return (\n            <>\n                <div\n                    className={cn(\n                        'flex items-center justify-between gap-x-6 transition-all duration-200 ease-in-out',\n                        isCompressed ? 'py-3' : 'py-5',\n                    )}\n                >\n                    <div className=\"min-w-0\">\n                        <div className=\"flex items-start gap-x-3\">\n                            <p\n                                className={cn(\n                                    'font-semibold text-gray-900 transition-all duration-200 ease-in-out',\n                                    isCompressed ? 'text-lg' : 'text-lg',\n                                )}\n                            >\n                                {routineData.name}\n                            </p>\n                            {routineData.form ? (\n                                <FormStatusBadge\n                                    form={{\n                                        ...routineData.form,\n                                        current_version_id: routineData.form.current_version_id ?? null,\n                                    }}\n                                    size=\"sm\"\n                                />\n                            ) : (\n                                <p\n                                    className={`mt-0.5 rounded-md px-1.5 py-0.5 text-xs font-medium whitespace-nowrap ring-1 ring-inset ${\n                                        routineData.status === 'Active'\n                                            ? 'bg-green-50 text-green-700 ring-green-600/20'\n                                            : 'bg-gray-50 text-gray-600 ring-gray-500/10'\n                                    }`}\n                                >\n                                    {routineData.status === 'Active' ? 'Ativo' : 'Inativo'}\n                                </p>\n                            )}\n                        </div>\n                        <div className=\"mt-1 flex items-center gap-x-2 text-xs text-gray-500\">\n                            <p className=\"flex items-center gap-1 whitespace-nowrap\">\n                                <Clock className=\"h-3 w-3\" />\n                                {formatTriggerHours(routineData.trigger_hours).hoursText}\n                            </p>\n                            {formatTriggerHours(routineData.trigger_hours).workDaysText && (\n                                <>\n                                    <svg viewBox=\"0 0 2 2\" className=\"h-0.5 w-0.5 fill-current\">\n                                        <circle r={1} cx={1} cy={1} />\n                                    </svg>\n                                    <p className=\"flex items-center gap-1 whitespace-nowrap\">\n                                        <CalendarRange className=\"h-3 w-3\" />\n                                        {formatTriggerHours(routineData.trigger_hours).workDaysText}\n                                    </p>\n                                </>\n                            )}\n                            {routineData.form && (\n                                <>\n                                    <svg viewBox=\"0 0 2 2\" className=\"h-0.5 w-0.5 fill-current\">\n                                        <circle r={1} cx={1} cy={1} />\n                                    </svg>\n                                    <p className=\"flex items-center gap-1 whitespace-nowrap\">\n                                        <FileText className=\"h-3 w-3\" />\n                                        {loadingForm ? '...' : routineData.form.tasks?.length || 0} tarefas\n                                    </p>\n                                    {routineData.form.current_version && (\n                                        <>\n                                            <svg viewBox=\"0 0 2 2\" className=\"h-0.5 w-0.5 fill-current\">\n                                                <circle r={1} cx={1} cy={1} />\n                                            </svg>\n                                            <p className=\"whitespace-nowrap\">v{routineData.form.current_version.version_number}</p>\n                                        </>\n                                    )}\n                                </>\n                            )}\n                        </div>\n                        {!shift && (\n                            <Link\n                                href={route('asset-hierarchy.assets.show', { asset: assetId, tab: 'shifts-runtime' })}\n                                className=\"mt-1 flex items-center gap-1 text-xs text-amber-600 hover:text-amber-700 hover:underline\"\n                            >\n                                <AlertCircle className=\"h-3 w-3\" />\n                                <span>Estimativa de tempo disponível após configurar turno</span>\n                            </Link>\n                        )}\n                    </div>\n                    <div className=\"flex flex-none items-center gap-x-4\">\n                        {loadingForm ? (\n                            <Button size=\"sm\" variant=\"outline\" disabled>\n                                <FileText className=\"mr-1 h-4 w-4 animate-pulse\" />\n                                Carregando...\n                            </Button>\n                        ) : routineData.form && routineData.form.tasks && routineData.form.tasks.length > 0 ? (\n                            formState === 'unpublished' ? (\n                                // Show Publish button for unpublished forms\n                                <Button size=\"sm\" variant=\"action\" onClick={handlePublishForm}>\n                                    <Upload className=\"mr-1 h-4 w-4\" />\n                                    Publicar\n                                </Button>\n                            ) : (\n                                // Show FormExecutionGuard for published/draft forms\n                                <FormExecutionGuard\n                                    form={{\n                                        ...routineData.form,\n                                        current_version_id: routineData.form.current_version_id ?? null,\n                                    }}\n                                    onExecute={() => {\n                                        if (onFillForm) onFillForm();\n                                    }}\n                                    onPublishAndExecute={async () => {\n                                        // Publish the form first\n                                        try {\n                                            await axios.post(\n                                                route('maintenance.assets.routines.forms.publish', {\n                                                    asset: assetId,\n                                                    routine: routine?.id,\n                                                }),\n                                            );\n                                            toast.success('Formulário publicado com sucesso!');\n                                            // Refresh form data\n                                            await fetchRoutineFormData();\n                                            // Then execute\n                                            if (onFillForm) onFillForm();\n                                        } catch {\n                                            toast.error('Erro ao publicar formulário');\n                                        }\n                                    }}\n                                    onEditForm={onEditForm}\n                                >\n                                    <Button size=\"sm\" variant=\"action\">\n                                        <ClipboardCheck className=\"mr-1 h-4 w-4\" />\n                                        Preencher\n                                    </Button>\n                                </FormExecutionGuard>\n                            )\n                        ) : routineData.form && routineData.form.has_draft_changes ? (\n                            <Button size=\"sm\" variant=\"outline\" onClick={handleEditFormClick}>\n                                <FileText className=\"mr-1 h-4 w-4\" />\n                                Editar Tarefas\n                            </Button>\n                        ) : (\n                            <Button size=\"sm\" variant=\"outline\" onClick={handleEditFormClick} ref={addTasksButtonRef}>\n                                <FileText className=\"mr-1 h-4 w-4\" />\n                                Adicionar Tarefas\n                            </Button>\n                        )}\n                        {!isSheetOpen && (\n                            <DropdownMenu open={dropdownOpen} onOpenChange={setDropdownOpen}>\n                                <DropdownMenuTrigger asChild>\n                                    <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-gray-500 hover:text-gray-900\">\n                                        <span className=\"sr-only\">Abrir opções</span>\n                                        <MoreVertical className=\"h-5 w-5\" />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\" className=\"w-48\">\n                                    {!loadingForm && routineData.form && routineData.form.tasks && routineData.form.tasks.length > 0 ? (\n                                        formState === 'unpublished' ? (\n                                            // Show Publish option for unpublished forms\n                                            <>\n                                                <DropdownMenuItem onClick={handlePublishForm} className=\"flex items-center\">\n                                                    <Upload className=\"mr-2 h-4 w-4\" />\n                                                    Publicar\n                                                </DropdownMenuItem>\n                                                <DropdownMenuSeparator />\n                                                <DropdownMenuItem\n                                                    asChild={!onEditForm}\n                                                    className={onEditForm ? 'flex items-center' : 'flex items-center'}\n                                                    onClick={onEditForm ? handleEditFormClick : undefined}\n                                                >\n                                                    <>\n                                                        <FileText className=\"mr-2 h-4 w-4\" />\n                                                        Editar Tarefas\n                                                    </>\n                                                </DropdownMenuItem>\n                                            </>\n                                        ) : (\n                                            // Show Fill option for published/draft forms\n                                            <>\n                                                <DropdownMenuItem\n                                                    asChild={!onFillForm}\n                                                    className={onFillForm ? 'flex items-center' : 'flex items-center'}\n                                                    onClick={onFillForm ? onFillForm : undefined}\n                                                >\n                                                    {onFillForm ? (\n                                                        <>\n                                                            <ClipboardCheck className=\"mr-2 h-4 w-4\" />\n                                                            Preencher\n                                                        </>\n                                                    ) : (\n                                                        <Link\n                                                            href={route('maintenance.assets.routines.form', {\n                                                                asset: assetId,\n                                                                routine: routineData.id,\n                                                                mode: 'fill',\n                                                            })}\n                                                            className=\"flex items-center\"\n                                                        >\n                                                            <ClipboardCheck className=\"mr-2 h-4 w-4\" />\n                                                            Preencher\n                                                        </Link>\n                                                    )}\n                                                </DropdownMenuItem>\n                                                <DropdownMenuSeparator />\n                                                <DropdownMenuItem\n                                                    asChild={!onEditForm}\n                                                    className={onEditForm ? 'flex items-center' : 'flex items-center'}\n                                                    onClick={onEditForm ? handleEditFormClick : undefined}\n                                                >\n                                                    <>\n                                                        <FileText className=\"mr-2 h-4 w-4\" />\n                                                        Editar Tarefas\n                                                    </>\n                                                </DropdownMenuItem>\n                                            </>\n                                        )\n                                    ) : routineData.form && routineData.form.has_draft_changes ? (\n                                        <>\n                                            <DropdownMenuItem\n                                                asChild={!onEditForm}\n                                                className={onEditForm ? 'flex items-center' : 'flex items-center'}\n                                                onClick={onEditForm ? handleEditFormClick : undefined}\n                                            >\n                                                <>\n                                                    <FileText className=\"mr-2 h-4 w-4\" />\n                                                    Editar Tarefas\n                                                </>\n                                            </DropdownMenuItem>\n                                            <DropdownMenuSeparator />\n                                        </>\n                                    ) : (\n                                        <>\n                                            <DropdownMenuItem\n                                                asChild={!onEditForm}\n                                                className={onEditForm ? 'sm:hidden' : 'flex items-center sm:hidden'}\n                                                onClick={onEditForm ? handleEditFormClick : undefined}\n                                            >\n                                                <>\n                                                    <FileText className=\"mr-2 h-4 w-4\" />\n                                                    Adicionar Tarefas\n                                                </>\n                                            </DropdownMenuItem>\n                                            <DropdownMenuSeparator />\n                                        </>\n                                    )}\n                                    <DropdownMenuItem asChild>\n                                        <Link\n                                            href={route('maintenance.assets.routines.executions', { asset: assetId, routine: routineData.id })}\n                                            className=\"flex items-center\"\n                                        >\n                                            <Eye className=\"mr-2 h-4 w-4\" />\n                                            Visualizar Execuções\n                                        </Link>\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem onClick={handleEditClick}>\n                                        <Edit2 className=\"mr-2 h-4 w-4\" />\n                                        Editar Rotina\n                                    </DropdownMenuItem>\n                                    {routineData.form && routineData.form.current_version_id && (\n                                        <>\n                                            <DropdownMenuSeparator />\n                                            <DropdownMenuItem onClick={() => setShowVersionHistory(true)} className=\"flex items-center\">\n                                                <History className=\"mr-2 h-4 w-4\" />\n                                                Ver Histórico de Versões\n                                            </DropdownMenuItem>\n                                        </>\n                                    )}\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem onClick={handleDelete} className=\"text-destructive\">\n                                        <Trash2 className=\"mr-2 h-4 w-4\" />\n                                        Excluir\n                                    </DropdownMenuItem>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        )}\n                    </div>\n                </div>\n\n                {/* Modal de Confirmação de Exclusão */}\n                <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n                    <DialogContent>\n                        <DialogTitle>Confirmar exclusão</DialogTitle>\n                        <DialogDescription>\n                            Tem certeza que deseja excluir a rotina \"{routineData.name}\"? Esta ação não pode ser desfeita.\n                        </DialogDescription>\n                        <div className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                                <Label htmlFor=\"confirmation\">Digite EXCLUIR para confirmar</Label>\n                                <Input\n                                    id=\"confirmation\"\n                                    variant=\"destructive\"\n                                    value={confirmationText}\n                                    onChange={(e) => setConfirmationText(e.target.value)}\n                                />\n                            </div>\n                        </div>\n                        <DialogFooter>\n                            <DialogClose asChild>\n                                <Button variant=\"secondary\" onClick={cancelDelete}>\n                                    Cancelar\n                                </Button>\n                            </DialogClose>\n                            <Button variant=\"destructive\" onClick={confirmDelete} disabled={!isConfirmationValid || isDeleting}>\n                                {isDeleting ? 'Excluindo...' : 'Excluir'}\n                            </Button>\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n\n                {/* EditRoutineSheet com SheetTrigger interno */}\n                <div style={{ display: 'none' }}>\n                    <EditRoutineSheet\n                        showTrigger={true}\n                        triggerText=\"Trigger Oculto\"\n                        triggerVariant=\"outline\"\n                        triggerRef={editSheetTriggerRef}\n                        routine={routineData}\n                        isNew={false}\n                        assetId={assetId}\n                        onSuccess={handleSheetSuccess}\n                        isOpen={isSheetOpen}\n                        onOpenChange={handleSheetOpenChange}\n                    />\n                </div>\n\n                {/* Modal de Histórico de Versões */}\n                {routineData.form && (\n                    <FormVersionHistory\n                        formId={routineData.form.id}\n                        currentVersionId={routineData.form.current_version_id}\n                        isOpen={showVersionHistory}\n                        onClose={() => setShowVersionHistory(false)}\n                    />\n                )}\n\n                {/* Modal de Aviso de Nova Versão */}\n                <Dialog open={showNewVersionDialog} onOpenChange={setShowNewVersionDialog}>\n                    <DialogContent>\n                        <DialogHeader>\n                            <DialogTitle className=\"flex items-center gap-2\">\n                                <Info className=\"h-5 w-5 text-blue-500\" />\n                                Nova versão será criada\n                            </DialogTitle>\n                            <DialogDescription>\n                                Este formulário está publicado na versão{' '}\n                                <strong>v{routineData.form?.current_version?.version_number || '1.0'}</strong>. Ao editar as tarefas, uma cópia de\n                                rascunho será criada. As alterações não afetarão a versão atual até que você publique uma nova versão.\n                            </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"mt-4 rounded-md border border-blue-200 bg-blue-50 p-3\">\n                            <p className=\"text-sm text-blue-800\">\n                                <strong>Nota:</strong> A versão atual continuará sendo executada até que você publique as alterações como uma nova\n                                versão.\n                            </p>\n                        </div>\n                        <DialogFooter>\n                            <Button variant=\"secondary\" onClick={() => setShowNewVersionDialog(false)}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={confirmEditForm}>Continuar Editando</Button>\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n            </>\n        );\n    },\n);\n\nexport default RoutineList;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/SectorFormComponent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                814,
                                817
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                814,
                                817
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateAreaSheet from '@/components/CreateAreaSheet';\nimport CreatePlantSheet from '@/components/CreatePlantSheet';\nimport ItemSelect from '@/components/ItemSelect';\nimport TextInput from '@/components/TextInput';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { type Area, type Plant, type Sector } from '@/types/asset-hierarchy';\nimport { router, useForm } from '@inertiajs/react';\nimport { Pencil } from 'lucide-react';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\n// Define a local form type with index signature\ninterface SectorFormData {\n    name: string;\n    description: string;\n    plant_id: string;\n    area_id: string;\n    [key: string]: any;\n}\n\ninterface SectorFormComponentProps {\n    sector?: Sector & {\n        area: Area & {\n            plant: Plant;\n        };\n    };\n    plants?: Plant[];\n    initialMode?: 'view' | 'edit';\n    onCancel?: () => void;\n    onSuccess?: () => void;\n}\n\nexport default function SectorFormComponent({ sector, plants = [], initialMode = 'view', onCancel, onSuccess }: SectorFormComponentProps) {\n    const isEditing = !!sector;\n    const [mode, setMode] = useState<'view' | 'edit'>(initialMode);\n    const isViewMode = mode === 'view' && isEditing;\n\n    // State for sheets\n    const [plantSheetOpen, setPlantSheetOpen] = useState(false);\n    const [areaSheetOpen, setAreaSheetOpen] = useState(false);\n\n    // Refs\n    const plantSelectRef = useRef<HTMLButtonElement | null>(null);\n    const areaSelectRef = useRef<HTMLButtonElement | null>(null);\n\n    // Ensure mode updates when initialMode changes\n    useEffect(() => {\n        setMode(initialMode);\n    }, [initialMode]);\n\n    const { data, setData, put, processing, errors, clearErrors, reset } = useForm<SectorFormData>({\n        name: sector?.name || '',\n        description: '',\n        plant_id: sector?.area?.plant?.id?.toString() || '',\n        area_id: sector?.area_id?.toString() || '',\n    });\n\n    // Get available areas based on selected plant\n    const availableAreas = useMemo(() => {\n        if (!data.plant_id) return [];\n        const selectedPlant = plants.find((p) => p.id.toString() === data.plant_id);\n        return selectedPlant?.areas || [];\n    }, [data.plant_id, plants]);\n\n    const handleSave = () => {\n        if (isEditing) {\n            put(route('asset-hierarchy.setores.update', { setor: sector.id }), {\n                onSuccess: () => {\n                    toast.success(`O setor ${data.name} foi atualizado com sucesso!`);\n                    setMode('view');\n                    if (onSuccess) {\n                        onSuccess();\n                    } else {\n                        router.reload();\n                    }\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar setor', {\n                        description: 'Verifique os campos e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const handleCancel = () => {\n        if (isEditing && mode === 'edit') {\n            // Reset form to original data\n            reset();\n            setMode('view');\n        } else if (onCancel) {\n            onCancel();\n        }\n    };\n\n    const handleEdit = () => {\n        setMode('edit');\n    };\n\n    const handleCreatePlantClick = () => {\n        setPlantSheetOpen(true);\n    };\n\n    const handlePlantCreated = () => {\n        setPlantSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && updatedPlants.length > 0) {\n                    // Find the newest plant (usually the last one)\n                    const newestPlant = updatedPlants[updatedPlants.length - 1];\n                    setData('plant_id', newestPlant.id.toString());\n                    setData('area_id', ''); // Clear area when plant changes\n\n                    // Focus and highlight the plant select field\n                    setTimeout(() => {\n                        const selectButton = plantSelectRef.current;\n                        if (selectButton) {\n                            selectButton.focus();\n                            // Add a temporary highlight effect with smooth transition\n                            selectButton.classList.add('ring-2', 'ring-primary', 'ring-offset-2', 'transition-all', 'duration-300');\n                            setTimeout(() => {\n                                selectButton.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');\n                                // Remove transition classes after animation completes\n                                setTimeout(() => {\n                                    selectButton.classList.remove('transition-all', 'duration-300');\n                                }, 300);\n                            }, 2000);\n                        }\n                    }, 100);\n                }\n            },\n        });\n    };\n\n    const handleCreateAreaClick = () => {\n        setAreaSheetOpen(true);\n    };\n\n    const handleAreaCreated = () => {\n        setAreaSheetOpen(false);\n        router.reload({\n            only: ['plants'],\n            onSuccess: (page) => {\n                const updatedPlants = page.props.plants as Plant[];\n                if (updatedPlants && data.plant_id) {\n                    const currentPlant = updatedPlants.find((p) => p.id.toString() === data.plant_id);\n                    if (currentPlant?.areas && currentPlant.areas.length > 0) {\n                        const newestArea = currentPlant.areas[currentPlant.areas.length - 1];\n                        setData('area_id', newestArea.id.toString());\n\n                        // Focus and highlight the area select field\n                        setTimeout(() => {\n                            const selectButton = areaSelectRef.current;\n                            if (selectButton) {\n                                selectButton.focus();\n                                // Add a temporary highlight effect with smooth transition\n                                selectButton.classList.add('ring-2', 'ring-primary', 'ring-offset-2', 'transition-all', 'duration-300');\n                                setTimeout(() => {\n                                    selectButton.classList.remove('ring-2', 'ring-primary', 'ring-offset-2');\n                                    // Remove transition classes after animation completes\n                                    setTimeout(() => {\n                                        selectButton.classList.remove('transition-all', 'duration-300');\n                                    }, 300);\n                                }, 2000);\n                            }\n                        }, 100);\n                    }\n                }\n            },\n        });\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            {/* Form Fields */}\n            <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2\">\n                {/* Nome */}\n                <TextInput\n                    form={{\n                        data,\n                        setData,\n                        errors,\n                        clearErrors,\n                    }}\n                    name=\"name\"\n                    label=\"Nome\"\n                    placeholder={isViewMode ? 'Nome não informado' : 'Digite o nome do setor'}\n                    required={!isViewMode}\n                    view={isViewMode}\n                />\n\n                {/* Planta */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={plantSelectRef}\n                        label=\"Planta\"\n                        items={plants}\n                        value={data.plant_id}\n                        onValueChange={(value) => {\n                            setData('plant_id', value);\n                            if (!value) {\n                                // Se limpar a planta, limpar também a área\n                                setData('area_id', '');\n                            } else {\n                                // Se mudar a planta, limpar a área\n                                setData('area_id', '');\n                            }\n                            clearErrors('plant_id');\n                        }}\n                        onCreateClick={handleCreatePlantClick}\n                        placeholder={isViewMode && !data.plant_id ? 'Planta não selecionada' : 'Selecione uma planta'}\n                        error={errors.plant_id}\n                        disabled={isViewMode}\n                        view={isViewMode}\n                        required={!isViewMode}\n                    />\n                </div>\n\n                {/* Área */}\n                <div className=\"grid gap-2\">\n                    <ItemSelect\n                        ref={areaSelectRef}\n                        label=\"Área\"\n                        items={availableAreas}\n                        value={data.area_id}\n                        onValueChange={(value) => {\n                            setData('area_id', value);\n                            clearErrors('area_id');\n                        }}\n                        onCreateClick={handleCreateAreaClick}\n                        placeholder={\n                            isViewMode && !data.area_id\n                                ? 'Área não selecionada'\n                                : data.plant_id\n                                  ? 'Selecione uma área'\n                                  : 'Selecione uma planta primeiro'\n                        }\n                        error={errors.area_id}\n                        disabled={!data.plant_id || isViewMode}\n                        view={isViewMode}\n                        required={!isViewMode}\n                    />\n                </div>\n\n                {/* Descrição - Ocupa toda a largura */}\n                <div className=\"md:col-span-2\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"description\">Descrição</Label>\n                        {isViewMode && !data.description ? (\n                            <div className=\"border-input bg-muted/20 text-muted-foreground flex min-h-[60px] w-full rounded-md border px-3 py-2 text-sm\">\n                                Sem descrição\n                            </div>\n                        ) : (\n                            <Textarea\n                                id=\"description\"\n                                value={data.description}\n                                onChange={(e) => setData('description', e.target.value)}\n                                placeholder=\"Descrição do setor\"\n                                className=\"min-h-[60px]\"\n                                view={isViewMode}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n\n            {/* Action Buttons */}\n            {isEditing && (\n                <div className=\"flex justify-end gap-2\">\n                    {isViewMode ? (\n                        <Button onClick={handleEdit} variant=\"default\">\n                            <Pencil className=\"mr-2 h-4 w-4\" />\n                            Editar\n                        </Button>\n                    ) : (\n                        <>\n                            <Button onClick={handleCancel} variant=\"outline\" disabled={processing}>\n                                Cancelar\n                            </Button>\n                            <Button onClick={handleSave} disabled={processing}>\n                                {processing ? 'Salvando...' : 'Salvar'}\n                            </Button>\n                        </>\n                    )}\n                </div>\n            )}\n\n            {/* CreatePlantSheet for creating new plants */}\n            <CreatePlantSheet open={plantSheetOpen} onOpenChange={setPlantSheetOpen} onSuccess={handlePlantCreated} />\n\n            {/* CreateAreaSheet for creating new areas */}\n            <CreateAreaSheet\n                open={areaSheetOpen}\n                onOpenChange={setAreaSheetOpen}\n                plants={plants}\n                selectedPlantId={data.plant_id}\n                disableParentFields={true}\n                onSuccess={handleAreaCreated}\n            />\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ShiftCalendarView.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ShiftSelectionCard.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 151,
                "column": 57,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 151,
                "endColumn": 60,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                4473,
                                4476
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                4473,
                                4476
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateShiftSheet from '@/components/CreateShiftSheet';\nimport ItemSelect from '@/components/ItemSelect';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { router } from '@inertiajs/react';\nimport axios from 'axios';\nimport { AlertCircle, Calendar, Clock, Edit2 } from 'lucide-react';\nimport { forwardRef, useImperativeHandle, useRef, useState } from 'react';\n\ninterface Break {\n    start_time: string;\n    end_time: string;\n}\n\ninterface ShiftDetail {\n    start_time: string;\n    end_time: string;\n    active: boolean;\n    breaks: Break[];\n}\n\ninterface Schedule {\n    weekday: string;\n    shifts: ShiftDetail[];\n}\n\ninterface Shift {\n    id: number;\n    name: string;\n    plant?: {\n        id: number;\n        name: string;\n    };\n    schedules: Schedule[];\n    total_work_hours?: number;\n    total_work_minutes?: number;\n    total_break_hours?: number;\n    total_break_minutes?: number;\n}\n\ninterface ShiftSelectionCardProps {\n    shifts: Shift[];\n    selectedShiftId: string;\n    tempSelectedShiftId: string;\n    isEditingShift: boolean;\n    loadingShifts: boolean;\n    onEditShift: () => void;\n    onCancelShiftEdit: () => void;\n    onSaveShift: () => void;\n    onShiftChange: (shiftId: string) => void;\n    onCreateClick: () => void;\n    onShiftUpdated?: (updatedShift: Shift) => void;\n}\n\n// Type for the shift data used in CreateShiftSheet\ninterface EditableShift {\n    id: number;\n    name: string;\n    schedules: Schedule[];\n}\n\n// Helper functions\nconst timeToMinutes = (time: string): number => {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n};\n\nconst calculateDuration = (start: string, end: string): number => {\n    const startMinutes = timeToMinutes(start);\n    let endMinutes = timeToMinutes(end);\n\n    if (endMinutes < startMinutes) {\n        endMinutes += 24 * 60;\n    }\n\n    return endMinutes - startMinutes;\n};\n\nconst formatHours = (totalMinutes: number): string => {\n    const hours = Math.floor(totalMinutes / 60);\n    const minutes = totalMinutes % 60;\n    if (minutes === 0) {\n        return `${hours} horas`;\n    }\n    return `${hours}h ${minutes}min`;\n};\n\n// Add ref methods interface\ninterface ShiftSelectionCardRef {\n    triggerEditWithFocus: () => void;\n}\n\nconst ShiftSelectionCard = forwardRef<ShiftSelectionCardRef, ShiftSelectionCardProps>(\n    (\n        {\n            shifts,\n            selectedShiftId,\n            tempSelectedShiftId,\n            isEditingShift,\n            loadingShifts,\n            onEditShift,\n            onCancelShiftEdit,\n            onSaveShift,\n            onShiftChange,\n            onCreateClick,\n            onShiftUpdated,\n        },\n        ref,\n    ) => {\n        const [isEditSheetOpen, setIsEditSheetOpen] = useState(false);\n        const [selectedShiftData, setSelectedShiftData] = useState<EditableShift | null>(null);\n        const [loadingShiftData, setLoadingShiftData] = useState(false);\n        const itemSelectRef = useRef<HTMLButtonElement>(null);\n\n        // Find the currently selected shift\n        const currentShift = shifts.find((s) => s.id.toString() === (isEditingShift ? tempSelectedShiftId : selectedShiftId));\n\n        // Handle edit/add shift button click\n        const handleEditShiftClick = () => {\n            onEditShift();\n            // Focus the ItemSelect after state update\n            setTimeout(() => {\n                itemSelectRef.current?.focus();\n            }, 100);\n        };\n\n        // Expose the edit+focus function to parent components\n        useImperativeHandle(ref, () => ({\n            triggerEditWithFocus: handleEditShiftClick,\n        }));\n\n        // Handle edit existing shift button click\n        const handleEditExistingShiftClick = async () => {\n            if (!tempSelectedShiftId) return;\n\n            setLoadingShiftData(true);\n            try {\n                const response = await axios.get(route('asset-hierarchy.shifts.show', { shift: tempSelectedShiftId }), {\n                    params: { format: 'json' },\n                });\n                setSelectedShiftData(response.data.shift);\n                setIsEditSheetOpen(true);\n            } catch (error) {\n                console.error('Error loading shift data:', error);\n            } finally {\n                setLoadingShiftData(false);\n            }\n        };\n\n        // Handle successful shift update\n        const handleShiftUpdateSuccess = (updatedShift: any) => {\n            setIsEditSheetOpen(false);\n            setSelectedShiftData(null);\n\n            // Check if this is a new shift (created from copy operation)\n            // We can detect this by checking if the shift ID is different from the one we were editing\n            const isNewShiftFromCopy = selectedShiftData && updatedShift.id !== selectedShiftData.id;\n\n            if (isNewShiftFromCopy) {\n                // For copy operation, exit edit mode first\n                if (isEditingShift) {\n                    onCancelShiftEdit();\n                }\n\n                // Then reload the page, preserving the current tab\n                // The asset is already associated with the new shift by the backend\n                // Reloading will refresh the shifts list, runtime data, and select the new shift\n                setTimeout(() => {\n                    // Get current URL and ensure we stay on the shifts-runtime tab\n                    const currentUrl = new URL(window.location.href);\n                    currentUrl.searchParams.set('tab', 'shifts-runtime');\n                    router.visit(currentUrl.toString(), {\n                        preserveScroll: true,\n                        preserveState: false,\n                    });\n                }, 100); // Small delay to ensure state updates are processed\n            } else {\n                // For regular updates, use the existing strategy\n                // Don't reload the page - let the parent component handle the update\n                // This ensures we stay on the same tab, just like when creating a new shift\n                if (onShiftUpdated) {\n                    // The updatedShift from CreateShiftSheet already has the correct format\n                    // matching what the parent expects\n                    onShiftUpdated(updatedShift);\n                }\n            }\n        };\n\n        // Calculate totals for the selected shift\n        let totalWorkMinutes = 0;\n        let totalBreakMinutes = 0;\n\n        if (currentShift?.schedules) {\n            currentShift.schedules.forEach((schedule) => {\n                schedule.shifts.forEach((shift) => {\n                    if (shift.active) {\n                        const shiftDuration = calculateDuration(shift.start_time, shift.end_time);\n                        totalWorkMinutes += shiftDuration;\n\n                        shift.breaks.forEach((breakTime) => {\n                            const breakDuration = calculateDuration(breakTime.start_time, breakTime.end_time);\n                            totalBreakMinutes += breakDuration;\n                        });\n                    }\n                });\n            });\n        } else if (currentShift) {\n            // Use pre-calculated values if available\n            totalWorkMinutes = (currentShift.total_work_hours || 0) * 60 + (currentShift.total_work_minutes || 0);\n            totalBreakMinutes = (currentShift.total_break_hours || 0) * 60 + (currentShift.total_break_minutes || 0);\n        }\n\n        const netWorkMinutes = totalWorkMinutes - totalBreakMinutes;\n\n        // Determine if we have a selected shift (either in edit mode or normal mode)\n        const hasSelectedShift = (isEditingShift ? tempSelectedShiftId : selectedShiftId) && currentShift;\n\n        return (\n            <div className=\"h-full space-y-4\">\n                <div className=\"flex h-full flex-col rounded-lg border border-gray-200 p-6\">\n                    {/* Header with title and action buttons */}\n                    <div className=\"mb-4 flex items-center justify-between\">\n                        <h3 className=\"text-lg font-semibold text-gray-900\">Configuração de Turno</h3>\n                        {!isEditingShift && hasSelectedShift ? (\n                            <Button onClick={handleEditShiftClick} variant=\"outline\" size=\"sm\">\n                                <Calendar className=\"mr-2 h-4 w-4\" />\n                                Modificar\n                            </Button>\n                        ) : isEditingShift ? (\n                            <div className=\"flex gap-2\">\n                                <Button onClick={onCancelShiftEdit} variant=\"outline\" size=\"sm\">\n                                    Cancelar\n                                </Button>\n                                <Button onClick={onSaveShift} size=\"sm\" variant=\"default\">\n                                    Salvar\n                                </Button>\n                            </div>\n                        ) : null}\n                    </div>\n\n                    {/* Shift Selection */}\n                    <div className=\"mb-4\">\n                        {/* Header - always visible */}\n                        <div className=\"mb-1 flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4 text-gray-500\" />\n                            <span className=\"text-sm font-medium text-gray-700\">Turno de Operação</span>\n                        </div>\n\n                        {!isEditingShift ? (\n                            // View mode - Display shift name like runtime hours\n                            <div>\n                                <p className=\"text-2xl font-bold text-gray-900\">{currentShift?.name || 'Nenhum turno selecionado'}</p>\n                            </div>\n                        ) : (\n                            // Edit mode - Show ItemSelect\n                            <div className=\"flex items-center gap-2\">\n                                <div className=\"flex-1\">\n                                    <ItemSelect\n                                        ref={itemSelectRef}\n                                        items={shifts.map((shift) => ({\n                                            id: shift.id,\n                                            name: shift.name,\n                                            value: shift.id.toString(),\n                                        }))}\n                                        value={isEditingShift ? tempSelectedShiftId : selectedShiftId}\n                                        onValueChange={onShiftChange}\n                                        placeholder={loadingShifts ? 'Carregando turnos...' : 'Selecione um turno'}\n                                        canCreate={isEditingShift}\n                                        onCreateClick={onCreateClick}\n                                        disabled={loadingShifts || !isEditingShift}\n                                        canClear={isEditingShift}\n                                    />\n                                </div>\n                                {isEditingShift && tempSelectedShiftId && (\n                                    <Button\n                                        onClick={handleEditExistingShiftClick}\n                                        variant=\"outline\"\n                                        size=\"sm\"\n                                        disabled={loadingShiftData}\n                                        className=\"\"\n                                    >\n                                        <Edit2 className=\"mr-2 h-4 w-4\" />\n                                        {loadingShiftData ? 'Carregando...' : 'Editar'}\n                                    </Button>\n                                )}\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Shift Summary - More compact design matching AssetRuntimeInput */}\n                    {currentShift ? (\n                        <div className=\"space-y-3\">\n                            {/* Weekly Hours Summary */}\n                            <div>\n                                <div className=\"grid grid-cols-3 gap-2\">\n                                    <div>\n                                        <p className=\"text-sm font-medium text-gray-700\">Horas Semanais</p>\n                                        <p className=\"text-lg font-bold text-gray-900\">{formatHours(totalWorkMinutes)}</p>\n                                    </div>\n                                    <div>\n                                        <p className=\"text-sm font-medium text-gray-700\">Intervalos</p>\n                                        <p className=\"text-lg font-bold text-gray-900\">{formatHours(totalBreakMinutes)}</p>\n                                    </div>\n                                    <div>\n                                        <p className=\"text-sm font-medium text-gray-700\">Trabalhando</p>\n                                        <p className=\"text-primary-600 text-lg font-bold\">{formatHours(netWorkMinutes)}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : selectedShiftId || tempSelectedShiftId ? (\n                        <div className=\"mb-4 rounded-md bg-gray-50 p-3\">\n                            <p className=\"text-center text-xs text-gray-500\">Carregando informações do turno...</p>\n                        </div>\n                    ) : (\n                        <div className=\"mb-4 rounded-md bg-gray-50 p-3\">\n                            <p className=\"text-center text-xs text-gray-500\">Selecione um turno para ver o resumo</p>\n                        </div>\n                    )}\n\n                    {/* Alert about automatic runtime recording */}\n                    {isEditingShift && tempSelectedShiftId && tempSelectedShiftId !== selectedShiftId && (\n                        <Alert className=\"mt-3\">\n                            <AlertCircle className=\"h-4 w-4\" />\n                            <AlertDescription>\n                                Ao salvar a mudança de turno, o horímetro atual será registrado automaticamente para preservar o histórico de\n                                operação.\n                            </AlertDescription>\n                        </Alert>\n                    )}\n                </div>\n\n                {/* CreateShiftSheet for editing */}\n                {selectedShiftData && (\n                    <CreateShiftSheet\n                        isOpen={isEditSheetOpen}\n                        onOpenChange={setIsEditSheetOpen}\n                        onSuccess={handleShiftUpdateSuccess}\n                        initialShift={selectedShiftData}\n                    />\n                )}\n            </div>\n        );\n    },\n);\n\nShiftSelectionCard.displayName = 'ShiftSelectionCard';\n\nexport default ShiftSelectionCard;\nexport type { ShiftSelectionCardRef };\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ShiftTableView.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ShiftVisualization.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TaskCard.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TaskDescriptionInput.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                263,
                                266
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                263,
                                266
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 16,
                "column": 41,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 16,
                "endColumn": 44,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                448,
                                451
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                448,
                                451
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import InputError from '@/components/input-error';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { cn } from '@/lib/utils';\nimport { LucideIcon } from 'lucide-react';\n\ninterface FormData {\n    [key: string]: any;\n}\n\ninterface TaskDescriptionInputProps<T extends FormData> {\n    mode: 'view' | 'edit';\n    icon: LucideIcon;\n    form?: {\n        data: T;\n        setData: (name: keyof T, value: any) => void;\n        errors: Partial<Record<keyof T, string>>;\n        clearErrors: (...fields: (keyof T)[]) => void;\n    };\n    name?: keyof T;\n    value?: string;\n    placeholder?: string;\n    required?: boolean;\n}\n\nexport default function TaskDescriptionInput<T extends FormData>({\n    mode,\n    icon: Icon,\n    form,\n    name,\n    value: propValue,\n    placeholder,\n    required = false,\n}: TaskDescriptionInputProps<T>) {\n    const baseClasses = 'flex items-center gap-2';\n    const textClasses = 'text-lg font-semibold flex-1 leading-none';\n\n    if (mode === 'view') {\n        return (\n            <div className={baseClasses}>\n                <Icon className=\"text-muted-foreground h-5 w-5\" />\n                <Label className={cn(textClasses, !propValue && 'text-muted-foreground')}>\n                    {propValue || 'Clique em Editar para configurar a tarefa'}\n                </Label>\n            </div>\n        );\n    }\n\n    if (!form || !name) return null;\n\n    const { data, setData, errors, clearErrors } = form;\n    const value = data[name] ?? '';\n\n    return (\n        <div className=\"mr-4 flex-1\">\n            <div className={baseClasses}>\n                <Icon className=\"text-muted-foreground h-6 w-6\" />\n                <div\n                    className={cn(\n                        'border-input flex-1 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs',\n                        'focus-within:ring-ring/50 focus-within:border-ring focus-within:ring-[3px]',\n                        errors[name] && 'border-destructive',\n                    )}\n                >\n                    <Input\n                        id={name as string}\n                        type=\"text\"\n                        value={value}\n                        onChange={(e) => {\n                            setData(name, e.target.value);\n                            if (e.target.value) {\n                                clearErrors(name);\n                            }\n                        }}\n                        placeholder={placeholder}\n                        className={cn('border-none px-0 py-0 shadow-none', '!text-lg !leading-none !font-semibold', 'focus-visible:ring-0')}\n                        required={required}\n                    />\n                    <InputError message={errors[name]} className=\"absolute\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TaskEditorCard.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'setData'. Either include it or remove the dependency array.",
                "line": 126,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 126,
                "endColumn": 21,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [initialTask, setData]",
                        "fix": {
                            "range": [
                                5073,
                                5086
                            ],
                            "text": "[initialTask, setData]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ItemSelect from '@/components/ItemSelect';\nimport TaskDescriptionInput from '@/components/TaskDescriptionInput';\nimport AddTaskButton from '@/components/tasks/AddTaskButton';\nimport TextInput from '@/components/TextInput';\nimport {\n    AlertDialog,\n    AlertDialogCancel,\n    AlertDialogContent,\n    AlertDialogDescription,\n    AlertDialogFooter,\n    AlertDialogHeader,\n    AlertDialogTitle,\n    AlertDialogTrigger,\n} from '@/components/ui/alert-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { CodeReaderTypes, DefaultMeasurement, Measurement, Task, TaskOperations, TaskState, TaskTypes } from '@/types/task';\nimport { MeasurementUnitCategories, UnitCategory, findUnitCategory } from '@/types/units';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { useForm } from '@inertiajs/react';\nimport { ClipboardList, Clock, GripVertical, Plus, X } from 'lucide-react';\nimport { useEffect, useState } from 'react';\n\ninterface TaskEditorCardProps {\n    /** A tarefa inicial sendo editada */\n    initialTask?: Task;\n    /** Propriedades essenciais da tarefa em edição */\n    task: Pick<Task, 'type' | 'measurement' | 'options' | 'isRequired'>;\n    /** Callback para pré-visualizar a tarefa após edição */\n    onPreview: (task: Task) => void;\n    /** Callback para remover a tarefa */\n    onRemove: () => void;\n    /** Callback para adicionar uma nova tarefa após esta */\n    onNewTask: (newTask?: Task) => void;\n    /** Callback para atualizar a tarefa com uma operação */\n    updateTask: (operation: (task: Task) => Task) => void;\n}\n\ninterface TaskForm {\n    description: string;\n    codeReaderType: 'qr_code' | 'barcode' | undefined;\n    codeReaderInstructions: string;\n    fileUploadInstructions: string;\n    options: NonNullable<Task['options']>;\n    [key: string]: string | number | boolean | File | null | NonNullable<Task['options']> | undefined;\n}\n\nexport default function TaskEditorCard({\n    initialTask,\n    task: { type: taskType = 'question', measurement, options = [], isRequired },\n    onPreview,\n    onRemove,\n    onNewTask,\n    updateTask,\n}: TaskEditorCardProps) {\n    const { data, setData, errors, clearErrors } = useForm<TaskForm>({\n        description: initialTask?.description || '',\n        codeReaderType: initialTask?.codeReaderType,\n        codeReaderInstructions: initialTask?.codeReaderInstructions || '',\n        fileUploadInstructions: initialTask?.fileUploadInstructions || '',\n        options: options,\n    });\n\n    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({\n        id: `task-${initialTask?.id}`,\n        animateLayoutChanges: () => false,\n    });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition: transition && 'transform 150ms ease',\n        opacity: isDragging ? 0.5 : undefined,\n        zIndex: isDragging ? 1 : undefined,\n    };\n\n    const [isChoiceBasedTask, setIsChoiceBasedTask] = useState(taskType === 'multiple_choice' || taskType === 'multiple_select');\n\n    // Função utilitária para criar uma tarefa a partir do formulário\n    const createTaskFromForm = (): Task => {\n        if (!taskType) {\n            throw new Error('Tipo de tarefa não definido');\n        }\n\n        const newTask: Task = {\n            id: initialTask?.id || '0',\n            type: taskType,\n            description: data.description,\n            instructionImages: initialTask?.instructionImages || [],\n            instructions: initialTask?.instructions || [],\n            isRequired,\n            state: TaskState.Viewing,\n        };\n\n        if (isChoiceBasedTask) {\n            newTask.options = data.options;\n        } else if (taskType === 'measurement') {\n            newTask.measurement = measurement;\n        } else if (taskType === 'code_reader') {\n            if (data.codeReaderType) {\n                newTask.codeReaderType = data.codeReaderType;\n                newTask.codeReaderInstructions = data.codeReaderInstructions;\n            }\n        } else if (taskType === 'file_upload') {\n            newTask.fileUploadInstructions = data.fileUploadInstructions;\n        }\n\n        return newTask;\n    };\n\n    useEffect(() => {\n        if (initialTask) {\n            setData({\n                description: initialTask.description || '',\n                codeReaderType: initialTask.codeReaderType,\n                codeReaderInstructions: initialTask.codeReaderInstructions || '',\n                fileUploadInstructions: initialTask.fileUploadInstructions || '',\n                options: initialTask.options || [],\n            });\n            setIsChoiceBasedTask(initialTask.type === 'multiple_choice' || initialTask.type === 'multiple_select');\n        }\n    }, [initialTask]);\n\n    const taskLabels = taskType ? TaskTypes.find((t) => t.value === taskType) : null;\n\n    const handleRequiredChange = (required: boolean) => {\n        updateTask((task) => TaskOperations.updateRequired(task, required));\n    };\n\n    const handleOptionsChange = (newOptions: string[]) => {\n        updateTask((task) => TaskOperations.updateOptions(task, newOptions));\n    };\n\n    const handleAddOption = () => {\n        updateTask(TaskOperations.addOption);\n    };\n\n    const handleRemoveOption = (index: number) => {\n        updateTask((task) => TaskOperations.removeOption(task, index));\n    };\n\n    const handleMeasurementChange = (newMeasurement: Measurement) => {\n        updateTask((task) => TaskOperations.updateMeasurement(task, newMeasurement));\n    };\n\n    return (\n        <Card ref={setNodeRef} style={style} className={`bg-muted/90 ${isDragging ? 'shadow-lg' : ''}`}>\n            <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                    {taskType && taskLabels && (\n                        <TaskDescriptionInput<TaskForm>\n                            mode=\"edit\"\n                            icon={taskLabels.icon}\n                            form={{\n                                data,\n                                setData,\n                                errors,\n                                clearErrors,\n                            }}\n                            name=\"description\"\n                            value={data.description}\n                            placeholder={taskLabels?.placeholder || 'Digite a descrição da tarefa...'}\n                            required\n                        />\n                    )}\n                    <div className=\"flex items-center gap-4\">\n                        <div className=\"flex items-center gap-2\">\n                            <Switch id=\"required\" checked={isRequired} onCheckedChange={handleRequiredChange} />\n                            <Label htmlFor=\"required\" className=\"text-muted-foreground text-sm\">\n                                Obrigatório\n                            </Label>\n                        </div>\n                        <button {...attributes} {...listeners} className=\"cursor-grab touch-none hover:cursor-grabbing\">\n                            <GripVertical className=\"h-4 w-4 text-gray-500\" />\n                        </button>\n                    </div>\n                </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n                <div className=\"flex flex-col gap-4\">\n                    {!taskType && (\n                        <Card className=\"bg-background shadow-none\">\n                            <CardContent className=\"flex items-start space-x-4 px-4 py-4\">\n                                <div className=\"flex items-center gap-2\">\n                                    <ClipboardList className=\"text-foreground/60 size-6\" />\n                                    <span>Nenhuma tarefa cadastrada</span>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    )}\n\n                    {taskType === 'code_reader' && (\n                        <div className=\"w-90\">\n                            <ItemSelect\n                                items={CodeReaderTypes}\n                                label=\"Tipo de Código\"\n                                value={data.codeReaderType ? String(CodeReaderTypes.find((t) => t.value === data.codeReaderType)?.id || '') : ''}\n                                onValueChange={(value) => {\n                                    const selectedType = CodeReaderTypes.find((t) => t.id === Number(value));\n                                    if (selectedType) {\n                                        setData('codeReaderType', selectedType.value);\n                                    } else {\n                                        setData('codeReaderType', undefined);\n                                    }\n                                }}\n                                placeholder=\"Selecione o tipo de código\"\n                                required\n                                canCreate={false}\n                                createRoute=\"\"\n                            />\n                        </div>\n                    )}\n\n                    {taskType ? (\n                        <div className=\"grid gap-2\">\n                            <TextInput<TaskForm>\n                                form={{\n                                    data,\n                                    setData,\n                                    errors,\n                                    clearErrors,\n                                }}\n                                name=\"description\"\n                                label={taskLabels?.label || ''}\n                                placeholder={taskLabels?.placeholder || 'Digite a descrição da tarefa...'}\n                                required\n                            />\n                        </div>\n                    ) : (\n                        <Card className=\"bg-background shadow-none\">\n                            <CardContent className=\"flex items-start space-x-4 px-4 py-4\">\n                                <div className=\"flex items-center gap-2\">\n                                    <ClipboardList className=\"text-foreground/60 size-6\" />\n                                    <span>Nenhuma tarefa cadastrada</span>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    )}\n\n                    {isChoiceBasedTask && (\n                        <div className=\"grid gap-2\">\n                            <div className=\"space-y-0.5 pl-4\">\n                                <div className=\"mb-2 flex items-center justify-between\">\n                                    <Label className=\"ml-2 pt-2 text-base font-medium\">\n                                        {taskType === 'multiple_choice' ? 'Opções de Escolha' : 'Opções de Seleção'}\n                                    </Label>\n                                    <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={handleAddOption} className=\"flex items-center gap-2\">\n                                        <Plus className=\"mr-2 h-4 w-4\" />\n                                        Adicionar Opção\n                                    </Button>\n                                </div>\n                                {options.length === 0 ? (\n                                    <Card className=\"bg-background shadow-none\">\n                                        <CardContent className=\"flex items-start space-x-4 px-4\">\n                                            <div className=\"bg-muted/50 flex size-12 items-center justify-center rounded-full\">\n                                                <Clock className=\"text-foreground/60 size-6\" />\n                                            </div>\n                                            <div className=\"flex flex-col\">\n                                                <h3 className=\"text-md font-medium\">Nenhuma opção adicionada</h3>\n                                                <p className=\"text-muted-foreground text-sm\">Adicione opções de resposta para esta tarefa.</p>\n                                            </div>\n                                        </CardContent>\n                                    </Card>\n                                ) : (\n                                    <div className=\"space-y-2\">\n                                        {options.map((value, index) => (\n                                            <Card key={index} className=\"bg-background shadow-none\">\n                                                <CardContent className=\"flex items-center space-x-2\">\n                                                    <div className=\"flex-1\">\n                                                        <TextInput<TaskForm>\n                                                            form={{\n                                                                data: {\n                                                                    ...data,\n                                                                    [`option-${index}`]: value,\n                                                                },\n                                                                setData: (field, value) => {\n                                                                    if (field === `option-${index}`) {\n                                                                        const newOptions = [...options];\n                                                                        newOptions[index] = value;\n                                                                        handleOptionsChange(newOptions);\n                                                                    }\n                                                                },\n                                                                errors,\n                                                                clearErrors,\n                                                            }}\n                                                            name={`option-${index}`}\n                                                            label={`Opção ${index + 1}`}\n                                                            placeholder={`Descreva a opção ${index + 1}`}\n                                                        />\n                                                    </div>\n                                                    <Button\n                                                        type=\"button\"\n                                                        variant=\"destructive\"\n                                                        size=\"icon\"\n                                                        className=\"mt-6 h-6 w-6\"\n                                                        onClick={() => handleRemoveOption(index)}\n                                                    >\n                                                        <X className=\"h-3 w-3\" />\n                                                    </Button>\n                                                </CardContent>\n                                            </Card>\n                                        ))}\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    )}\n\n                    {taskType === 'measurement' && (\n                        <div>\n                            <Label>Medição</Label>\n                            <div className=\"space-y-4\">\n                                <Card className=\"bg-background\">\n                                    <CardContent className=\"pt-4\">\n                                        <div className=\"mb-2\">\n                                            <Input\n                                                value={measurement?.name || 'Medição'}\n                                                onChange={(e) => {\n                                                    handleMeasurementChange({\n                                                        ...(measurement || DefaultMeasurement),\n                                                        name: e.target.value,\n                                                    });\n                                                }}\n                                                placeholder=\"Nome da medição\"\n                                                className=\"w-full\"\n                                            />\n                                        </div>\n                                        <div className=\"grid grid-cols-3 gap-2\">\n                                            <div>\n                                                <Label>Mínimo</Label>\n                                                <div className=\"flex\">\n                                                    <Input\n                                                        type=\"number\"\n                                                        value={measurement?.min}\n                                                        onChange={(e) => {\n                                                            handleMeasurementChange({\n                                                                ...(measurement || DefaultMeasurement),\n                                                                min: parseFloat(e.target.value),\n                                                            });\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div>\n                                                <Label>Target</Label>\n                                                <div className=\"flex\">\n                                                    <Input\n                                                        type=\"number\"\n                                                        value={measurement?.target}\n                                                        onChange={(e) => {\n                                                            handleMeasurementChange({\n                                                                ...(measurement || DefaultMeasurement),\n                                                                target: parseFloat(e.target.value),\n                                                            });\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div>\n                                                <Label>Máximo</Label>\n                                                <div className=\"flex\">\n                                                    <Input\n                                                        type=\"number\"\n                                                        value={measurement?.max}\n                                                        onChange={(e) => {\n                                                            handleMeasurementChange({\n                                                                ...(measurement || DefaultMeasurement),\n                                                                max: parseFloat(e.target.value),\n                                                            });\n                                                        }}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </div>\n                                        <div className=\"mt-2\">\n                                            <Label>Unidade</Label>\n                                            <div className=\"space-y-2\">\n                                                <Select\n                                                    value={measurement?.unit ? findUnitCategory(measurement.unit) : 'Comprimento'}\n                                                    onValueChange={(category) => {\n                                                        // Se mudar de categoria, seleciona a primeira unidade da nova categoria\n                                                        const firstUnitInCategory = MeasurementUnitCategories[category as UnitCategory][0].value;\n                                                        handleMeasurementChange({\n                                                            ...(measurement || DefaultMeasurement),\n                                                            unit: firstUnitInCategory,\n                                                        });\n                                                    }}\n                                                >\n                                                    <SelectTrigger>\n                                                        <SelectValue placeholder=\"Escolha uma categoria\" />\n                                                    </SelectTrigger>\n                                                    <SelectContent className=\"max-h-[300px]\">\n                                                        {Object.keys(MeasurementUnitCategories).map((category) => (\n                                                            <SelectItem key={category} value={category}>\n                                                                {category}\n                                                            </SelectItem>\n                                                        ))}\n                                                    </SelectContent>\n                                                </Select>\n                                            </div>\n                                        </div>\n                                    </CardContent>\n                                </Card>\n                            </div>\n                        </div>\n                    )}\n\n                    {taskType === 'photo' && (\n                        <div>\n                            <p className=\"text-muted-foreground text-sm\">\n                                Instruções para registro fotográfico serão configuradas através do sistema de instruções.\n                            </p>\n                        </div>\n                    )}\n\n                    {taskType === 'code_reader' && (\n                        <div>\n                            <TextInput<TaskForm>\n                                form={{\n                                    data,\n                                    setData,\n                                    errors,\n                                    clearErrors,\n                                }}\n                                name=\"codeReaderInstructions\"\n                                label=\"Instruções para Leitura de Código\"\n                                placeholder=\"Como o código deve ser lido...\"\n                            />\n                        </div>\n                    )}\n\n                    {taskType === 'file_upload' && (\n                        <div>\n                            <TextInput<TaskForm>\n                                form={{\n                                    data,\n                                    setData,\n                                    errors,\n                                    clearErrors,\n                                }}\n                                name=\"fileUploadInstructions\"\n                                label=\"Instruções para Upload de Arquivo\"\n                                placeholder=\"Faça o download do registro de vibração e armazene o arquivo aqui...\"\n                            />\n                        </div>\n                    )}\n\n                    <div className=\"mt-4 flex items-center justify-between\">\n                        <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                                <Button type=\"button\" variant=\"destructive\" className=\"flex items-center gap-2\">\n                                    Excluir\n                                </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                                <AlertDialogHeader>\n                                    <AlertDialogTitle>Você tem certeza?</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                        Esta ação não pode ser desfeita. A exclusão será permanente após a Rotina ser salva.\n                                    </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                                    <Button variant=\"destructive\" onClick={onRemove}>\n                                        Sim, excluir tarefa\n                                    </Button>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialog>\n                        <div className=\"flex gap-2\">\n                            <AddTaskButton\n                                label=\"Nova Tarefa Abaixo\"\n                                taskTypes={TaskTypes}\n                                tasks={initialTask ? [initialTask] : undefined}\n                                currentIndex={0}\n                                onTaskAdded={(newTask) => {\n                                    if (onNewTask) {\n                                        onNewTask(newTask);\n                                    }\n                                }}\n                            />\n                            <Button\n                                type=\"button\"\n                                onClick={() => {\n                                    if (!taskType) return;\n                                    onPreview(createTaskFromForm());\n                                }}\n                                className=\"flex items-center gap-2\"\n                                disabled={!taskType}\n                            >\n                                Visualizar\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TextInput.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 30,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 33,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                254,
                                257
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                254,
                                257
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 9,
                "column": 40,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 9,
                "endColumn": 43,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                299,
                                302
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                299,
                                302
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import InputError from '@/components/input-error';\nimport SmartInput from '@/components/smart-input';\nimport { Label } from '@/components/ui/label';\nimport { forwardRef } from 'react';\n\ninterface TextInputProps {\n    form: {\n        data: Record<string, any>;\n        setData: (name: string, value: any) => void;\n        errors: Partial<Record<string, string>>;\n        clearErrors: (...fields: string[]) => void;\n        validateInput?: (value: string) => boolean;\n        processBlur?: (name: string, value: string) => void;\n    };\n    name: string;\n    label: string;\n    placeholder: string;\n    required?: boolean;\n    disabled?: boolean;\n    view?: boolean;\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n    validateInput?: (value: string) => boolean;\n}\n\nconst TextInput = forwardRef<HTMLInputElement, TextInputProps>(\n    ({ form, name, label, placeholder, required = false, disabled = false, view = false, onBlur, validateInput }, ref) => {\n        const value = form.data[name];\n        const hasValue = value !== null && value !== undefined && value !== '';\n\n        return (\n            <div className=\"grid gap-2\">\n                <Label htmlFor={String(name)}>\n                    {label}\n                    {required && <span className=\"text-destructive\"> *</span>}\n                </Label>\n                <div className=\"bg-background\">\n                    {view && !hasValue ? (\n                        <div className=\"border-input bg-muted/20 text-muted-foreground flex h-9 w-full rounded-md border px-3 py-2 text-sm\">\n                            {placeholder}\n                        </div>\n                    ) : (\n                        <SmartInput\n                            ref={ref}\n                            form={form}\n                            name={name}\n                            placeholder={placeholder}\n                            disabled={disabled}\n                            view={view}\n                            onBlur={onBlur}\n                            validateInput={validateInput || form.validateInput}\n                        />\n                    )}\n                </div>\n                <InputError message={form.errors[name]} />\n            </div>\n        );\n    },\n);\n\nTextInput.displayName = 'TextInput';\n\nexport default TextInput;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TimeSelect.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/TimezoneDetector.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-content.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-header.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-logo-icon.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-logo.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-shell.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-sidebar-header.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/app-sidebar.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/appearance-dropdown.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/appearance-tabs.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/breadcrumbs.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/camera-capture.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'startCamera' and 'stopCamera'. Either include them or remove the dependency array.",
                "line": 20,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 20,
                "endColumn": 10,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [startCamera, stopCamera]",
                        "fix": {
                            "range": [
                                737,
                                739
                            ],
                            "text": "[startCamera, stopCamera]"
                        }
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 63,
                "column": 23,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 63,
                "endColumn": 26,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2605,
                                2608
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2605,
                                2608
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Camera, X } from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface CameraCaptureProps {\n    onCapture: (file: File) => void;\n    onClose: () => void;\n}\n\nexport default function CameraCapture({ onCapture, onClose }: CameraCaptureProps) {\n    const videoRef = useRef<HTMLVideoElement>(null);\n    const [stream, setStream] = useState<MediaStream | null>(null);\n    const [error, setError] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isMobile] = useState(/iPhone|iPad|iPod|Android/i.test(navigator.userAgent));\n\n    useEffect(() => {\n        startCamera();\n        return () => stopCamera();\n    }, []);\n\n    const startCamera = async () => {\n        try {\n            // Verifica se está usando HTTPS\n            if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {\n                throw new Error('A câmera só pode ser acessada em conexões seguras (HTTPS)');\n            }\n\n            // Configurações básicas primeiro\n            let constraints: MediaStreamConstraints = {\n                video: {\n                    facingMode: isMobile ? 'environment' : 'user',\n                },\n            };\n\n            try {\n                await navigator.mediaDevices.getUserMedia(constraints);\n\n                // Se conseguir acesso, tenta melhorar a qualidade\n                constraints = {\n                    video: {\n                        facingMode: isMobile ? 'environment' : 'user',\n                        width: { ideal: isMobile ? window.innerWidth : 1920 },\n                        height: { ideal: isMobile ? window.innerHeight : 1080 },\n                    } as MediaTrackConstraints,\n                };\n\n                // Tenta aplicar as configurações de qualidade\n                const betterStream = await navigator.mediaDevices.getUserMedia(constraints);\n                setStream(betterStream);\n                if (videoRef.current) {\n                    videoRef.current.srcObject = betterStream;\n                }\n            } catch (basicError) {\n                // Se falhar com configurações avançadas, usa o stream básico\n                console.warn('Usando configurações básicas da câmera:', basicError);\n                const basicStream = await navigator.mediaDevices.getUserMedia({ video: true });\n                setStream(basicStream);\n                if (videoRef.current) {\n                    videoRef.current.srcObject = basicStream;\n                }\n            }\n        } catch (err: any) {\n            console.error('Erro detalhado da câmera:', err);\n\n            // Mensagens de erro mais específicas\n            if (err.name === 'NotAllowedError' || err.name === 'PermissionDeniedError') {\n                setError('Acesso à câmera negado. Por favor, permita o acesso à câmera nas configurações do seu navegador.');\n            } else if (err.name === 'NotFoundError') {\n                setError('Nenhuma câmera encontrada no dispositivo.');\n            } else if (err.name === 'NotReadableError' || err.name === 'AbortError') {\n                setError('Não foi possível acessar a câmera. Ela pode estar sendo usada por outro aplicativo.');\n            } else if (err.message.includes('HTTPS')) {\n                setError('A câmera só pode ser acessada em conexões seguras (HTTPS).');\n            } else {\n                setError(`Não foi possível acessar a câmera. ${err.message || 'Verifique as permissões.'}`);\n            }\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const stopCamera = () => {\n        if (stream) {\n            stream.getTracks().forEach((track) => track.stop());\n            setStream(null);\n        }\n    };\n\n    const takePhoto = (e: React.MouseEvent) => {\n        e.preventDefault(); // Previne a propagação do evento\n\n        if (videoRef.current) {\n            const canvas = document.createElement('canvas');\n\n            // Usa as dimensões reais do vídeo\n            const videoWidth = videoRef.current.videoWidth;\n            const videoHeight = videoRef.current.videoHeight;\n\n            // Mantém a proporção original\n            canvas.width = videoWidth;\n            canvas.height = videoHeight;\n\n            const ctx = canvas.getContext('2d');\n            if (ctx) {\n                // Desenha a imagem mantendo a orientação correta\n                ctx.drawImage(videoRef.current, 0, 0);\n\n                canvas.toBlob(\n                    (blob) => {\n                        if (blob) {\n                            const file = new File([blob], 'photo.jpg', {\n                                type: 'image/jpeg',\n                                lastModified: Date.now(),\n                            });\n                            onCapture(file);\n                            stopCamera();\n                            onClose();\n                        }\n                    },\n                    'image/jpeg',\n                    0.8,\n                );\n            }\n        }\n    };\n\n    const handleClose = (e?: React.MouseEvent) => {\n        if (e) {\n            e.preventDefault();\n        }\n        stopCamera();\n        onClose();\n    };\n\n    if (error) {\n        return (\n            <div className=\"bg-background/80 fixed inset-0 z-50 backdrop-blur-sm\">\n                <div className=\"bg-background fixed top-[50%] left-[50%] z-50 mx-4 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 shadow-lg sm:mx-0 sm:rounded-lg\">\n                    <div className=\"flex flex-col items-center gap-4 text-center\">\n                        <div className=\"text-destructive\">\n                            <X className=\"h-8 w-8\" />\n                        </div>\n                        <p className=\"text-lg font-semibold\">{error}</p>\n                        <Button type=\"button\" onClick={handleClose}>\n                            Fechar\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"bg-background/80 fixed inset-0 z-50 backdrop-blur-sm\">\n            <div\n                className={`fixed ${isMobile ? 'inset-0' : 'top-[50%] left-[50%] max-w-lg translate-x-[-50%] translate-y-[-50%]'} bg-background z-50 grid w-full gap-4 border shadow-lg ${isMobile ? '' : 'p-6 sm:rounded-lg'}`}\n            >\n                <div className=\"flex flex-col gap-4\">\n                    <div className={`relative ${isMobile ? 'h-[100dvh]' : 'aspect-video'} bg-muted overflow-hidden rounded-lg`}>\n                        {isLoading && (\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\n                                <div className=\"border-primary h-8 w-8 animate-spin rounded-full border-b-2\"></div>\n                            </div>\n                        )}\n                        <video\n                            ref={videoRef}\n                            autoPlay\n                            playsInline\n                            muted // Necessário para autoplay no iOS\n                            className=\"h-full w-full object-cover\"\n                            onLoadedMetadata={() => setIsLoading(false)}\n                        />\n                        <div className=\"absolute top-4 right-4\">\n                            <Button type=\"button\" variant=\"destructive\" size=\"icon\" className=\"h-12 w-12 rounded-full\" onClick={handleClose}>\n                                <X className=\"h-6 w-6\" />\n                            </Button>\n                        </div>\n                    </div>\n\n                    <div className={`flex justify-center gap-4 ${isMobile ? 'fixed right-4 bottom-8 left-4' : ''}`}>\n                        <Button\n                            type=\"button\"\n                            onClick={takePhoto}\n                            disabled={isLoading}\n                            className={`${isMobile ? 'h-16 rounded-full text-lg' : ''} w-full`}\n                        >\n                            <Camera className={`${isMobile ? 'mr-3 h-6 w-6' : 'mr-2 h-4 w-4'}`} />\n                            Tirar Foto\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/data-table.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 44,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 44,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1880,
                                1883
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1880,
                                1883
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ChevronDownIcon, ColumnsIcon } from 'lucide-react';\nimport * as React from 'react';\n\nexport interface Column<T> {\n    id: string;\n    header: React.ReactNode;\n    cell: (row: { original: T }) => React.ReactNode;\n    width?: string;\n}\n\ninterface DataTableProps<T> {\n    data: T[];\n    columns: Column<T>[];\n    columnVisibility: Record<string, boolean>;\n    onRowClick?: (row: T) => void;\n    emptyMessage?: string;\n}\n\nexport function DataTable<T>({ data, columns, columnVisibility, onRowClick, emptyMessage = 'Nenhum registro encontrado.' }: DataTableProps<T>) {\n    // Memoize the filtered columns to prevent unnecessary re-renders\n    const visibleColumns = React.useMemo(() => {\n        return columns.filter((column) => column.id === 'actions' || columnVisibility[column.id]);\n    }, [columns, columnVisibility]);\n\n    return (\n        <div className=\"w-full overflow-hidden rounded-lg border shadow-none\">\n            <Table>\n                <TableHeader className=\"bg-muted sticky top-0 z-10\">\n                    <TableRow>\n                        {visibleColumns.map((column, index) => (\n                            <TableHead key={column.id} className={`${index === 0 ? 'pl-4' : ''} ${column.width || ''}`}>\n                                {column.header}\n                            </TableHead>\n                        ))}\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    {data.length ? (\n                        data.map((row) => (\n                            <TableRow\n                                key={(row as any).id}\n                                className=\"hover:bg-muted/50 cursor-pointer transition-colors\"\n                                onClick={() => onRowClick?.(row)}\n                            >\n                                {visibleColumns.map((column, index) => (\n                                    <TableCell\n                                        key={column.id}\n                                        className={`${index === 0 ? 'pl-4' : ''} ${column.width || ''}`}\n                                        onClick={(e) => {\n                                            if (column.id === 'actions') {\n                                                e.stopPropagation();\n                                            }\n                                        }}\n                                    >\n                                        {column.cell({ original: row })}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        ))\n                    ) : (\n                        <TableRow>\n                            <TableCell colSpan={visibleColumns.length} className=\"h-24 pl-4 text-center\">\n                                {emptyMessage}\n                            </TableCell>\n                        </TableRow>\n                    )}\n                </TableBody>\n            </Table>\n        </div>\n    );\n}\n\ninterface ColumnVisibilityProps {\n    columns: { id: string; header: React.ReactNode }[];\n    columnVisibility: Record<string, boolean>;\n    onColumnVisibilityChange: (columnId: string, value: boolean) => void;\n}\n\nexport function ColumnVisibility({ columns, columnVisibility, onColumnVisibilityChange }: ColumnVisibilityProps) {\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\">\n                    <ColumnsIcon className=\"mr-2 h-4 w-4\" />\n                    <span className=\"hidden lg:inline\">Customizar Colunas</span>\n                    <span className=\"lg:hidden\">Colunas</span>\n                    <ChevronDownIcon className=\"ml-2 h-4 w-4\" />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n                {columns\n                    .filter((column) => column.id !== 'actions')\n                    .map((column) => (\n                        <DropdownMenuCheckboxItem\n                            key={column.id}\n                            className=\"capitalize\"\n                            checked={columnVisibility[column.id]}\n                            onCheckedChange={(value) => {\n                                onColumnVisibilityChange(column.id, value);\n                            }}\n                        >\n                            {column.header}\n                        </DropdownMenuCheckboxItem>\n                    ))}\n            </DropdownMenuContent>\n        </DropdownMenu>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/delete-asset.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/delete-user.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/export-status-indicator.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/form-lifecycle/FormExecutionGuard.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 13,
                "column": 34,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 13,
                "endColumn": 37,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                556,
                                559
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                556,
                                559
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { AlertCircle, Play, Upload } from 'lucide-react';\nimport React from 'react';\nimport { toast } from 'sonner';\nimport { getFormState, type FormData } from './FormStatusBadge';\n\ninterface FormExecutionGuardProps {\n    form: FormData;\n    onExecute: (versionId: number) => void;\n    onPublishAndExecute?: () => void;\n    onEditForm?: () => void;\n    children: React.ReactElement<any>;\n}\n\nexport default function FormExecutionGuard({ form, onExecute, onPublishAndExecute, onEditForm, children }: FormExecutionGuardProps) {\n    const [showDialog, setShowDialog] = React.useState(false);\n    const state = getFormState(form);\n\n    const handleClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (state === 'unpublished') {\n            toast.error('Formulário não publicado', {\n                description: 'Esta rotina precisa ser publicada antes de ser executada.',\n                action: onEditForm\n                    ? {\n                          label: 'Editar Formulário',\n                          onClick: onEditForm,\n                      }\n                    : undefined,\n            });\n            return;\n        }\n\n        if (state === 'draft') {\n            setShowDialog(true);\n            return;\n        }\n\n        // Published state - execute directly\n        const versionId = form.current_version?.id || form.current_version_id || form.currentVersionId;\n        if (versionId) {\n            onExecute(versionId);\n        }\n    };\n\n    const handleContinueWithPublished = () => {\n        const versionId = form.current_version?.id || form.current_version_id || form.currentVersionId;\n        if (versionId) {\n            onExecute(versionId);\n        }\n        setShowDialog(false);\n    };\n\n    const handlePublishAndExecute = () => {\n        if (onPublishAndExecute) {\n            onPublishAndExecute();\n        }\n        setShowDialog(false);\n    };\n\n    // Clone the child element and add onClick handler\n    const childWithHandler = React.cloneElement(children, {\n        onClick: handleClick,\n        disabled: state === 'unpublished' || children.props.disabled,\n    });\n\n    return (\n        <>\n            {childWithHandler}\n\n            <Dialog open={showDialog} onOpenChange={setShowDialog}>\n                <DialogContent>\n                    <DialogHeader>\n                        <DialogTitle className=\"flex items-center gap-2\">\n                            <AlertCircle className=\"h-5 w-5 text-orange-500\" />\n                            Alterações não publicadas\n                        </DialogTitle>\n                        <DialogDescription className=\"pt-2\">\n                            Esta rotina tem alterações não publicadas. A execução usará a versão publicada\n                            {form.current_version && ` (v${form.current_version.version_number})`}.\n                        </DialogDescription>\n                    </DialogHeader>\n\n                    <DialogFooter className=\"flex gap-2 sm:gap-0\">\n                        <Button variant=\"outline\" onClick={() => setShowDialog(false)}>\n                            Cancelar\n                        </Button>\n                        <Button variant=\"secondary\" onClick={handleContinueWithPublished} className=\"flex items-center gap-2\">\n                            <Play className=\"h-4 w-4\" />\n                            Continuar com v{form.current_version?.version_number || '1.0'}\n                        </Button>\n                        {onPublishAndExecute && (\n                            <Button onClick={handlePublishAndExecute} className=\"flex items-center gap-2\">\n                                <Upload className=\"h-4 w-4\" />\n                                Publicar e Executar\n                            </Button>\n                        )}\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/form-lifecycle/FormStatusBadge.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 30,
                "column": 13,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 30,
                "endColumn": 16,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                889,
                                892
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                889,
                                892
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 31,
                "column": 19,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 31,
                "endColumn": 22,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                914,
                                917
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                914,
                                917
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Badge } from '@/components/ui/badge';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\nimport { AlertCircle, CheckCircle, Clock, Edit3, User } from 'lucide-react';\n\nexport type FormState = 'unpublished' | 'published' | 'draft';\n\nexport interface FormData {\n    id: number;\n    current_version_id: number | null;\n    has_draft_changes?: boolean;\n    isDraft?: boolean;\n    currentVersionId?: number | null;\n    current_version?: {\n        id?: number;\n        version_number: string;\n        published_at?: string;\n        published_by?: {\n            id: number;\n            name: string;\n        };\n    };\n    draft_updated_at?: string;\n    draft_updated_by?: {\n        id: number;\n        name: string;\n    };\n    tasks?: any[];\n    draft_tasks?: any[];\n    last_execution?: {\n        completed_at: string;\n        executed_by?: {\n            name: string;\n        };\n    };\n}\n\ninterface FormStatusBadgeProps {\n    form: FormData;\n    size?: 'sm' | 'md' | 'lg';\n    showDetails?: boolean;\n    showSubtitle?: boolean;\n    className?: string;\n}\n\nexport function getFormState(form: FormStatusBadgeProps['form']): FormState {\n    // Handle both naming conventions\n    const currentVersionId = form.current_version_id ?? form.currentVersionId;\n    const hasDraftChanges = form.has_draft_changes ?? form.isDraft;\n\n    if (!currentVersionId) {\n        return 'unpublished';\n    }\n    if (hasDraftChanges) {\n        return 'draft';\n    }\n    return 'published';\n}\n\nexport default function FormStatusBadge({ form, size = 'md', showDetails = false, showSubtitle = false, className }: FormStatusBadgeProps) {\n    const state = getFormState(form);\n    const hasDraftChanges = form.has_draft_changes ?? form.isDraft;\n\n    const sizeClasses = {\n        sm: 'text-xs px-2 py-0.5',\n        md: 'text-sm px-2.5 py-0.5',\n        lg: 'text-base px-3 py-1',\n    };\n\n    const iconSizes = {\n        sm: 'h-3 w-3',\n        md: 'h-3.5 w-3.5',\n        lg: 'h-4 w-4',\n    };\n\n    const configs = {\n        unpublished: {\n            variant: 'destructive' as const,\n            icon: AlertCircle,\n            label: 'Não Publicado',\n            className: 'bg-red-100 text-red-700 border-red-200 cursor-default',\n        },\n        published: {\n            variant: 'default' as const,\n            icon: CheckCircle,\n            label: 'Publicado',\n            className: 'bg-green-100 text-green-700 border-green-200 cursor-default',\n        },\n        draft: {\n            variant: 'default' as const,\n            icon: CheckCircle,\n            label: 'Publicado',\n            className: 'bg-green-100 text-green-700 border-green-200 cursor-default',\n        },\n    };\n\n    const config = configs[state];\n    const Icon = config.icon;\n\n    // Format additional details\n    const getAdditionalInfo = () => {\n        const details: string[] = [];\n\n        if (state === 'published' && form.last_execution) {\n            const timeAgo = formatDistanceToNow(new Date(form.last_execution.completed_at), {\n                addSuffix: true,\n                locale: ptBR,\n            });\n            details.push(`Executado ${timeAgo}`);\n        }\n\n        if (state === 'draft' && form.draft_updated_at) {\n            const timeAgo = formatDistanceToNow(new Date(form.draft_updated_at), {\n                addSuffix: true,\n                locale: ptBR,\n            });\n            const editor = form.draft_updated_by?.name || 'alguém';\n            details.push(`Editado por ${editor} ${timeAgo}`);\n        }\n\n        if (state === 'published' && form.current_version?.published_at && showDetails) {\n            const timeAgo = formatDistanceToNow(new Date(form.current_version.published_at), {\n                addSuffix: true,\n                locale: ptBR,\n            });\n            details.push(`Publicado ${timeAgo}`);\n        }\n\n        return details;\n    };\n\n    const additionalInfo = getAdditionalInfo();\n\n    if (showSubtitle) {\n        return (\n            <div className=\"flex flex-col gap-1\">\n                <div className=\"flex items-center gap-1\">\n                    <Badge\n                        variant={config.variant}\n                        className={cn(sizeClasses[size], config.className, 'inline-flex items-center gap-1 font-medium', className)}\n                    >\n                        <Icon className={iconSizes[size]} />\n                        <span>{config.label}</span>\n                    </Badge>\n                    {hasDraftChanges && state === 'draft' && (\n                        <Tooltip>\n                            <TooltipTrigger asChild>\n                                <Badge\n                                    variant=\"secondary\"\n                                    className={cn(\n                                        sizeClasses[size],\n                                        'cursor-default border-orange-200 bg-orange-100 text-orange-700 hover:bg-orange-800',\n                                        'inline-flex items-center gap-1 font-medium',\n                                    )}\n                                >\n                                    <Edit3 className={iconSizes[size]} />\n                                    <span>Rascunho</span>\n                                </Badge>\n                            </TooltipTrigger>\n                            <TooltipContent>\n                                <p>Este formulário tem alterações não publicadas.</p>\n                                <p>A versão atual ainda pode ser utilizada.</p>\n                                {form.draft_updated_at && form.draft_updated_by && (\n                                    <p className=\"mt-1 text-xs opacity-80\">Última edição por {form.draft_updated_by.name}</p>\n                                )}\n                            </TooltipContent>\n                        </Tooltip>\n                    )}\n                </div>\n                <div className=\"flex flex-col gap-0.5\">\n                    {additionalInfo.map((info, index) => (\n                        <span key={index} className=\"text-muted-foreground flex items-center gap-1 text-xs\">\n                            {info.includes('Editado') && <User className=\"h-3 w-3\" />}\n                            {info.includes('Executado') && <Clock className=\"h-3 w-3\" />}\n                            {info}\n                        </span>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"inline-flex items-center gap-1\">\n            <Badge\n                variant={config.variant}\n                className={cn(sizeClasses[size], config.className, 'inline-flex items-center gap-1 font-medium', className)}\n            >\n                <Icon className={iconSizes[size]} />\n                <span>{config.label}</span>\n                {showDetails && additionalInfo.length > 0 && <span className=\"ml-1 opacity-70\">• {additionalInfo[0]}</span>}\n            </Badge>\n            {hasDraftChanges && state === 'draft' && (\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                        <Badge\n                            variant=\"secondary\"\n                            className={cn(\n                                sizeClasses[size],\n                                'cursor-default border-orange-200 bg-orange-100 text-orange-700',\n                                'inline-flex items-center gap-1 font-medium',\n                            )}\n                        >\n                            <Edit3 className={cn(iconSizes[size], 'h-2.5 w-2.5')} />\n                        </Badge>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                        <p>Este formulário tem alterações não publicadas.</p>\n                        <p>A versão atual ainda pode ser utilizada.</p>\n                        {form.draft_updated_at && form.draft_updated_by && (\n                            <p className=\"mt-1 text-xs opacity-80\">Última edição por {form.draft_updated_by.name}</p>\n                        )}\n                    </TooltipContent>\n                </Tooltip>\n            )}\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/form-lifecycle/FormVersionHistory.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'_formId' is defined but never used.",
                "line": 12,
                "column": 54,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 12,
                "endColumn": 61
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'_currentVersionId' is defined but never used.",
                "line": 12,
                "column": 81,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 12,
                "endColumn": 98
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { FileText, History } from 'lucide-react';\n\ninterface FormVersionHistoryProps {\n    formId: number;\n    currentVersionId?: number | null;\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport default function FormVersionHistory({ formId: _formId, currentVersionId: _currentVersionId, isOpen, onClose }: FormVersionHistoryProps) {\n    // This is a placeholder component that will be implemented with full version history functionality\n    return (\n        <Dialog open={isOpen} onOpenChange={onClose}>\n            <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                        <History className=\"h-5 w-5\" />\n                        Histórico de Versões\n                    </DialogTitle>\n                </DialogHeader>\n\n                <div className=\"space-y-4\">\n                    <div className=\"text-muted-foreground py-8 text-center\">\n                        <FileText className=\"mx-auto mb-4 h-12 w-12 opacity-50\" />\n                        <p>Histórico de versões em desenvolvimento</p>\n                        <p className=\"mt-2 text-sm\">Em breve você poderá visualizar todas as versões anteriores do formulário</p>\n                    </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                    <Button variant=\"outline\" onClick={onClose}>\n                        Fechar\n                    </Button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/form-lifecycle/FormVersionInfo.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/form-lifecycle/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/heading-small.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/heading.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/icon.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/input-error.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/map.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/nav-footer.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/nav-main.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/nav-user.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/pro-blocks/application/application-examples/dashboard-1.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/pro-blocks/application/nav-main.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/pro-blocks/application/nav-projects.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/pro-blocks/application/nav-user.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/pro-blocks/application/team-switcher.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/shared/EntityActionDropdown.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/shared/EntityDataTable.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 17,
                "column": 58,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 17,
                "endColumn": 61,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                543,
                                546
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                543,
                                546
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 72,
                "column": 29,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 72,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2340,
                                2343
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2340,
                                2343
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { DataTable, type Column } from '@/components/data-table';\nimport { ColumnConfig } from '@/types/shared';\nimport { ArrowUpDown } from 'lucide-react';\nimport React from 'react';\n\ninterface EntityDataTableProps<T> {\n    data: T[];\n    columns: ColumnConfig[];\n    loading?: boolean;\n    onRowClick?: (row: T) => void;\n    actions?: (row: T) => React.ReactNode;\n    emptyMessage?: string;\n    columnVisibility?: Record<string, boolean>;\n    onSort?: (columnKey: string) => void;\n}\n\nexport function EntityDataTable<T extends Record<string, any>>({\n    data,\n    columns,\n    loading = false,\n    onRowClick,\n    actions,\n    emptyMessage = 'Nenhum registro encontrado.',\n    columnVisibility = {},\n    onSort,\n}: EntityDataTableProps<T>) {\n    // Convert ColumnConfig to DataTable Column format\n    const dataTableColumns: Column<T>[] = columns.map((col) => ({\n        id: col.key,\n        header:\n            col.sortable && onSort ? (\n                <div className=\"flex cursor-pointer items-center gap-2\" onClick={() => onSort(col.key)}>\n                    {col.label}\n                    <ArrowUpDown className=\"h-4 w-4\" />\n                </div>\n            ) : (\n                col.label\n            ),\n        cell: (row: { original: T }) => {\n            return col.render ? col.render(row.original[col.key], row.original) : row.original[col.key];\n        },\n        width: col.width,\n    }));\n\n    // Add actions column if provided\n    if (actions) {\n        dataTableColumns.push({\n            id: 'actions',\n            header: 'Ações',\n            cell: (row: { original: T }) => actions(row.original),\n            width: 'w-[80px]',\n        });\n    }\n\n    // Handle column visibility - ensure all columns are visible by default\n    const effectiveColumnVisibility = React.useMemo(() => {\n        const visibility: Record<string, boolean> = {};\n        columns.forEach((col) => {\n            visibility[col.key] = columnVisibility[col.key] !== false;\n        });\n        if (actions) {\n            visibility['actions'] = true;\n        }\n        return visibility;\n    }, [columns, columnVisibility, actions]);\n\n    if (loading) {\n        // Return loading skeleton using the same DataTable structure\n        const skeletonData = Array(5)\n            .fill({})\n            .map((_, index) => {\n                const item: any = { id: `skeleton-${index}` };\n                columns.forEach((col) => {\n                    item[col.key] = '...';\n                });\n                return item;\n            });\n\n        return <DataTable data={skeletonData} columns={dataTableColumns} columnVisibility={effectiveColumnVisibility} emptyMessage={emptyMessage} />;\n    }\n\n    return (\n        <DataTable\n            data={data}\n            columns={dataTableColumns}\n            columnVisibility={effectiveColumnVisibility}\n            onRowClick={onRowClick}\n            emptyMessage={emptyMessage}\n        />\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/shared/EntityDeleteDialog.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/shared/EntityDependenciesDialog.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 10,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 10,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                527,
                                530
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                527,
                                530
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 48,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 51,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                808,
                                811
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                808,
                                811
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'_' is defined but never used.",
                "line": 30,
                "column": 98,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 30,
                "endColumn": 99
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 67,
                "column": 75,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 67,
                "endColumn": 78,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3965,
                                3968
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3965,
                                3968
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 97,
                "column": 83,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 97,
                "endColumn": 86,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6388,
                                6391
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6388,
                                6391
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 5,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogTitle } from '@/components/ui/dialog';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { DependencyResult } from '@/types/shared';\nimport { Link } from '@inertiajs/react';\nimport { AlertCircle, FileText, Layers, MapPin, Package } from 'lucide-react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\ninterface EntityDependenciesDialogProps {\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    entityName: string;\n    dependencies: DependencyResult | null;\n}\n\n// Map dependency keys to icons and routes\nconst dependencyConfig: Record<string, { icon: any; route?: string; label: string }> = {\n    areas: { icon: MapPin, route: 'asset-hierarchy.areas.show', label: 'Áreas' },\n    sectors: { icon: Layers, route: 'asset-hierarchy.setores.show', label: 'Setores' },\n    assets: { icon: Package, route: 'asset-hierarchy.assets.show', label: 'Ativos' },\n    asset: { icon: Package, route: 'asset-hierarchy.assets.show', label: 'Ativos' },\n    routines: { icon: FileText, label: 'Rotinas' },\n};\n\nexport function EntityDependenciesDialog({ open, onOpenChange, entityName, dependencies }: EntityDependenciesDialogProps) {\n    // Filter out dependencies with zero count\n    const activeDependencies = dependencies ? Object.entries(dependencies.dependencies).filter(([_, dep]) => (dep.count || dep.total || 0) > 0) : [];\n\n    return (\n        <Dialog open={open} onOpenChange={onOpenChange}>\n            <DialogContent className=\"flex max-h-[80vh] max-w-2xl flex-col overflow-hidden\">\n                <DialogTitle className=\"flex items-center gap-2\">\n                    <AlertCircle className=\"text-destructive h-5 w-5\" />\n                    Não é possível excluir {entityName === 'planta' ? 'esta' : 'este'} {entityName}\n                </DialogTitle>\n                <DialogDescription>\n                    {entityName === 'planta' ? 'Esta' : 'Este'} {entityName} possui itens vinculados e não pode ser{' '}\n                    {entityName === 'planta' ? 'excluída' : 'excluído'} até que todos sejam excluídos ou movidos.\n                </DialogDescription>\n\n                {activeDependencies.length > 0 && (\n                    <div className=\"my-4 space-y-4\">\n                        {activeDependencies.map(([key, dep]) => {\n                            const config = dependencyConfig[key] || { icon: FileText, label: key };\n                            const IconComponent = config.icon;\n                            const itemCount = dep.count || dep.total || 0;\n\n                            return (\n                                <div key={key} className=\"space-y-3\">\n                                    <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center gap-2\">\n                                            <IconComponent className=\"text-muted-foreground h-4 w-4\" />\n                                            <span className=\"text-sm font-medium\">{dep.label || config.label}</span>\n                                        </div>\n                                        <span className=\"bg-destructive/10 text-destructive rounded-full px-2 py-1 text-xs font-medium\">\n                                            {itemCount} {itemCount === 1 ? 'item' : 'itens'}\n                                        </span>\n                                    </div>\n\n                                    {dep.items && dep.items.length > 0 && (\n                                        <div className=\"rounded-lg border\">\n                                            {dep.items.length <= 3 ? (\n                                                <div className=\"space-y-1 p-2\">\n                                                    {dep.items.map((item: any) => {\n                                                        const content = (\n                                                            <div className=\"flex items-center\">\n                                                                <div className=\"flex flex-1 items-center\">\n                                                                    <div className=\"min-w-0 flex-1\">\n                                                                        <div className=\"ml-2 text-sm font-medium\">\n                                                                            {item.name || item.tag || item.description || `Item ${item.id}`}\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        );\n\n                                                        return config.route ? (\n                                                            <Link key={item.id} href={route(config.route, item.id)} className=\"block\">\n                                                                <Card className=\"hover:bg-accent hover:text-accent-foreground cursor-pointer p-2 transition-colors\">\n                                                                    {content}\n                                                                </Card>\n                                                            </Link>\n                                                        ) : (\n                                                            <Card key={item.id} className=\"p-2\">\n                                                                {content}\n                                                            </Card>\n                                                        );\n                                                    })}\n                                                </div>\n                                            ) : (\n                                                <>\n                                                    <ScrollArea className=\"h-[140px]\">\n                                                        <div className=\"space-y-1 p-2\">\n                                                            {dep.items.map((item: any) => {\n                                                                const content = (\n                                                                    <div className=\"flex items-center\">\n                                                                        <div className=\"flex flex-1 items-center\">\n                                                                            <div className=\"min-w-0 flex-1\">\n                                                                                <div className=\"ml-2 text-sm font-medium\">\n                                                                                    {item.name || item.tag || item.description || `Item ${item.id}`}\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                );\n\n                                                                return config.route ? (\n                                                                    <Link key={item.id} href={route(config.route, item.id)} className=\"block\">\n                                                                        <Card className=\"hover:bg-accent hover:text-accent-foreground cursor-pointer p-2 transition-colors\">\n                                                                            {content}\n                                                                        </Card>\n                                                                    </Link>\n                                                                ) : (\n                                                                    <Card key={item.id} className=\"p-2\">\n                                                                        {content}\n                                                                    </Card>\n                                                                );\n                                                            })}\n                                                        </div>\n                                                    </ScrollArea>\n                                                    {dep.items.length > 10 && (\n                                                        <div className=\"text-muted-foreground border-t p-2 text-center text-xs\">\n                                                            Mostrando {Math.min(dep.items.length, 10)} de {dep.items.length} itens\n                                                        </div>\n                                                    )}\n                                                </>\n                                            )}\n                                        </div>\n                                    )}\n                                </div>\n                            );\n                        })}\n                    </div>\n                )}\n\n                <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => onOpenChange(false)} autoFocus={false}>\n                        Entendi\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/shared/EntityPagination.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/smart-input.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 7,
                "column": 30,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 7,
                "endColumn": 33,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                187,
                                190
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                187,
                                190
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 40,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 43,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                232,
                                235
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                232,
                                235
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\nimport { forwardRef } from 'react';\n\ninterface SmartInputProps {\n    form: {\n        data: Record<string, any>;\n        setData: (name: string, value: any) => void;\n        errors: Partial<Record<string, string>>;\n        clearErrors: (...fields: string[]) => void;\n    };\n    name: string;\n    placeholder?: string;\n    type?: string;\n    className?: string;\n    disabled?: boolean;\n    view?: boolean;\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n    validateInput?: (value: string) => boolean;\n}\n\nconst SmartInput = forwardRef<HTMLInputElement, SmartInputProps>(\n    ({ form, name, placeholder, type = 'text', className, disabled = false, view = false, onBlur, validateInput }, ref) => {\n        const { data, setData, errors, clearErrors } = form;\n\n        return (\n            <Input\n                ref={ref}\n                id={name}\n                type={type}\n                value={data[name]}\n                onChange={(e) => {\n                    // Prevent changes in view mode\n                    if (view) return;\n\n                    const value = e.target.value;\n\n                    // Se há uma função de validação, verificar se o valor é válido\n                    if (validateInput && !validateInput(value)) {\n                        return;\n                    }\n\n                    setData(name, value);\n                    if (value) {\n                        clearErrors(name);\n                    }\n                }}\n                onBlur={onBlur}\n                placeholder={placeholder}\n                disabled={disabled}\n                readOnly={view}\n                className={cn('w-full', errors[name] && 'border-destructive', view && 'text-foreground cursor-default opacity-100', className)}\n            />\n        );\n    },\n);\n\nSmartInput.displayName = 'SmartInput';\n\nexport default SmartInput;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/table-headers/list-table-header.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/AddInstructionModal.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'getDefaultInstructionByType'. Either include it or remove the dependency array.",
                "line": 67,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 67,
                "endColumn": 20,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [getDefaultInstructionByType, open, task]",
                        "fix": {
                            "range": [
                                2513,
                                2525
                            ],
                            "text": "[getDefaultInstructionByType, open, task]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { ImageInstruction, Instruction, InstructionType, Task, TaskOperations, TextInstruction, VideoInstruction } from '@/types/task';\nimport { useEffect, useState } from 'react';\nimport { InstructionForm } from './InstructionForm';\n\ninterface AddInstructionModalProps {\n    /** Indica se o modal está aberto */\n    open: boolean;\n    /** Callback para fechar o modal */\n    onClose: () => void;\n    /** Callback para adicionar a instrução */\n    onAdd: (instruction: Instruction) => void;\n    /** Tarefa atual */\n    task: Task;\n}\n\nexport function AddInstructionModal({ open, onClose, onAdd, task }: AddInstructionModalProps) {\n    const [instructionType, setInstructionType] = useState<InstructionType>(InstructionType.Image);\n\n    // Valores padrão para cada tipo de instrução\n    const defaultTextInstruction: TextInstruction = {\n        id: TaskOperations.generateInstructionId(task),\n        type: InstructionType.Text,\n        content: '',\n    };\n\n    const defaultImageInstruction: ImageInstruction = {\n        id: TaskOperations.generateInstructionId(task),\n        type: InstructionType.Image,\n        imageUrl: '',\n        caption: '',\n    };\n\n    const defaultVideoInstruction: VideoInstruction = {\n        id: TaskOperations.generateInstructionId(task),\n        type: InstructionType.Video,\n        videoUrl: '',\n        caption: '',\n    };\n\n    // Função para obter a instrução padrão baseada no tipo\n    const getDefaultInstructionByType = (type: InstructionType): Instruction => {\n        switch (type) {\n            case InstructionType.Text:\n                return defaultTextInstruction;\n            case InstructionType.Image:\n                return defaultImageInstruction;\n            case InstructionType.Video:\n                return defaultVideoInstruction;\n            default:\n                return defaultTextInstruction;\n        }\n    };\n\n    const [instruction, setInstruction] = useState<Instruction>(getDefaultInstructionByType(instructionType));\n\n    // Reinicia o formulário quando o modal é aberto\n    useEffect(() => {\n        if (open) {\n            // Define um tipo padrão\n            const defaultType = InstructionType.Image;\n            setInstructionType(defaultType);\n            // Reinicia a instrução com os valores padrão\n            setInstruction(getDefaultInstructionByType(defaultType));\n        }\n    }, [open, task]);\n\n    // Atualiza a instrução quando o tipo muda\n    const handleTypeChange = (type: InstructionType) => {\n        setInstructionType(type);\n        setInstruction(getDefaultInstructionByType(type));\n    };\n\n    const handleSave = () => {\n        // Regenera o ID para garantir unicidade\n        const newInstruction = {\n            ...instruction,\n            id: TaskOperations.generateInstructionId(task),\n        };\n        onAdd(newInstruction);\n    };\n\n    const handleFormChange = (updatedInstruction: Instruction) => {\n        setInstruction(updatedInstruction);\n    };\n\n    return (\n        <Dialog open={open} onOpenChange={onClose}>\n            <DialogContent className=\"max-w-[95vw] lg:max-w-2xl\">\n                <DialogHeader>\n                    <DialogTitle>Adicionar Instrução</DialogTitle>\n                </DialogHeader>\n\n                <InstructionForm instruction={instruction} onChange={handleFormChange} onTypeChange={handleTypeChange} />\n\n                <DialogFooter className=\"mt-4 flex-col gap-2 sm:flex-row\">\n                    <Button variant=\"outline\" onClick={onClose} className=\"w-full sm:w-auto\">\n                        Cancelar\n                    </Button>\n                    <Button onClick={handleSave} className=\"w-full sm:w-auto\">\n                        Adicionar\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/AddTaskButton.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/EditInstructionModal.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'_' is defined but never used.",
                "line": 25,
                "column": 31,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 25,
                "endColumn": 32
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Instruction, InstructionType } from '@/types/task';\nimport { useState } from 'react';\nimport { InstructionForm } from './InstructionForm';\n\ninterface EditInstructionModalProps {\n    /** Indica se o modal está aberto */\n    open: boolean;\n    /** Callback para fechar o modal */\n    onClose: () => void;\n    /** Callback para salvar a instrução */\n    onSave: (instruction: Instruction) => void;\n    /** Instrução a ser editada */\n    instruction: Instruction;\n}\n\nexport function EditInstructionModal({ open, onClose, onSave, instruction: initialInstruction }: EditInstructionModalProps) {\n    const [instruction, setInstruction] = useState<Instruction>(initialInstruction);\n\n    const handleFormChange = (updatedInstruction: Instruction) => {\n        setInstruction(updatedInstruction);\n    };\n\n    const handleTypeChange = (_: InstructionType) => {\n        // Não implementamos troca de tipo na edição, pois exigiria\n        // recriar a instrução com novos campos\n    };\n\n    const handleSave = () => {\n        onSave(instruction);\n    };\n\n    return (\n        <Dialog open={open} onOpenChange={onClose}>\n            <DialogContent className=\"max-w-[95vw] lg:max-w-2xl\">\n                <DialogHeader>\n                    <DialogTitle>Editar Instrução</DialogTitle>\n                </DialogHeader>\n\n                <InstructionForm instruction={instruction} onChange={handleFormChange} onTypeChange={handleTypeChange} disableTypeChange />\n\n                <DialogFooter className=\"mt-4 flex-col gap-2 sm:flex-row\">\n                    <Button variant=\"outline\" onClick={onClose} className=\"w-full sm:w-auto\">\n                        Cancelar\n                    </Button>\n                    <Button onClick={handleSave} className=\"w-full sm:w-auto\">\n                        Salvar\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/EditableText.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/InstructionForm.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/TaskBaseCard.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/TaskInstructionItem.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/TaskInstructionList.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/BaseTaskContent.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/CodeReaderTaskContent.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/FileUploadTaskContent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An interface declaring no members is equivalent to its supertype.",
                "line": 6,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterfaceWithSuper",
                "endLine": 6,
                "endColumn": 37,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterfaceWithSuper",
                        "fix": {
                            "range": [
                                227,
                                301
                            ],
                            "text": "type FileUploadTaskContentProps = WithSaveFunctionalityProps"
                        },
                        "desc": "Replace empty interface with a type alias."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { FileText, Upload, X } from 'lucide-react';\nimport { useRef } from 'react';\nimport { withSaveFunctionality, WithSaveFunctionalityProps } from './withSaveFunctionality';\n\ninterface FileUploadTaskContentProps extends WithSaveFunctionalityProps {}\n\nfunction FileUploadTaskContent({ task, mode, response, setResponse, disabled }: FileUploadTaskContentProps) {\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const instructions = task.fileUploadInstructions || 'Faça o upload de um arquivo conforme as instruções.';\n\n    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (file) {\n            setResponse({ files: [file] });\n        }\n    };\n\n    const handleRemoveFile = () => {\n        setResponse({ files: [] });\n        if (fileInputRef.current) {\n            fileInputRef.current.value = '';\n        }\n    };\n\n    const triggerFileSelect = () => {\n        fileInputRef.current?.click();\n    };\n\n    if (mode === 'edit' || mode === 'preview') {\n        const message =\n            mode === 'edit'\n                ? 'Esta tarefa solicita que o usuário faça o upload de um arquivo.'\n                : 'O usuário deverá fazer o upload de um arquivo durante a execução desta tarefa.';\n\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"bg-muted/30 rounded-md p-4\">\n                    <p>{message}</p>\n                    {task.fileUploadInstructions && (\n                        <div className=\"mt-2\">\n                            <p className=\"font-medium\">Instruções para o usuário:</p>\n                            <p className=\"text-muted-foreground\">{task.fileUploadInstructions}</p>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n\n    const uploadedFile = response?.files?.[0];\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"bg-muted/30 rounded-md p-4\">\n                <p>{instructions}</p>\n            </div>\n\n            {uploadedFile ? (\n                <div className=\"bg-muted/30 rounded-md p-4\">\n                    <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2 overflow-hidden\">\n                            <FileText className=\"text-primary h-5 w-5 flex-shrink-0\" />\n                            <span className=\"truncate font-medium\" title={uploadedFile.name}>\n                                {uploadedFile.name}\n                            </span>\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\" onClick={handleRemoveFile} disabled={disabled}>\n                            <X className=\"h-4 w-4\" />\n                        </Button>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"flex justify-center\">\n                    <input type=\"file\" ref={fileInputRef} onChange={handleFileChange} className=\"hidden\" disabled={disabled} />\n                    <Button variant=\"outline\" className=\"px-8\" onClick={triggerFileSelect} disabled={disabled}>\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        Enviar arquivo\n                    </Button>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default withSaveFunctionality(FileUploadTaskContent);\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/MeasurementTaskContent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An interface declaring no members is equivalent to its supertype.",
                "line": 12,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterfaceWithSuper",
                "endLine": 12,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterfaceWithSuper",
                        "fix": {
                            "range": [
                                561,
                                636
                            ],
                            "text": "type MeasurementTaskContentProps = WithSaveFunctionalityProps"
                        },
                        "desc": "Replace empty interface with a type alias."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                785,
                                788
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                785,
                                788
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 173,
                "column": 121,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 173,
                "endColumn": 124,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                7661,
                                7664
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                7661,
                                7664
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 185,
                "column": 137,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 185,
                "endColumn": 140,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                8315,
                                8318
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                8315,
                                8318
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 205,
                "column": 51,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 205,
                "endColumn": 54,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9291,
                                9294
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9291,
                                9294
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 215,
                "column": 51,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 215,
                "endColumn": 54,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9791,
                                9794
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9791,
                                9794
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 225,
                "column": 51,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 225,
                "endColumn": 54,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                10286,
                                10289
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                10286,
                                10289
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 7,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ItemSelect from '@/components/ItemSelect';\nimport TextInput from '@/components/TextInput';\nimport InputError from '@/components/input-error';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { DefaultMeasurement } from '@/types/task';\nimport { MeasurementUnitCategories, UnitCategory } from '@/types/units';\nimport { useEffect, useState } from 'react';\nimport { withSaveFunctionality, WithSaveFunctionalityProps } from './withSaveFunctionality';\n\ninterface MeasurementTaskContentProps extends WithSaveFunctionalityProps {}\n\ninterface MeasurementFormData {\n    targetValue: string;\n    minValue: string;\n    maxValue: string;\n    measuredValue: string;\n    [key: string]: any;\n}\n\nfunction MeasurementTaskContent({ task, mode, onUpdate, response, setResponse, disabled }: MeasurementTaskContentProps) {\n    const [category, setCategory] = useState<UnitCategory>('Comprimento');\n    const [selectedUnit, setSelectedUnit] = useState<string>('m');\n    const [minValue, setMinValue] = useState<number | undefined>(undefined);\n    const [maxValue, setMaxValue] = useState<number | undefined>(undefined);\n    const [targetValue, setTargetValue] = useState<number | undefined>(undefined);\n    const [isValueOutOfRange, setIsValueOutOfRange] = useState<boolean>(false);\n    const [isValueAtTarget, setIsValueAtTarget] = useState<boolean>(false);\n    const [formErrors, setFormErrors] = useState<Partial<Record<keyof MeasurementFormData, string>>>({});\n    const measurement = task.measurement || DefaultMeasurement;\n\n    useEffect(() => {\n        if (!response) {\n            setResponse({ value: 0, measuredValue: '0' });\n        }\n    }, [response, setResponse]);\n\n    const defaultCategory = 'Comprimento';\n\n    useEffect(() => {\n        if (measurement) {\n            const initialCategory = measurement.category || defaultCategory;\n            setCategory(initialCategory);\n            setSelectedUnit(measurement.unit || (MeasurementUnitCategories[initialCategory] && MeasurementUnitCategories[initialCategory][0].value));\n            setMinValue(measurement.min);\n            setMaxValue(measurement.max);\n            setTargetValue(measurement.target);\n        }\n    }, [measurement]);\n\n    useEffect(() => {\n        const newErrors: Partial<Record<keyof MeasurementFormData, string>> = {};\n        if (targetValue !== undefined && minValue !== undefined && targetValue < minValue) {\n            newErrors.targetValue = `O valor alvo não pode ser menor que o mínimo (${minValue})`;\n        }\n        if (targetValue !== undefined && maxValue !== undefined && targetValue > maxValue) {\n            newErrors.targetValue = `O valor alvo não pode ser maior que o máximo (${maxValue})`;\n        }\n        if (minValue !== undefined && maxValue !== undefined && minValue > maxValue) {\n            newErrors.minValue = `O mínimo não pode ser maior que o máximo (${maxValue})`;\n            newErrors.maxValue = `O máximo não pode ser menor que o mínimo (${minValue})`;\n        }\n        setFormErrors(newErrors);\n    }, [targetValue, minValue, maxValue]);\n\n    const stringifyValue = (val: number | undefined): string => {\n        return val !== undefined ? String(val) : '';\n    };\n\n    const validateInput = (value: string): boolean => {\n        return value === '' || /^-?\\d*[.,]?\\d*$/.test(value);\n    };\n\n    const processBlur = (name: keyof MeasurementFormData, value: string) => {\n        const normalizedValue = value.replace(',', '.');\n        const numValue = parseFloat(normalizedValue);\n\n        if (name === 'measuredValue') {\n            const finalValue = isNaN(numValue) ? 0 : numValue;\n            setResponse({ ...response, value: finalValue, measuredValue: String(finalValue) });\n\n            const newErrors: Partial<Record<keyof MeasurementFormData, string>> = { ...formErrors };\n            delete newErrors.measuredValue;\n            let outOfRange = false;\n\n            if (minValue !== undefined && finalValue < minValue) {\n                newErrors.measuredValue = `O valor está abaixo do mínimo (${minValue})`;\n                outOfRange = true;\n            } else if (maxValue !== undefined && finalValue > maxValue) {\n                newErrors.measuredValue = `O valor está acima do máximo (${maxValue})`;\n                outOfRange = true;\n            }\n            setIsValueOutOfRange(outOfRange);\n            setIsValueAtTarget(targetValue !== undefined && finalValue === targetValue);\n            setFormErrors(newErrors);\n        } else {\n            const finalValue = isNaN(numValue) ? undefined : numValue;\n            if (name === 'targetValue') setTargetValue(finalValue);\n            else if (name === 'minValue') setMinValue(finalValue);\n            else if (name === 'maxValue') setMaxValue(finalValue);\n            handleUpdate(\n                name === 'targetValue' ? finalValue : targetValue,\n                name === 'minValue' ? finalValue : minValue,\n                name === 'maxValue' ? finalValue : maxValue,\n            );\n        }\n    };\n\n    const safeCategory = Object.keys(MeasurementUnitCategories).includes(category) ? category : defaultCategory;\n\n    const form = {\n        data: {\n            ...response,\n            targetValue: stringifyValue(targetValue),\n            minValue: stringifyValue(minValue),\n            maxValue: stringifyValue(maxValue),\n        },\n        setData: (name: string, value: string) => {\n            setResponse({ ...response, [name]: value });\n        },\n        errors: formErrors,\n        clearErrors: (...fields: (keyof MeasurementFormData)[]) => {\n            const newErrors = { ...formErrors };\n            fields.forEach((field) => delete newErrors[field]);\n            setFormErrors(newErrors);\n        },\n        validateInput,\n        processBlur,\n    };\n\n    const handleUpdate = (target: number | undefined, min: number | undefined, max: number | undefined) => {\n        onUpdate?.({\n            ...task,\n            measurement: { ...measurement, category, unit: selectedUnit, min, max, target },\n        });\n    };\n\n    const handleCategoryChange = (value: string) => {\n        if (value && Object.keys(MeasurementUnitCategories).includes(value)) {\n            const newCategory = value as UnitCategory;\n            const firstUnit = MeasurementUnitCategories[newCategory][0];\n            if (firstUnit) {\n                const newUnit = firstUnit.value;\n                setCategory(newCategory);\n                setSelectedUnit(newUnit);\n                onUpdate?.({\n                    ...task,\n                    measurement: { ...measurement, category: newCategory, unit: newUnit, min: minValue, max: maxValue, target: targetValue },\n                });\n            }\n        }\n    };\n\n    const handleUnitChange = (value: string) => {\n        if (value) {\n            setSelectedUnit(value);\n            onUpdate?.({\n                ...task,\n                measurement: { ...measurement, category, unit: value, min: minValue, max: maxValue, target: targetValue },\n            });\n        }\n    };\n\n    if (mode === 'edit') {\n        return (\n            <div className=\"space-y-3 lg:space-y-4\">\n                <div className=\"bg-muted/30 rounded-md pr-4 pb-4 pl-4\">\n                    <div className=\"grid grid-cols-1 gap-3 lg:grid-cols-27 lg:gap-4\">\n                        <div className=\"col-span-1 space-y-2 lg:col-span-7\">\n                            <ItemSelect\n                                label=\"Categoria\"\n                                items={Object.keys(MeasurementUnitCategories).map((cat) => ({ id: cat, name: cat })) as any}\n                                value={category}\n                                onValueChange={handleCategoryChange}\n                                createRoute=\"\"\n                                placeholder=\"Selecione uma categoria\"\n                                canCreate={false}\n                            />\n                        </div>\n\n                        <div className=\"col-span-1 space-y-2 lg:col-span-7\">\n                            <ItemSelect\n                                label=\"Unidade\"\n                                items={MeasurementUnitCategories[safeCategory].map((unit) => ({ id: unit.value, name: unit.label })) as any}\n                                value={selectedUnit}\n                                onValueChange={handleUnitChange}\n                                createRoute=\"\"\n                                placeholder=\"Selecione uma unidade\"\n                                canCreate={false}\n                            />\n                        </div>\n\n                        <div className=\"hidden items-center justify-center lg:col-span-1 lg:flex\">\n                            <Separator orientation=\"vertical\" className=\"h-auto\" />\n                        </div>\n\n                        <div className=\"my-2 lg:hidden\">\n                            <Separator className=\"w-full\" />\n                        </div>\n\n                        <div className=\"col-span-1 grid grid-cols-3 gap-3 lg:col-span-12 lg:gap-4\">\n                            <div className=\"col-span-1 space-y-2\">\n                                <TextInput\n                                    form={form as any}\n                                    name=\"targetValue\"\n                                    label=\"Valor Alvo\"\n                                    placeholder=\"Sem Alvo\"\n                                    onBlur={(e) => processBlur('targetValue', e.target.value)}\n                                />\n                            </div>\n\n                            <div className=\"col-span-1 space-y-2\">\n                                <TextInput\n                                    form={form as any}\n                                    name=\"minValue\"\n                                    label=\"Valor Mínimo\"\n                                    placeholder=\"Sem Min\"\n                                    onBlur={(e) => processBlur('minValue', e.target.value)}\n                                />\n                            </div>\n\n                            <div className=\"col-span-1 space-y-2\">\n                                <TextInput\n                                    form={form as any}\n                                    name=\"maxValue\"\n                                    label=\"Valor Máximo\"\n                                    placeholder=\"Sem Max\"\n                                    onBlur={(e) => processBlur('maxValue', e.target.value)}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    const displayedUnit = measurement.unit || '';\n\n    return (\n        <div className=\"space-y-3 lg:space-y-4\">\n            <div className=\"rounded-md pr-4 pb-4 pl-4\">\n                <div className=\"grid grid-cols-1 gap-3 lg:grid-cols-27 lg:gap-4\">\n                    <div className=\"col-span-1 space-y-2 lg:col-span-7\">\n                        {mode === 'preview' ? (\n                            <div className=\"space-y-2\">\n                                <Label className=\"text-sm font-medium\">Valor Medido</Label>\n                                <div className=\"flex items-center gap-2\">\n                                    <Input value={response?.value || 0} className=\"bg-muted/50\" readOnly />\n                                    <span className=\"text-muted-foreground text-sm font-medium whitespace-nowrap\">{displayedUnit}</span>\n                                </div>\n                            </div>\n                        ) : (\n                            <>\n                                <Label className=\"text-sm font-medium\">Valor Medido</Label>\n                                <div className=\"space-y-2\">\n                                    <div className=\"flex items-center gap-2\">\n                                        <Input\n                                            type=\"text\"\n                                            inputMode=\"decimal\"\n                                            value={response?.measuredValue || '0'}\n                                            onChange={(e) => {\n                                                if (validateInput(e.target.value)) {\n                                                    setResponse({ ...response, measuredValue: e.target.value });\n                                                }\n                                            }}\n                                            onBlur={(e) => processBlur('measuredValue', e.target.value)}\n                                            className={`${isValueOutOfRange ? 'border-red-500 focus-visible:ring-red-500' : isValueAtTarget ? 'border-green-500 focus-visible:ring-green-500' : ''}`}\n                                            disabled={disabled}\n                                        />\n                                        <span className=\"text-muted-foreground text-sm font-medium whitespace-nowrap\">{displayedUnit}</span>\n                                    </div>\n                                    <InputError message={formErrors.measuredValue} />\n                                </div>\n                            </>\n                        )}\n                    </div>\n\n                    <div className=\"hidden items-center justify-center lg:col-span-1 lg:flex\">\n                        <Separator orientation=\"vertical\" className=\"h-auto\" />\n                    </div>\n\n                    <div className=\"my-2 lg:hidden\">\n                        <Separator className=\"w-full\" />\n                    </div>\n\n                    <div className=\"col-span-1 grid grid-cols-1 gap-3 sm:grid-cols-3 lg:col-span-19 lg:gap-4\">\n                        <div className=\"col-span-1 space-y-2\">\n                            <Label className=\"text-sm font-medium\">Valor Alvo</Label>\n                            <div className=\"flex items-center gap-2\">\n                                <Input value={targetValue !== undefined ? targetValue : ''} placeholder=\"Sem Alvo\" className=\"bg-muted/50\" readOnly />\n                                <span className=\"text-muted-foreground text-sm font-medium whitespace-nowrap\">{displayedUnit}</span>\n                            </div>\n                        </div>\n\n                        <div className=\"col-span-1 space-y-2\">\n                            <Label className=\"text-sm font-medium\">Valor Mínimo</Label>\n                            <div className=\"flex items-center gap-2\">\n                                <Input value={minValue !== undefined ? minValue : ''} placeholder=\"Sem Min\" className=\"bg-muted/50\" readOnly />\n                                <span className=\"text-muted-foreground text-sm font-medium whitespace-nowrap\">{displayedUnit}</span>\n                            </div>\n                        </div>\n\n                        <div className=\"col-span-1 space-y-2\">\n                            <Label className=\"text-sm font-medium\">Valor Máximo</Label>\n                            <div className=\"flex items-center gap-2\">\n                                <Input value={maxValue !== undefined ? maxValue : ''} placeholder=\"Sem Max\" className=\"bg-muted/50\" readOnly />\n                                <span className=\"text-muted-foreground text-sm font-medium whitespace-nowrap\">{displayedUnit}</span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default withSaveFunctionality(MeasurementTaskContent);\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/MultipleChoiceTaskContent.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/PhotoTaskContent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An interface declaring no members is equivalent to its supertype.",
                "line": 5,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterfaceWithSuper",
                "endLine": 5,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterfaceWithSuper",
                        "fix": {
                            "range": [
                                188,
                                257
                            ],
                            "text": "type PhotoTaskContentProps = WithSaveFunctionalityProps"
                        },
                        "desc": "Replace empty interface with a type alias."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import PhotoUploader from '@/components/PhotoUploader';\nimport { Image } from 'lucide-react';\nimport { withSaveFunctionality, WithSaveFunctionalityProps } from './withSaveFunctionality';\n\ninterface PhotoTaskContentProps extends WithSaveFunctionalityProps {}\n\nfunction PhotoTaskContent({ task, mode, response, setResponse, disabled }: PhotoTaskContentProps) {\n    const handlePhotoChange = (file: File | null) => {\n        setResponse({ files: file ? [file] : [] });\n    };\n\n    if (mode === 'edit') {\n        return (\n            <div className=\"space-y-4\">\n                <div className=\"p-4\">\n                    <p>\"O usuário deverá tirar uma ou mais fotos durante a execução desta tarefa.\"</p>\n                </div>\n            </div>\n        );\n    }\n\n    const isPreview = mode === 'preview';\n\n    return (\n        <div className=\"space-y-4\">\n            <div className=\"p-4\">\n                <p>\n                    {isPreview ? 'O usuário deverá tirar uma ou mais fotos durante a execução desta tarefa.' : 'Tire uma foto conforme necessário.'}\n                </p>\n            </div>\n\n            {isPreview ? (\n                <div className=\"flex flex-col items-center gap-4\">\n                    <div className=\"bg-muted/50 flex h-64 w-full items-center justify-center rounded-md\">\n                        <div className=\"flex flex-col items-center justify-center\">\n                            <Image className=\"text-muted-foreground mb-2 h-16 w-16\" />\n                            <p className=\"text-muted-foreground\">Prévia da câmera</p>\n                        </div>\n                    </div>\n                </div>\n            ) : (\n                <PhotoUploader\n                    label=\"\"\n                    value={response?.files?.[0] || null}\n                    onChange={handlePhotoChange}\n                    minHeight=\"min-h-[200px]\"\n                    maxHeight=\"max-h-[200px]\"\n                    id={`photo-task-${task.id}`}\n                    disabled={disabled}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default withSaveFunctionality(PhotoTaskContent);\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/QuestionTaskContent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An interface declaring no members is equivalent to its supertype.",
                "line": 5,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterfaceWithSuper",
                "endLine": 5,
                "endColumn": 35,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterfaceWithSuper",
                        "fix": {
                            "range": [
                                194,
                                266
                            ],
                            "text": "type QuestionTaskContentProps = WithSaveFunctionalityProps"
                        },
                        "desc": "Replace empty interface with a type alias."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { withSaveFunctionality, WithSaveFunctionalityProps } from './withSaveFunctionality';\n\ninterface QuestionTaskContentProps extends WithSaveFunctionalityProps {}\n\nfunction QuestionTaskContent({ task, mode, response, setResponse, disabled }: QuestionTaskContentProps) {\n    return (\n        <div>\n            <div className=\"mb-2\">\n                <Label htmlFor={`response-${task.id}`}>Resposta</Label>\n            </div>\n            {mode === 'respond' ? (\n                <Textarea\n                    id={`response-${task.id}`}\n                    value={response?.value || ''}\n                    onChange={(e) => setResponse({ value: e.target.value })}\n                    placeholder=\"Digite sua resposta aqui...\"\n                    className=\"min-h-[100px]\"\n                    disabled={disabled}\n                />\n            ) : (\n                <Textarea\n                    id={`response-${task.id}`}\n                    value={response?.value || ''}\n                    readOnly\n                    placeholder=\"O campo de resposta estará disponível quando o formulário for liberado para preenchimento...\"\n                    className=\"bg-muted/50 min-h-[100px] cursor-not-allowed\"\n                />\n            )}\n        </div>\n    );\n}\n\nexport default withSaveFunctionality(QuestionTaskContent);\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/TaskContent.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 22,
                "column": 29,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 22,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                903,
                                906
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                903,
                                906
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Task } from '@/types/task';\nimport { memo } from 'react';\nimport CodeReaderTaskContent from './CodeReaderTaskContent';\nimport FileUploadTaskContent from './FileUploadTaskContent';\nimport MeasurementTaskContent from './MeasurementTaskContent';\nimport MultipleChoiceTaskContent from './MultipleChoiceTaskContent';\nimport PhotoTaskContent from './PhotoTaskContent';\nimport QuestionTaskContent from './QuestionTaskContent';\n\nexport type TaskCardMode = 'edit' | 'preview' | 'respond';\n\ninterface TaskContentProps {\n    /** A tarefa a ser exibida */\n    task: Task;\n    /** Modo de exibição do conteúdo */\n    mode: TaskCardMode;\n    /** Callback para atualizar a tarefa */\n    onUpdate?: (updatedTask: Task) => void;\n    /** Callback para alterar o ícone do card */\n    onIconChange?: (icon: React.ReactNode) => void;\n    /** Callback para salvar a resposta da tarefa */\n    onSave?: (responseData: any) => void;\n    /** Se deve mostrar o botão de salvar */\n    showSaveButton?: boolean;\n    /** Se o componente está desabilitado */\n    disabled?: boolean;\n    /** Se é a última tarefa */\n    isLastTask?: boolean;\n    /** Callback para navegar para próxima tarefa */\n    onNext?: () => void;\n}\n\nfunction TaskContent({ task, mode, onUpdate, onIconChange, onSave, showSaveButton, disabled, isLastTask, onNext }: TaskContentProps) {\n    // Verifica se a tarefa existe\n    if (!task) {\n        return <div className=\"text-muted-foreground p-4\">Tarefa não encontrada</div>;\n    }\n\n    const props = { task, mode, onUpdate, onSave, showSaveButton, disabled, isLastTask, onNext };\n\n    // Seleciona o componente com base no tipo de tarefa\n    switch (task.type) {\n        case 'question':\n            return <QuestionTaskContent {...props} />;\n        case 'multiple_choice':\n        case 'multiple_select':\n            return <MultipleChoiceTaskContent {...props} />;\n        case 'measurement':\n            return <MeasurementTaskContent {...props} />;\n        case 'photo':\n            return <PhotoTaskContent {...props} />;\n        case 'code_reader':\n            return <CodeReaderTaskContent {...props} onIconChange={onIconChange} />;\n        case 'file_upload':\n            return <FileUploadTaskContent {...props} />;\n        default:\n            return (\n                <div className=\"rounded-md border border-yellow-200 bg-yellow-50 p-4\">\n                    <p className=\"text-yellow-700\">Tipo de tarefa não implementado: {task.type}</p>\n                </div>\n            );\n    }\n}\n\nexport default memo(TaskContent);\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/content/withSaveFunctionality.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 11,
                "column": 29,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 11,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                408,
                                411
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                408,
                                411
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 14,
                "column": 15,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 14,
                "endColumn": 18,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                490,
                                493
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                490,
                                493
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 15,
                "column": 29,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 15,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                523,
                                526
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                523,
                                526
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 25,
                "column": 37,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 25,
                "endColumn": 40,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                862,
                                865
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                862,
                                865
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 32,
                "column": 50,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 32,
                "endColumn": 53,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1084,
                                1087
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1084,
                                1087
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 5,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Task } from '@/types/task';\nimport { CheckCircle2, ChevronRight, Loader2 } from 'lucide-react';\nimport { ComponentType, useState } from 'react';\nimport { TaskCardMode } from './TaskContent';\n\nexport interface WithSaveFunctionalityProps {\n    task: Task;\n    mode: TaskCardMode;\n    onUpdate?: (updatedTask: Task) => void;\n    onSave?: (responseData: any) => void;\n    showSaveButton?: boolean;\n    disabled?: boolean;\n    response: any;\n    setResponse: (response: any) => void;\n    isLastTask?: boolean;\n    onNext?: () => void;\n}\n\nexport const withSaveFunctionality = <P extends object>(WrappedComponent: ComponentType<P & WithSaveFunctionalityProps>) => {\n    const ComponentWithSave = (\n        props: P & {\n            task: Task;\n            mode: TaskCardMode;\n            onSave?: (responseData: any) => void;\n            showSaveButton?: boolean;\n            disabled?: boolean;\n            isLastTask?: boolean;\n            onNext?: () => void;\n        },\n    ) => {\n        const [response, setResponse] = useState<any>(null);\n\n        const handleSaveAndNext = () => {\n            if (props.onSave) {\n                props.onSave(response);\n            }\n            // The onNext will be called after successful save in the parent component\n        };\n\n        const buttonText = props.isLastTask ? 'Completar Rotina' : 'Próxima';\n        const buttonIcon = props.isLastTask ? <CheckCircle2 className=\"mr-2 h-4 w-4\" /> : <ChevronRight className=\"mr-2 h-4 w-4\" />;\n\n        return (\n            <div className=\"space-y-4\">\n                <WrappedComponent {...props} response={response} setResponse={setResponse} />\n                {props.showSaveButton && props.mode === 'respond' && (\n                    <div className=\"flex justify-end\">\n                        <Button onClick={handleSaveAndNext} disabled={props.disabled} size=\"sm\">\n                            {props.disabled ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : buttonIcon}\n                            {buttonText}\n                        </Button>\n                    </div>\n                )}\n            </div>\n        );\n    };\n    return ComponentWithSave;\n};\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/tasks/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/text-link.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/accordion.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/alert-dialog.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/alert.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/avatar.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/badge.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/breadcrumb.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/button.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/calendar.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/card.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/chart.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/checkbox.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/collapsible.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/command.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/dialog.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/dropdown-menu.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/empty-card.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/empty-section-1.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/hover-card.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/icon.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/input-error.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/input.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/label.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/main-selection-tab.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 35,
                "column": 52,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 35,
                "endColumn": 55,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                946,
                                949
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                946,
                                949
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 56,
                "column": 43,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 56,
                "endColumn": 46,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1521,
                                1524
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1521,
                                1524
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 64,
                "column": 49,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 64,
                "endColumn": 52,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1735,
                                1738
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1735,
                                1738
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 90,
                "column": 49,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 90,
                "endColumn": 52,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2851,
                                2854
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2851,
                                2854
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 4,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { ChevronDown } from 'lucide-react'\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MainSelectionTab({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Root>) {\n  return (\n    <TabsPrimitive.Root\n      data-slot=\"tabs\"\n      className={cn(\"flex flex-col\", className)}\n      {...props}\n    />\n  )\n}\n\n// Helper function to extract text content from MainSelectionTabTrigger children\nconst extractTextContent = (children: React.ReactNode): string => {\n  if (typeof children === 'string') {\n    return children;\n  }\n\n  if (Array.isArray(children)) {\n    return children\n      .map(child => extractTextContent(child))\n      .filter(text => text.trim() !== '')\n      .join(' ');\n  }\n\n  if (React.isValidElement(children)) {\n    // If it's a React element, try to extract text from its children\n    const element = children as React.ReactElement<any>;\n    if (element.props && element.props.children) {\n      return extractTextContent(element.props.children);\n    }\n    return '';\n  }\n\n  return '';\n};\n\nfunction MainSelectionTabList({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.List>) {\n  const [selectedTab, setSelectedTab] = React.useState<string>(\"\")\n\n  // Get the current active tab from children\n  React.useEffect(() => {\n    const activeTab = React.Children.toArray(children).find((child) => {\n      if (React.isValidElement(child)) {\n        const childProps = child.props as any\n        if (childProps['data-state'] === 'active') {\n          return true\n        }\n      }\n      return false\n    })\n    if (React.isValidElement(activeTab)) {\n      const activeTabProps = activeTab.props as any\n      if (activeTabProps.value) {\n        setSelectedTab(activeTabProps.value)\n      }\n    }\n  }, [children])\n\n  return (\n    <>\n      {/* Mobile dropdown */}\n      <div className=\"grid grid-cols-1 sm:hidden\">\n        <select\n          value={selectedTab}\n          onChange={(e) => {\n            const newValue = e.target.value\n            // Trigger tab change programmatically\n            const tabElement = document.querySelector(`[data-radix-collection-item][value=\"${newValue}\"]`)\n            if (tabElement instanceof HTMLElement) {\n              tabElement.click()\n            }\n          }}\n          aria-label=\"Select a tab\"\n          className=\"col-start-1 row-start-1 w-full appearance-none rounded-md bg-white dark:bg-gray-900 py-2 pl-3 pr-8 text-base text-gray-900 dark:text-gray-100 outline outline-1 -outline-offset-1 outline-gray-300 dark:outline-gray-700 focus:outline focus:outline-2 focus:-outline-offset-2 focus:outline-indigo-600\"\n        >\n          {React.Children.map(children, (child) => {\n            if (React.isValidElement(child)) {\n              const childProps = child.props as any\n              if (childProps.value) {\n                // Extract only text content, excluding SVG icons and other React components\n                const textContent = extractTextContent(childProps.children);\n                return (\n                  <option key={childProps.value} value={childProps.value}>\n                    {textContent}\n                  </option>\n                )\n              }\n            }\n            return null\n          })}\n        </select>\n        <ChevronDown\n          aria-hidden=\"true\"\n          className=\"pointer-events-none col-start-1 row-start-1 mr-2 size-5 self-center justify-self-end fill-gray-500\"\n        />\n      </div>\n\n      {/* Desktop tabs */}\n      <div className=\"hidden sm:block\">\n        <div className=\"relative border-b border-t border-gray-200 dark:border-gray-800\">\n          <TabsPrimitive.List\n            data-slot=\"tabs-list\"\n            className={cn(\n              \"flex space-x-4 justify-start h-auto rounded-none border-0 bg-transparent px-0 py-2 pb-0\",\n              className\n            )}\n            {...props}\n          >\n            {children}\n          </TabsPrimitive.List>\n        </div>\n      </div>\n    </>\n  )\n}\n\nfunction MainSelectionTabTrigger({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {\n  return (\n    <TabsPrimitive.Trigger\n      data-slot=\"tabs-trigger\"\n      className={cn(\n        \"px-4 py-2 pb-3 text-sm font-medium transition-all duration-200 ease-in-out\",\n        \"border-b-2 border-transparent rounded-none relative\",\n        \"text-gray-500 dark:text-gray-400\",\n        \"hover:text-gray-700 dark:hover:text-gray-300\",\n        \"data-[state=active]:border-primary\",\n        \"data-[state=active]:font-extrabold\",\n        \"data-[state=active]:text-gray-900 dark:data-[state=active]:text-gray-100\",\n        \"data-[state=active]:bg-transparent data-[state=active]:shadow-none\",\n        \"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n        \"disabled:pointer-events-none disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction MainSelectionTabContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof TabsPrimitive.Content>) {\n  return (\n    <TabsPrimitive.Content\n      data-slot=\"tabs-content\"\n      className={cn(\"flex-1 outline-none mt-4\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { MainSelectionTab, MainSelectionTabList, MainSelectionTabTrigger, MainSelectionTabContent }\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/navigation-menu.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/pagination-wrapper.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/pagination.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/placeholder-pattern.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/popover.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/progress.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/radio-group.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/scroll-area.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/select.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/separator.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/sheet.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/sidebar.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/skeleton.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/smart-popover.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/sonner.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/switch.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/table.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/tabs-BACKUP.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/tabs.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/textarea.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/toggle-group.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/toggle.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/ui/tooltip.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/user-info.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/components/user-menu-content.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/constants/timezones.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/data/estados.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-appearance.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-export-manager.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-initials.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-mobile-navigation.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-mobile.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/use-mobile.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/useEntityForm.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 6,
                "column": 14,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 6,
                "endColumn": 17,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                171,
                                174
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                171,
                                174
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 38,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 41,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                243,
                                246
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                243,
                                246
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 11,
                "column": 64,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 11,
                "endColumn": 67,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                337,
                                340
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                337,
                                340
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'form', 'initialData', and 'transformEntityToForm'. Either include them or remove the dependency array. If 'transformEntityToForm' changes too often, find the parent component that defines it and wrap that definition in useCallback.",
                "line": 42,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 42,
                "endColumn": 34,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [entity, form, initialData, isEditMode, mode, transformEntityToForm]",
                        "fix": {
                            "range": [
                                1469,
                                1495
                            ],
                            "text": "[entity, form, initialData, isEditMode, mode, transformEntityToForm]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 3,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { useForm } from '@inertiajs/react';\nimport { useEffect } from 'react';\n\nexport interface UseEntityFormConfig<TFormData> {\n    initialData: TFormData;\n    entity?: any;\n    mode?: 'create' | 'edit';\n    transformEntityToForm?: (entity: any) => Partial<TFormData>;\n}\n\nexport function useEntityForm<TFormData extends Record<string, any>>({\n    initialData,\n    entity,\n    mode = 'create',\n    transformEntityToForm,\n}: UseEntityFormConfig<TFormData>) {\n    const isEditMode = mode === 'edit' && entity;\n\n    const form = useForm<TFormData>(initialData);\n\n    // Update form data when entity changes (for edit mode)\n    useEffect(() => {\n        if (isEditMode && entity) {\n            if (transformEntityToForm) {\n                // Use custom transform function if provided\n                const transformedData = transformEntityToForm(entity);\n                Object.entries(transformedData).forEach(([key, value]) => {\n                    form.setData(key as keyof TFormData, value);\n                });\n            } else {\n                // Default: map entity fields to form fields\n                Object.keys(initialData).forEach((key) => {\n                    if (entity[key] !== undefined) {\n                        form.setData(key as keyof TFormData, entity[key]);\n                    }\n                });\n            }\n        } else if (!isEditMode) {\n            // Reset to initial data for create mode\n            form.reset();\n        }\n    }, [entity, isEditMode, mode]);\n\n    return {\n        ...form,\n        isEditMode,\n    };\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/useEntityOperations.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 8,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 8,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                293,
                                296
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                293,
                                296
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 34,
                "column": 38,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 34,
                "endColumn": 41,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                998,
                                1001
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                998,
                                1001
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { BaseEntity, DependencyResult } from '@/types/shared';\nimport { router } from '@inertiajs/react';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { toast } from 'sonner';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\ninterface UseEntityOperationsProps {\n    entityName: string;\n    entityLabel: string;\n    routes: {\n        index: string;\n        show: string;\n        destroy: string;\n        checkDependencies?: string;\n    };\n}\n\ninterface UseEntityOperationsReturn<T> {\n    editingItem: T | null;\n    deletingItem: T | null;\n    loadingEdit: boolean;\n    isEditSheetOpen: boolean;\n    isDeleteDialogOpen: boolean;\n    isDependenciesDialogOpen: boolean;\n    dependencies: DependencyResult | null;\n    isCheckingDependencies: boolean;\n\n    handleEdit: (item: T) => Promise<void>;\n    handleDelete: (item: T) => Promise<void>;\n    confirmDelete: () => Promise<void>;\n    checkDependencies: () => Promise<any>;\n\n    setEditSheetOpen: (open: boolean) => void;\n    setDeleteDialogOpen: (open: boolean) => void;\n    setDependenciesDialogOpen: (open: boolean) => void;\n    clearEditingItem: () => void;\n}\n\nexport function useEntityOperations<T extends BaseEntity>({\n    entityName,\n    entityLabel,\n    routes,\n}: UseEntityOperationsProps): UseEntityOperationsReturn<T> {\n    const [editingItem, setEditingItem] = useState<T | null>(null);\n    const [deletingItem, setDeletingItem] = useState<T | null>(null);\n    const [loadingEdit, setLoadingEdit] = useState(false);\n    const [isEditSheetOpen, setEditSheetOpen] = useState(false);\n    const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);\n    const [isDependenciesDialogOpen, setDependenciesDialogOpen] = useState(false);\n    const [dependencies, setDependencies] = useState<DependencyResult | null>(null);\n    const [isCheckingDependencies, setIsCheckingDependencies] = useState(false);\n\n    const handleEdit = async (item: T) => {\n        setLoadingEdit(true);\n        try {\n            const response = await axios.get(route(routes.show, { id: item.id }));\n            const data = response.data;\n\n            // Extract the entity data from the response\n            // The response structure is { entityName: entityData, ... }\n            const entityData = data[entityName] || data;\n\n            setEditingItem(entityData);\n            setEditSheetOpen(true);\n        } catch (error) {\n            console.error('Error fetching entity:', error);\n            toast.error(`Erro ao carregar dados`);\n        } finally {\n            setLoadingEdit(false);\n        }\n    };\n\n    const handleDelete = async (item: T) => {\n        // Blur the current active element to prevent focus issues\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n\n        setDeletingItem(item);\n        setIsCheckingDependencies(true);\n\n        try {\n            if (routes.checkDependencies) {\n                const response = await fetch(route(routes.checkDependencies, { id: item.id }));\n                const data = await response.json();\n                setDependencies(data);\n\n                if (data.can_delete) {\n                    setDeleteDialogOpen(true);\n                } else {\n                    setDependenciesDialogOpen(true);\n                }\n            } else {\n                // If no dependency check route is configured, open delete dialog directly\n                setDeleteDialogOpen(true);\n            }\n        } catch {\n            toast.error('Erro ao verificar dependências', {\n                description: 'Não foi possível verificar as dependências.',\n            });\n            // On error, still allow deletion attempt\n            setDeleteDialogOpen(true);\n        } finally {\n            setIsCheckingDependencies(false);\n        }\n    };\n\n    const confirmDelete = async () => {\n        if (!deletingItem) return;\n\n        return new Promise<void>((resolve, reject) => {\n            router.delete(route(routes.destroy, { id: deletingItem.id }), {\n                onSuccess: () => {\n                    toast.success(`${entityLabel} excluído com sucesso`);\n                    setDeleteDialogOpen(false);\n                    setDeletingItem(null);\n                    setDependencies(null);\n                    resolve();\n                },\n                onError: (errors) => {\n                    toast.error(`Erro ao excluir ${entityName}`);\n                    reject(errors);\n                },\n                preserveScroll: true,\n                preserveState: true,\n            });\n        });\n    };\n\n    const checkDependencies = async () => {\n        if (!deletingItem || !routes.checkDependencies) {\n            throw new Error('No item selected or dependencies route not configured');\n        }\n\n        const response = await fetch(route(routes.checkDependencies, { id: deletingItem.id }));\n        return response.json();\n    };\n\n    const clearEditingItem = () => {\n        setEditingItem(null);\n    };\n\n    return {\n        editingItem,\n        deletingItem,\n        loadingEdit,\n        isEditSheetOpen,\n        isDeleteDialogOpen,\n        isDependenciesDialogOpen,\n        dependencies,\n        isCheckingDependencies,\n\n        handleEdit,\n        handleDelete,\n        confirmDelete,\n        checkDependencies,\n\n        setEditSheetOpen: (open: boolean) => {\n            setEditSheetOpen(open);\n            if (!open) {\n                clearEditingItem();\n            }\n        },\n        setDeleteDialogOpen: (open: boolean) => {\n            setDeleteDialogOpen(open);\n            if (!open) {\n                setDeletingItem(null);\n                setDependencies(null);\n            }\n        },\n        setDependenciesDialogOpen: (open: boolean) => {\n            setDependenciesDialogOpen(open);\n            if (!open) {\n                setDeletingItem(null);\n                setDependencies(null);\n            }\n        },\n        clearEditingItem,\n    };\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/hooks/useSorting.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 5,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 5,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                184,
                                187
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                184,
                                187
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 12,
                "column": 39,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 12,
                "endColumn": 42,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                418,
                                421
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                418,
                                421
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { router } from '@inertiajs/react';\nimport { useCallback, useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\n// Standalone sorting hook for Inertia-based components\nexport interface UseSortingProps {\n    routeName: string;\n    initialSort?: string;\n    initialDirection?: 'asc' | 'desc';\n    additionalParams?: Record<string, any>;\n}\n\nexport function useSorting({ routeName, initialSort = 'name', initialDirection = 'asc', additionalParams = {} }: UseSortingProps) {\n    const [sort, setSort] = useState(initialSort);\n    const [direction, setDirection] = useState<'asc' | 'desc'>(initialDirection);\n\n    const handleSort = useCallback(\n        (columnId: string) => {\n            let newDirection: 'asc' | 'desc' = 'asc';\n            const newSort = columnId;\n\n            if (sort === columnId) {\n                newDirection = direction === 'asc' ? 'desc' : 'asc';\n            }\n\n            setSort(newSort);\n            setDirection(newDirection);\n\n            // Navigate using Inertia\n            router.get(\n                route(routeName),\n                {\n                    ...additionalParams,\n                    sort: newSort,\n                    direction: newDirection,\n                },\n                { preserveState: true, preserveScroll: true },\n            );\n        },\n        [sort, direction, routeName, additionalParams],\n    );\n\n    return {\n        sort,\n        direction,\n        handleSort,\n    };\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/app-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/app/app-header-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/app/app-sidebar-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/asset-hierarchy/create-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/asset-hierarchy/edit-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/asset-hierarchy/layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/asset-hierarchy/list-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/asset-hierarchy/show-layout.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/rules-of-hooks",
                "severity": 2,
                "message": "React Hook \"useSidebar\" is called conditionally. React Hooks must be called in the exact same order in every component render.",
                "line": 49,
                "column": 27,
                "nodeType": "Identifier",
                "endLine": 49,
                "endColumn": 37
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'previousSidebarOpen' and 'sidebarControls'. Either include them or remove the dependency array.",
                "line": 75,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 75,
                "endColumn": 49,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [isCompressed, previousSidebarOpen, sidebarControls, sidebarControls.isMobile]",
                        "fix": {
                            "range": [
                                2667,
                                2708
                            ],
                            "text": "[isCompressed, previousSidebarOpen, sidebarControls, sidebarControls.isMobile]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { MainSelectionTab, MainSelectionTabList, MainSelectionTabTrigger } from '@/components/ui/main-selection-tab';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useSidebar } from '@/components/ui/sidebar';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\nimport { cn } from '@/lib/utils';\nimport { Link } from '@inertiajs/react';\nimport { Check, Maximize2, Minimize2 } from 'lucide-react';\nimport { useEffect, useState, type ReactNode } from 'react';\n\ninterface Tab {\n    id: string;\n    label: string;\n    content: ReactNode;\n}\n\ninterface ShowLayoutProps {\n    title: string;\n    subtitle?: string | ReactNode;\n    editRoute: string;\n    tabs: Tab[];\n    children?: ReactNode;\n    showEditButton?: boolean;\n    defaultActiveTab?: string;\n    onCompressedChange?: (compressed: boolean) => void;\n    defaultCompressed?: boolean;\n}\n\nexport default function ShowLayout({\n    title,\n    subtitle,\n    editRoute,\n    tabs,\n    children,\n    showEditButton = false,\n    defaultActiveTab,\n    onCompressedChange,\n    defaultCompressed = false,\n}: ShowLayoutProps) {\n    const [activeTab, setActiveTab] = useState(defaultActiveTab || (tabs && tabs.length > 0 ? tabs[0].id : ''));\n    const [isCompressed, setIsCompressed] = useState(defaultCompressed);\n\n    // Try to use sidebar hook, but handle cases where it might not be available\n    let sidebarControls: ReturnType<typeof useSidebar> | null = null;\n    try {\n        sidebarControls = useSidebar();\n    } catch {\n        // ShowLayout is not within a SidebarProvider\n    }\n\n    // Store the previous sidebar state\n    const [previousSidebarOpen, setPreviousSidebarOpen] = useState(() => {\n        return sidebarControls ? sidebarControls.state === 'expanded' : true;\n    });\n\n    // Simple animation class for all tabs\n    const tabAnimationClass = 'animate-in fade-in-2 slide-in-from-top-5 duration-200';\n\n    useEffect(() => {\n        // When compressed mode changes, toggle sidebar accordingly\n        if (sidebarControls && !sidebarControls.isMobile) {\n            if (isCompressed) {\n                // Store current sidebar state before closing\n                setPreviousSidebarOpen(sidebarControls.state === 'expanded');\n                // Close sidebar when entering compressed mode\n                sidebarControls.setOpen(false);\n            } else {\n                // Restore previous sidebar state when exiting compressed mode\n                sidebarControls.setOpen(previousSidebarOpen);\n            }\n        }\n    }, [isCompressed, sidebarControls?.isMobile]);\n\n    const handleToggleCompressed = () => {\n        const newCompressed = !isCompressed;\n        setIsCompressed(newCompressed);\n        onCompressedChange?.(newCompressed);\n    };\n\n    return (\n        <div className=\"relative flex h-[calc(100vh-3rem)] flex-col\">\n            {/* Fixed Header Section */}\n            <div className=\"bg-background flex-shrink-0\">\n                {/* Title and Actions */}\n                <div\n                    className={cn(\n                        'border-gray-200 transition-all duration-200 ease-in-out dark:border-gray-800',\n                        isCompressed ? 'border-b py-2' : 'px-6 py-4 lg:px-8',\n                    )}\n                >\n                    <div\n                        className={cn(\n                            'flex items-start justify-between gap-2 transition-all duration-200 ease-in-out',\n                            isCompressed ? 'gap-2 px-6 lg:px-8' : '',\n                            !isCompressed && '',\n                        )}\n                    >\n                        <div className={cn('flex-1 transition-all duration-200 ease-in-out', isCompressed ? 'flex items-center gap-4' : 'space-y-1')}>\n                            <h1\n                                className={cn(\n                                    'text-foreground font-semibold transition-all duration-200 ease-in-out',\n                                    isCompressed ? 'text-base leading-6 lg:text-lg' : 'text-xl leading-7 lg:text-2xl',\n                                )}\n                            >\n                                {title}\n                            </h1>\n\n                            {/* Inline tabs for compressed mode - Desktop only */}\n                            {isCompressed && tabs && tabs.length > 0 && (\n                                <div className=\"hidden flex-1 items-center gap-1 md:flex\">\n                                    {tabs.map((tab) => (\n                                        <button\n                                            key={tab.id}\n                                            onClick={() => setActiveTab(tab.id)}\n                                            className={cn(\n                                                'rounded-md px-3 py-1 text-sm transition-all duration-200',\n                                                'hover:bg-muted/50',\n                                                activeTab === tab.id ? 'bg-muted text-foreground font-medium' : 'text-muted-foreground',\n                                            )}\n                                        >\n                                            {tab.label}\n                                        </button>\n                                    ))}\n                                </div>\n                            )}\n\n                            {/* Mobile Select for compressed mode - Inline */}\n                            {isCompressed && tabs && tabs.length > 0 && (\n                                <div className=\"min-w-0 flex-1 md:hidden\">\n                                    <Select value={activeTab} onValueChange={setActiveTab}>\n                                        <SelectTrigger className=\"h-8 w-full text-sm\">\n                                            <SelectValue>{tabs.find((tab) => tab.id === activeTab)?.label}</SelectValue>\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                            {tabs.map((tab) => (\n                                                <SelectItem key={tab.id} value={tab.id} className=\"flex items-center gap-2\">\n                                                    <div className=\"w-4\">{activeTab === tab.id && <Check className=\"h-4 w-4\" />}</div>\n                                                    {tab.label}\n                                                </SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n                                </div>\n                            )}\n\n                            {!isCompressed && subtitle && (\n                                <p className={cn('text-muted-foreground mt-2 text-sm leading-5 transition-all duration-200 ease-in-out')}>\n                                    {subtitle}\n                                </p>\n                            )}\n                        </div>\n                        {/* Buttons */}\n                        <div className=\"flex items-start gap-2\">\n                            <TooltipProvider>\n                                <Tooltip>\n                                    <TooltipTrigger asChild>\n                                        <Button\n                                            variant=\"ghost\"\n                                            size=\"icon\"\n                                            onClick={handleToggleCompressed}\n                                            className={cn('h-8 w-8 flex-shrink-0 transition-all duration-200')}\n                                        >\n                                            {isCompressed ? <Minimize2 className=\"h-4 w-4\" /> : <Maximize2 className=\"h-4 w-4\" />}\n                                        </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                        <p>{isCompressed ? 'Expandir visualização' : 'Comprimir visualização'}</p>\n                                    </TooltipContent>\n                                </Tooltip>\n                            </TooltipProvider>\n                            {showEditButton && (\n                                <Button asChild className=\"hidden sm:inline-flex\">\n                                    <Link href={editRoute}>Editar</Link>\n                                </Button>\n                            )}\n                        </div>\n                    </div>\n                    {/* Show edit button below on mobile when needed */}\n                    {showEditButton && !isCompressed && (\n                        <div className=\"mt-3 sm:hidden\">\n                            <Button asChild className=\"w-full\">\n                                <Link href={editRoute}>Editar</Link>\n                            </Button>\n                        </div>\n                    )}\n                </div>\n\n                {/* Tabs Navigation - Only show when not compressed or on mobile */}\n                {tabs && tabs.length > 0 && !isCompressed && (\n                    <>\n                        {/* Mobile Select */}\n                        <div\n                            className={cn(\n                                'border-b border-gray-200 px-4 pb-4 transition-all duration-200 ease-in-out md:hidden dark:border-gray-800',\n                            )}\n                        >\n                            <Select value={activeTab} onValueChange={setActiveTab}>\n                                <SelectTrigger className=\"w-full\">\n                                    <SelectValue>{tabs.find((tab) => tab.id === activeTab)?.label}</SelectValue>\n                                </SelectTrigger>\n                                <SelectContent>\n                                    {tabs.map((tab) => (\n                                        <SelectItem key={tab.id} value={tab.id} className=\"flex items-center gap-2\">\n                                            <div className=\"w-4\">{activeTab === tab.id && <Check className=\"h-4 w-4\" />}</div>\n                                            {tab.label}\n                                        </SelectItem>\n                                    ))}\n                                </SelectContent>\n                            </Select>\n                        </div>\n\n                        {/* Desktop Tabs */}\n                        <div className=\"hidden md:block\">\n                            <MainSelectionTab value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                                <MainSelectionTabList className=\"px-6 lg:px-8\">\n                                    {tabs.map((tab) => (\n                                        <MainSelectionTabTrigger key={tab.id} value={tab.id} className={cn('py-2')}>\n                                            {tab.label}\n                                        </MainSelectionTabTrigger>\n                                    ))}\n                                </MainSelectionTabList>\n                            </MainSelectionTab>\n                        </div>\n                    </>\n                )}\n            </div>\n\n            {/* Scrollable Content Area */}\n            <div className=\"bg-sidebar-accent/30 flex-1 overflow-y-auto\">\n                <div className=\"px-6 lg:px-8\">\n                    {tabs && tabs.length > 0\n                        ? tabs.map((tab) => (\n                              <div\n                                  key={tab.id}\n                                  className={cn(\n                                      activeTab === tab.id ? 'block' : 'hidden',\n                                      // Add smooth vertical animation when tab becomes active\n                                      activeTab === tab.id && tabAnimationClass,\n                                  )}\n                              >\n                                  {tab.content}\n                              </div>\n                          ))\n                        : children}\n                </div>\n            </div>\n        </div>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/auth-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/auth/auth-card-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/auth/auth-simple-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/auth/auth-split-layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/layouts/settings/layout.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/lib/utils.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/areas.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1054,
                                1057
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1054,
                                1057
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateAreaSheet from '@/components/CreateAreaSheet';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Area } from '@/types/entities/area';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Áreas',\n        href: '/asset-hierarchy/areas',\n    },\n];\n\ninterface Props {\n    areas: {\n        data: Area[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n    plants: {\n        id: number;\n        name: string;\n    }[];\n}\n\nexport default function Areas({ areas: initialAreas, filters, plants }: Props) {\n    const entityOps = useEntityOperations<Area>({\n        entityName: 'area',\n        entityLabel: 'Área',\n        routes: {\n            index: 'asset-hierarchy.areas',\n            show: 'asset-hierarchy.areas.show',\n            destroy: 'asset-hierarchy.areas.destroy',\n            checkDependencies: 'asset-hierarchy.areas.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.areas',\n        initialSort: filters.sort || 'name',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('areasColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            name: true,\n            plant: true,\n            sectors_count: true,\n            asset_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialAreas.data;\n    const pagination = {\n        current_page: initialAreas.current_page,\n        last_page: initialAreas.last_page,\n        per_page: initialAreas.per_page,\n        total: initialAreas.total,\n        from: initialAreas.from,\n        to: initialAreas.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.name}</div>\n                    {row.description && <div className=\"text-muted-foreground text-sm\">{row.description}</div>}\n                </div>\n            ),\n        },\n        {\n            key: 'plant',\n            label: 'Planta',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.plant?.name || '-',\n        },\n        {\n            key: 'sectors_count',\n            label: 'Setores',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n        {\n            key: 'asset_count',\n            label: 'Ativos',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('areasColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.areas'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(route('asset-hierarchy.areas'), { ...filters, search, sort, direction, page }, { preserveState: true, preserveScroll: true });\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.areas'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Áreas\" />\n\n            <ListLayout\n                title=\"Áreas\"\n                description=\"Gerencie as áreas do sistema\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                onCreateClick={() => entityOps.setEditSheetOpen(true)}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(area) => router.visit(route('asset-hierarchy.areas.show', { id: area.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        actions={(area) => (\n                            <EntityActionDropdown onEdit={() => entityOps.handleEdit(area)} onDelete={() => entityOps.handleDelete(area)} />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <CreateAreaSheet\n                area={entityOps.editingItem || undefined}\n                open={entityOps.isEditSheetOpen}\n                onOpenChange={entityOps.setEditSheetOpen}\n                mode={entityOps.editingItem ? 'edit' : 'create'}\n                plants={plants}\n            />\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityLabel={entityOps.deletingItem?.name || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"área\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/areas/create.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/areas/edit.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/areas/show.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/assets.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 18,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 18,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1002,
                                1005
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1002,
                                1005
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { type Asset } from '@/types/asset-hierarchy';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Ativos',\n        href: '/asset-hierarchy/assets',\n    },\n];\n\ninterface Props {\n    asset: {\n        data: Asset[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\nexport default function Assets({ asset: initialAssets, filters }: Props) {\n    const entityOps = useEntityOperations<Asset>({\n        entityName: 'asset',\n        entityLabel: 'Ativo',\n        routes: {\n            index: 'asset-hierarchy.assets',\n            show: 'asset-hierarchy.assets.show',\n            destroy: 'asset-hierarchy.assets.destroy',\n            checkDependencies: 'asset-hierarchy.assets.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.assets',\n        initialSort: filters.sort || 'tag',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('assetColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            tag: true,\n            asset_type: true,\n            serial_number: true,\n            part_number: true,\n            plant: true,\n            area: true,\n            sector: true,\n            shift: true,\n            manufacturer: true,\n            manufacturing_year: true,\n            routines_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialAssets.data;\n    const pagination = {\n        current_page: initialAssets.current_page,\n        last_page: initialAssets.last_page,\n        per_page: initialAssets.per_page,\n        total: initialAssets.total,\n        from: initialAssets.from,\n        to: initialAssets.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'tag',\n            label: 'TAG',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.tag}</div>\n                    {row.description && (\n                        <div className=\"text-muted-foreground text-sm\">\n                            {row.description.length > 40 ? `${row.description.substring(0, 40)}...` : row.description}\n                        </div>\n                    )}\n                </div>\n            ),\n        },\n        {\n            key: 'serial_number',\n            label: 'Número Serial',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.serial_number ?? '-',\n        },\n        {\n            key: 'part_number',\n            label: 'Part Number',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.part_number ?? '-',\n        },\n        {\n            key: 'routines_count',\n            label: 'Rotinas',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value, row) => row.routines_count ?? 0,\n        },\n        {\n            key: 'asset_type',\n            label: 'Tipo',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.asset_type?.name ?? '-',\n        },\n        {\n            key: 'plant',\n            label: 'Planta',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.plant?.name ?? row.area?.plant?.name ?? row.sector?.area?.plant?.name ?? '-',\n        },\n        {\n            key: 'area',\n            label: 'Área',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.area?.name ?? row.sector?.area?.name ?? '-',\n        },\n        {\n            key: 'sector',\n            label: 'Setor',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.sector?.name ?? '-',\n        },\n        {\n            key: 'shift',\n            label: 'Turno',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value, row) => row.shift?.name ?? '-',\n        },\n        {\n            key: 'manufacturer',\n            label: 'Fabricante',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => {\n                const manufacturer = row.manufacturer;\n                if (typeof manufacturer === 'object' && manufacturer !== null) {\n                    return manufacturer.name;\n                }\n                return manufacturer ?? '-';\n            },\n        },\n        {\n            key: 'manufacturing_year',\n            label: 'Ano',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value, row) => row.manufacturing_year ?? '-',\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('assetColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.assets'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(route('asset-hierarchy.assets'), { ...filters, search, sort, direction, page }, { preserveState: true, preserveScroll: true });\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.assets'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Ativos\" />\n\n            <ListLayout\n                title=\"Ativos\"\n                description=\"Gerencie os ativos do sistema\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                createRoute={route('asset-hierarchy.assets.create')}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(asset) => router.visit(route('asset-hierarchy.assets.show', { asset: asset.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        sortColumn={sort}\n                        sortDirection={direction}\n                        actions={(asset) => (\n                            <EntityActionDropdown\n                                onEdit={() => router.visit(route('asset-hierarchy.assets.show', { asset: asset.id, tab: 'informacoes' }))}\n                                onDelete={() => entityOps.handleDelete(asset)}\n                            />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityName=\"ativo\"\n                entityLabel={entityOps.deletingItem?.tag || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"ativo\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/assets/export.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/assets/import.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 67,
                "column": 15,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 67,
                "endColumn": 18,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2756,
                                2759
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2756,
                                2759
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 170,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 170,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6944,
                                6947
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6944,
                                6947
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 238,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 238,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9289,
                                9292
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9289,
                                9292
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 3,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { type BreadcrumbItem } from '@/types';\nimport { Head, Link } from '@inertiajs/react';\nimport axios from 'axios';\nimport { ArrowLeftRight, Lightbulb, Upload, X } from 'lucide-react';\nimport * as React from 'react';\n\nimport HeadingSmall from '@/components/heading-small';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Progress } from '@/components/ui/progress';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nimport AppLayout from '@/layouts/app-layout';\nimport CadastroLayout from '@/layouts/asset-hierarchy/layout';\n\nconst importFields = [\n    { value: 'tag', label: 'Tag' },\n    { value: 'serial_number', label: 'Número de Série' },\n    { value: 'part_number', label: 'Part Number' },\n    { value: 'asset_type_id', label: 'Tipo de Ativo' },\n    { value: 'description', label: 'Descrição' },\n    { value: 'manufacturer', label: 'Fabricante' },\n    { value: 'manufacturing_year', label: 'Ano de Fabricação' },\n    { value: 'plant_id', label: 'Planta' },\n    { value: 'area_id', label: 'Área' },\n    { value: 'sector_id', label: 'Setor' },\n];\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Importar Ativos',\n        href: '/asset-hierarchy/assets/importar',\n    },\n];\n\n// Função para normalizar string (remover espaços e converter para minúsculo)\nconst normalizeString = (str: string): string => {\n    return str.toLowerCase().replace(/\\s+/g, '').trim();\n};\n\n// Função para encontrar o melhor match entre uma string e uma lista de campos\nconst findBestMatch = (header: string, fields: typeof importFields): string => {\n    const normalizedHeader = normalizeString(header);\n\n    for (const field of fields) {\n        const normalizedFieldLabel = normalizeString(field.label);\n        if (normalizedHeader === normalizedFieldLabel) {\n            return field.value;\n        }\n    }\n\n    return '';\n};\n\nexport default function ImportAsset() {\n    const [processing, setProcessing] = React.useState(false);\n    const [showProgress, setShowProgress] = React.useState(false);\n    const [progressValue, setProgressValue] = React.useState(0);\n    const [selectedFile, setSelectedFile] = React.useState<File | null>(null);\n    const [showErrorDialog, setShowErrorDialog] = React.useState(false);\n    const [errorMessage, setErrorMessage] = React.useState('');\n    const [csvData, setCsvData] = React.useState<{\n        headers: string[];\n        data: any[];\n        validationErrors: string[];\n        progress: number;\n        totalLines: number;\n        processedLines: number;\n    } | null>(null);\n    const [showFormat, setShowFormat] = React.useState(true);\n    const [showFormatInstructions, setShowFormatInstructions] = React.useState(true);\n    const [showDuplicateTagsInfo, setShowDuplicateTagsInfo] = React.useState(true);\n    const [fieldMapping, setFieldMapping] = React.useState<Record<string, string>>({});\n    const [showInstructions, setShowInstructions] = React.useState(true);\n    const [showTable, setShowTable] = React.useState(false);\n    const [importing, setImporting] = React.useState(false);\n    const [importErrors, setImportErrors] = React.useState<string[]>([]);\n    const [showImportDialog, setShowImportDialog] = React.useState(false);\n    const [showImportProgress, setShowImportProgress] = React.useState(false);\n    const [importProgress, setImportProgress] = React.useState(0);\n    const [importProgressInterval, setImportProgressInterval] = React.useState<NodeJS.Timeout | null>(null);\n    const [importSuccess, setImportSuccess] = React.useState(false);\n    const [importStats, setImportStats] = React.useState<{ imported: number; skipped: number } | null>(null);\n\n    // Função para validar o mapeamento dos campos\n    const isMappingValid = React.useCallback(() => {\n        if (!csvData?.headers || !fieldMapping) return false;\n\n        // Campos obrigatórios que devem estar mapeados\n        const requiredFields = ['tag'];\n\n        // Verifica se todos os campos obrigatórios estão mapeados\n        const hasAllRequiredFields = requiredFields.every((field) => Object.values(fieldMapping).includes(field));\n\n        // Verifica se há pelo menos uma coluna mapeada\n        const hasAtLeastOneMapping = Object.values(fieldMapping).some((value) => value !== '');\n\n        return hasAllRequiredFields && hasAtLeastOneMapping;\n    }, [csvData?.headers, fieldMapping]);\n\n    const handleStartMapping = () => {\n        setShowProgress(false);\n        setShowTable(true);\n    };\n\n    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (!file) {\n            setSelectedFile(null);\n            return;\n        }\n\n        // Validação do tamanho do arquivo (1MB = 1024 * 1024 bytes)\n        const maxSize = 1024 * 1024; // 1MB\n        if (file.size > maxSize) {\n            setErrorMessage('O arquivo é muito grande. O tamanho máximo permitido é 1MB.');\n            setShowErrorDialog(true);\n            setSelectedFile(null);\n            return;\n        }\n\n        setSelectedFile(file);\n    };\n\n    const handleSubmit = async (e: React.FormEvent) => {\n        e.preventDefault();\n        if (!selectedFile) return;\n\n        setShowProgress(true);\n        setProgressValue(0);\n        setProcessing(true);\n        setShowTable(false);\n\n        const formData = new FormData();\n        formData.append('file', selectedFile);\n\n        try {\n            const response = await axios.post(route('asset-hierarchy.assets.import.analyze'), formData, {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                    Accept: 'application/json',\n                },\n            });\n\n            setCsvData({\n                headers: response.data.headers,\n                data: response.data.data,\n                validationErrors: response.data.validationErrors,\n                progress: response.data.progress,\n                totalLines: response.data.totalLines,\n                processedLines: response.data.processedLines,\n            });\n\n            // Mapeamento automático dos campos\n            const autoMapping: Record<string, string> = {};\n            response.data.headers.forEach((header: string) => {\n                const bestMatch = findBestMatch(header, importFields);\n                if (bestMatch) {\n                    autoMapping[header] = bestMatch;\n                }\n            });\n            setFieldMapping(autoMapping);\n\n            setShowFormat(false);\n            setShowInstructions(true);\n            setProgressValue(response.data.progress);\n        } catch (error: any) {\n            console.error('Erro ao processar arquivo:', error);\n            setProgressValue(0);\n            setShowProgress(false);\n\n            // Extrai a mensagem de erro da resposta\n            const errorMessage = error.response?.data?.error || 'Erro ao processar o arquivo CSV.';\n            setErrorMessage(errorMessage);\n            setShowErrorDialog(true);\n        } finally {\n            setProcessing(false);\n        }\n    };\n\n    const handleFieldMappingChange = (csvHeader: string, fieldValue: string) => {\n        setFieldMapping((prev) => ({\n            ...prev,\n            [csvHeader]: fieldValue === 'none' ? '' : fieldValue,\n        }));\n    };\n\n    const handleImport = async () => {\n        if (!csvData) return;\n\n        // Primeiro, mostra o diálogo de progresso e inicia o monitoramento\n        setShowImportProgress(true);\n        setImportProgress(0);\n        setImporting(true);\n        setImportErrors([]);\n        setImportSuccess(false);\n        setImportStats(null);\n\n        // Inicia o intervalo ANTES da importação\n        const progressInterval = setInterval(async () => {\n            try {\n                const progressResponse = await axios.get(route('asset-hierarchy.assets.import.progress'));\n\n                if (progressResponse.data.progress !== undefined) {\n                    setImportProgress(progressResponse.data.progress);\n                }\n\n                if (!progressResponse.data.import_in_progress) {\n                    clearInterval(progressInterval);\n                }\n            } catch (error) {\n                console.error('Erro ao verificar progresso:', error);\n            }\n        }, 500);\n\n        setImportProgressInterval(progressInterval);\n\n        // Agora inicia a importação\n        try {\n            const response = await axios.post(route('asset-hierarchy.assets.import.data'), {\n                data: csvData.data,\n                mapping: fieldMapping,\n            });\n\n            if (response.data.success) {\n                setImportSuccess(true);\n                setImportStats({\n                    imported: response.data.imported,\n                    skipped: response.data.skipped,\n                });\n                setShowFormat(true);\n                setCsvData(null);\n                setFieldMapping({});\n            }\n        } catch (error: any) {\n            if (error.response?.data?.validationErrors) {\n                setImportErrors(error.response.data.validationErrors);\n                setShowImportDialog(true);\n            } else {\n                setErrorMessage('Erro ao importar os dados. Por favor, tente novamente.');\n                setShowErrorDialog(true);\n            }\n        } finally {\n            clearInterval(progressInterval);\n            setImportProgressInterval(null);\n            setImporting(false);\n        }\n    };\n\n    const handleCancelImport = async () => {\n        try {\n            // Limpa o intervalo\n            if (importProgressInterval) {\n                clearInterval(importProgressInterval);\n                setImportProgressInterval(null);\n            }\n\n            // Envia requisição de cancelamento para o backend\n            await axios.post(\n                route('asset-hierarchy.assets.import.data'),\n                {\n                    data: csvData?.data,\n                    mapping: fieldMapping,\n                    cancel: true,\n                },\n                {\n                    headers: {\n                        'X-Requested-With': 'XMLHttpRequest',\n                    },\n                    withCredentials: true,\n                },\n            );\n\n            // Limpa o estado local\n            setShowFormat(true);\n            setCsvData(null);\n            setFieldMapping({});\n            setImporting(false);\n            setShowImportProgress(false);\n        } catch (error) {\n            console.error('Erro ao cancelar importação:', error);\n            // Mesmo com erro, limpa o estado local\n            setShowFormat(true);\n            setCsvData(null);\n            setFieldMapping({});\n            setImporting(false);\n            setShowImportProgress(false);\n        }\n    };\n\n    const handleCloseImportDialog = () => {\n        setShowImportProgress(false);\n        setImportSuccess(false);\n        setImportStats(null);\n    };\n\n    // Adiciona listener para fechamento da janela\n    React.useEffect(() => {\n        const handleBeforeUnload = (e: BeforeUnloadEvent) => {\n            if (importing) {\n                e.preventDefault();\n                e.returnValue = '';\n                return '';\n            }\n        };\n\n        const handleUnload = () => {\n            if (importing) {\n                // Usa sendBeacon para garantir que a requisição seja enviada mesmo com a janela fechando\n                const formData = new FormData();\n                formData.append('data', JSON.stringify(csvData?.data || []));\n                formData.append('mapping', JSON.stringify(fieldMapping || {}));\n                formData.append('cancel', 'true');\n                formData.append('X-Requested-With', 'XMLHttpRequest');\n\n                navigator.sendBeacon(route('asset-hierarchy.assets.import.data'), formData);\n            }\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n        window.addEventListener('unload', handleUnload);\n\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n            window.removeEventListener('unload', handleUnload);\n        };\n    }, [importing, csvData, fieldMapping]);\n\n    // Limpa o intervalo quando o componente é desmontado\n    React.useEffect(() => {\n        return () => {\n            if (importProgressInterval) {\n                clearInterval(importProgressInterval);\n            }\n        };\n    }, [importProgressInterval]);\n\n    // Adiciona um efeito para monitorar o estado de importação\n    React.useEffect(() => {\n        if (importing) {\n            setShowImportProgress(true);\n        }\n    }, [importing, importProgress]);\n\n    // Adiciona um efeito para monitorar mudanças no showImportProgress\n    React.useEffect(() => {\n        // Monitor progress dialog state changes\n    }, [showImportProgress, importProgress]);\n\n    React.useEffect(() => {\n        if (showProgress && progressValue < 100) {\n            const timer = setInterval(() => {\n                setProgressValue((prev) => Math.min(prev + 10, 90));\n            }, 500);\n\n            return () => clearInterval(timer);\n        }\n    }, [showProgress, progressValue]);\n\n    // Adiciona um efeito para monitorar mudanças no importProgress\n    React.useEffect(() => {\n        // Monitor import progress updates\n    }, [importProgress]);\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Importar Ativos\" />\n\n            <CadastroLayout>\n                <div className=\"space-y-8\">\n                    <div className=\"max-w-2xl\">\n                        <HeadingSmall title=\"Importar Ativos\" description=\"Importe ativos através de um arquivo CSV\" />\n\n                        <form onSubmit={handleSubmit} className=\"mt-6 space-y-8\">\n                            <div className=\"grid gap-4\">\n                                <div className=\"grid gap-2\">\n                                    <Label htmlFor=\"file\">Arquivo CSV</Label>\n                                    <div className=\"flex items-center gap-2\">\n                                        <div className=\"flex-1\">\n                                            <Input\n                                                id=\"file\"\n                                                type=\"file\"\n                                                accept=\".csv\"\n                                                onChange={handleFileChange}\n                                                className=\"flex-1 file:mr-4 file:px-2 file:text-sm file:font-semibold\"\n                                            />\n                                        </div>\n                                        <Button type=\"submit\" disabled={processing || !selectedFile}>\n                                            <Upload className=\"mr-2 h-4 w-4\" />\n                                            {processing ? 'Analisando...' : 'Analisar'}\n                                        </Button>\n                                    </div>\n                                    {!selectedFile && (\n                                        <p className=\"text-muted-foreground text-sm\">Selecione um arquivo CSV para importação (máximo 1 MB)</p>\n                                    )}\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n\n                    {/* Diálogo de Erro */}\n                    <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>\n                        <DialogContent>\n                            <DialogHeader>\n                                <DialogTitle>Erro de Validação</DialogTitle>\n                                <DialogDescription>{errorMessage}</DialogDescription>\n                            </DialogHeader>\n                            <DialogFooter>\n                                <Button onClick={() => setShowErrorDialog(false)}>OK</Button>\n                            </DialogFooter>\n                        </DialogContent>\n                    </Dialog>\n\n                    <div className=\"w-full\">\n                        {showFormat ? (\n                            <div className=\"max-w-2xl\">\n                                {showFormatInstructions && (\n                                    <div className=\"bg-muted relative rounded-lg p-4\">\n                                        <Button\n                                            variant=\"ghost\"\n                                            size=\"icon\"\n                                            className=\"hover:bg-muted-foreground/20 absolute top-2 right-2 h-6 w-6\"\n                                            onClick={() => setShowFormatInstructions(false)}\n                                        >\n                                            <X className=\"h-4 w-4\" />\n                                        </Button>\n                                        <div className=\"space-y-1 pr-8\">\n                                            <h3 className=\"text-base font-medium\">Colunas esperadas no CSV</h3>\n                                            <p className=\"text-muted-foreground text-sm\">\n                                                Seu arquivo CSV deve conter as colunas abaixo para uma importação bem-sucedida.\n                                            </p>\n                                            <div className=\"mt-4 grid grid-cols-3 gap-x-12 gap-y-1 font-mono text-sm\">\n                                                <div>Tag</div>\n                                                <div>Número de Série</div>\n                                                <div>Part Number</div>\n                                                <div>Tipo de Ativo</div>\n                                                <div>Descrição</div>\n                                                <div>Fabricante</div>\n                                                <div>Ano de Fabricação</div>\n                                                <div>Planta</div>\n                                                <div>Área</div>\n                                                <div>Setor</div>\n                                            </div>\n                                            <div className=\"mt-4 flex items-center gap-1.5 text-sm\">\n                                                <Lightbulb className=\"text-muted-foreground h-4 w-4\" />\n                                                <span className=\"font-medium\">\n                                                    Use a funcionalidade de exportar para faciliar a criação do modelo do arquivo CSV.\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n\n                                {showDuplicateTagsInfo && (\n                                    <div className=\"bg-muted relative mt-4 rounded-lg p-4\">\n                                        <Button\n                                            variant=\"ghost\"\n                                            size=\"icon\"\n                                            className=\"hover:bg-muted-foreground/20 absolute top-2 right-2 h-6 w-6\"\n                                            onClick={() => setShowDuplicateTagsInfo(false)}\n                                        >\n                                            <X className=\"h-4 w-4\" />\n                                        </Button>\n                                        <div className=\"space-y-1 pr-8\">\n                                            <h3 className=\"text-base font-medium\">Tags Duplicadas</h3>\n                                            <p className=\"text-muted-foreground text-sm\">\n                                                Durante a importação, o sistema verifica automaticamente por tags duplicadas.\n                                            </p>\n                                            <div className=\"mt-4 space-y-2 text-sm\">\n                                                <p>• Tags que já existem na mesma combinação de planta/área/setor não serão importadas</p>\n                                                <p>• A mesma tag pode existir em diferentes plantas, áreas ou setores</p>\n                                                <p>• Tags duplicadas dentro do arquivo CSV serão consideradas apenas uma vez</p>\n                                            </div>\n                                            <div className=\"mt-4 flex items-center gap-1.5 text-sm\">\n                                                <Lightbulb className=\"text-muted-foreground h-4 w-4\" />\n                                                <span className=\"font-medium\">\n                                                    A importação mostrará ao final quantos tags foram pulados por duplicidade\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        ) : (\n                            showTable &&\n                            csvData && (\n                                <div className=\"space-y-8\">\n                                    <div className=\"max-w-2xl\">\n                                        {showInstructions && !csvData.validationErrors?.length && (\n                                            <div className=\"bg-muted relative rounded-lg p-4\">\n                                                <Button\n                                                    variant=\"ghost\"\n                                                    size=\"icon\"\n                                                    className=\"hover:bg-muted-foreground/20 absolute top-2 right-2 h-6 w-6\"\n                                                    onClick={() => setShowInstructions(false)}\n                                                >\n                                                    <X className=\"h-4 w-4\" />\n                                                </Button>\n                                                <div className=\"space-y-1 pr-8\">\n                                                    <h3 className=\"text-base font-medium\">Correlacione os campos</h3>\n                                                    <p className=\"text-muted-foreground text-sm\">\n                                                        Para cada coluna do seu arquivo CSV, selecione o campo correspondente do sistema. Se uma\n                                                        coluna não deve ser importada, selecione \"Não importar\".\n                                                    </p>\n                                                </div>\n                                            </div>\n                                        )}\n                                    </div>\n\n                                    {csvData.validationErrors && csvData.validationErrors.length > 0 && (\n                                        <div className=\"max-w-2xl space-y-4 rounded-lg border border-red-100 bg-red-50 p-4 dark:border-red-200/10 dark:bg-red-700/10\">\n                                            <div className=\"relative space-y-0.5 text-red-600 dark:text-red-100\">\n                                                <p className=\"font-medium\">Atenção</p>\n                                                <p className=\"text-sm\">Foram encontrados erros de validação no arquivo CSV.</p>\n                                            </div>\n                                            <ul className=\"list-inside list-disc space-y-1 text-sm text-red-600 dark:text-red-100\">\n                                                {csvData.validationErrors.map((error, index) => (\n                                                    <li key={index}>{error}</li>\n                                                ))}\n                                            </ul>\n                                            <div className=\"relative space-y-0.5 text-red-600 dark:text-red-100\">\n                                                <p className=\"text-sm\">Por favor, corrija os erros no arquivo CSV e tente a importação novamente.</p>\n                                            </div>\n                                        </div>\n                                    )}\n\n                                    <div className=\"rounded-md\">\n                                        <Table>\n                                            <TableHeader>\n                                                <TableRow>\n                                                    {csvData.headers.map((header, index) => (\n                                                        <TableHead key={index} className=\"bg-muted/50 dark:bg-muted/30 pt-2\">\n                                                            <div className=\"space-y-2\">\n                                                                <Select\n                                                                    value={fieldMapping[header] || ''}\n                                                                    onValueChange={(value) => handleFieldMappingChange(header, value)}\n                                                                >\n                                                                    <SelectTrigger>\n                                                                        <SelectValue placeholder=\"Selecione o campo\" />\n                                                                    </SelectTrigger>\n                                                                    <SelectContent>\n                                                                        <SelectItem value=\"none\">Não importar</SelectItem>\n                                                                        {importFields.map((field) => (\n                                                                            <SelectItem key={field.value} value={field.value}>\n                                                                                {field.label}\n                                                                                {['tag'].includes(field.value) && (\n                                                                                    <span className=\"ml-1 text-xs text-red-500\">*</span>\n                                                                                )}\n                                                                            </SelectItem>\n                                                                        ))}\n                                                                    </SelectContent>\n                                                                </Select>\n                                                                <div className=\"mb-2 ml-3 font-bold\">{header}</div>\n                                                            </div>\n                                                        </TableHead>\n                                                    ))}\n                                                </TableRow>\n                                            </TableHeader>\n                                            <TableBody>\n                                                {csvData.data.map((row, rowIndex) => (\n                                                    <TableRow key={rowIndex}>\n                                                        {csvData.headers.map((header, colIndex) => (\n                                                            <TableCell key={colIndex} className=\"ml-3\">\n                                                                <div className=\"ml-3\">{row[header]}</div>\n                                                            </TableCell>\n                                                        ))}\n                                                    </TableRow>\n                                                ))}\n                                            </TableBody>\n                                        </Table>\n                                        {csvData.totalLines > 10 && (\n                                            <div className=\"text-muted-foreground mt-2 text-sm\">Mostrando 10 de {csvData.totalLines} linhas</div>\n                                        )}\n                                        {!isMappingValid() && (\n                                            <div className=\"mt-4 text-sm text-yellow-600 dark:text-yellow-100\">\n                                                <p className=\"font-medium\">Campos obrigatórios não mapeados:</p>\n                                                <ul className=\"mt-1 list-inside list-disc\">\n                                                    {!Object.values(fieldMapping).includes('tag') && <li>Tag</li>}\n                                                </ul>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                            )\n                        )}\n                    </div>\n                </div>\n\n                <div className=\"flex items-center gap-4\">\n                    <Button variant=\"outline\" asChild>\n                        <Link href={route('asset-hierarchy.assets')}>Cancelar</Link>\n                    </Button>\n                    <Button onClick={() => handleImport()} disabled={importing || !isMappingValid() || !selectedFile}>\n                        <Upload className=\"mr-2 h-4 w-4\" />\n                        {importing ? 'Importando...' : 'Importar'}\n                    </Button>\n                </div>\n\n                {/* Diálogo de Erro de Importação */}\n                <Dialog open={showImportDialog} onOpenChange={setShowImportDialog}>\n                    <DialogContent>\n                        <DialogHeader>\n                            <DialogTitle>Erros de Validação</DialogTitle>\n                            <DialogDescription>\n                                Foram encontrados erros de validação nos dados. Por favor, corrija-os antes de tentar importar novamente.\n                            </DialogDescription>\n                        </DialogHeader>\n\n                        <div className=\"space-y-4 py-4\">\n                            <ul className=\"list-inside list-disc space-y-1 text-sm text-red-600 dark:text-red-100\">\n                                {importErrors.map((error, index) => (\n                                    <li key={index}>{error}</li>\n                                ))}\n                            </ul>\n                        </div>\n\n                        <DialogFooter>\n                            <Button onClick={() => setShowImportDialog(false)}>OK</Button>\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n\n                <Dialog open={showProgress} onOpenChange={setShowProgress}>\n                    <DialogContent>\n                        <DialogHeader>\n                            <DialogTitle>Analisando CSV</DialogTitle>\n                            <DialogDescription>Processando arquivo para importação.</DialogDescription>\n                        </DialogHeader>\n\n                        <div className=\"space-y-4 py-4\">\n                            <div className=\"space-y-2\">\n                                <div className=\"text-muted-foreground flex justify-between text-sm\">\n                                    <span>\n                                        {progressValue === 100\n                                            ? 'Análise concluída!'\n                                            : `Processando linha ${csvData?.processedLines || 0} de ${csvData?.totalLines || 0}...`}\n                                    </span>\n                                    <span>{progressValue}%</span>\n                                </div>\n                                <Progress value={progressValue} className=\"w-full\" />\n                            </div>\n                            {progressValue === 100 && (\n                                <p className=\"text-muted-foreground text-left text-sm\">\n                                    O próximo passo é fazer a correlação entre os campos do seu CSV e os campos esperados pelo sistema.\n                                </p>\n                            )}\n                        </div>\n\n                        <DialogFooter className=\"justify-center pt-2 sm:justify-center\">\n                            {progressValue === 100 ? (\n                                <Button onClick={handleStartMapping} className=\"w-fit\">\n                                    <ArrowLeftRight className=\"mr-2 h-4 w-4\" />\n                                    Fazer correlacionamento\n                                </Button>\n                            ) : (\n                                <Button disabled className=\"w-fit\">\n                                    <Upload className=\"mr-2 h-4 w-4\" />\n                                    Analisando...\n                                </Button>\n                            )}\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n\n                {/* Diálogo de Progresso da Importação */}\n                <Dialog\n                    open={showImportProgress}\n                    onOpenChange={(open) => {\n                        if (!open && importing && !importSuccess) {\n                            handleCancelImport();\n                        } else if (!open && importSuccess) {\n                            handleCloseImportDialog();\n                        }\n                        setShowImportProgress(open);\n                    }}\n                >\n                    <DialogContent>\n                        <DialogHeader>\n                            <DialogTitle>{importSuccess ? 'Importação Concluída' : 'Importando Ativos'}</DialogTitle>\n                            <DialogDescription>\n                                {importSuccess ? 'A importação foi concluída com sucesso!' : 'A importação está em andamento. Por favor, aguarde...'}\n                            </DialogDescription>\n                        </DialogHeader>\n\n                        <div className=\"space-y-4 py-4\">\n                            {!importSuccess ? (\n                                <div className=\"space-y-2\">\n                                    <div className=\"text-muted-foreground flex justify-between text-sm\">\n                                        <span>Progresso da importação</span>\n                                        <span>{importProgress}%</span>\n                                    </div>\n                                    <Progress value={importProgress} className=\"w-full\" />\n                                </div>\n                            ) : (\n                                importStats && (\n                                    <div className=\"space-y-2\">\n                                        <div className=\"text-muted-foreground text-sm\">\n                                            <p>Ativos importados: {importStats.imported}</p>\n                                            <p>Ativos pulados: {importStats.skipped}</p>\n                                        </div>\n                                    </div>\n                                )\n                            )}\n                        </div>\n\n                        <DialogFooter>\n                            {importSuccess ? (\n                                <Button onClick={handleCloseImportDialog}>Fechar</Button>\n                            ) : (\n                                <Button variant=\"destructive\" onClick={handleCancelImport} disabled={importing}>\n                                    Cancelar Importação\n                                </Button>\n                            )}\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n            </CadastroLayout>\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/assets/routine-executions.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/assets/show.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 63,
                "column": 26,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 63,
                "endColumn": 29,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2225,
                                2228
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2225,
                                2228
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 83,
                "column": 29,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 83,
                "endColumn": 32,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2808,
                                2811
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2808,
                                2811
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 106,
                "column": 52,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 106,
                "endColumn": 55,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3421,
                                3424
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3421,
                                3424
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 168,
                "column": 41,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 168,
                "endColumn": 44,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6143,
                                6146
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6143,
                                6146
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 180,
                "column": 43,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 180,
                "endColumn": 46,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                6702,
                                6705
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                6702,
                                6705
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 189,
                "column": 43,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 189,
                "endColumn": 46,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                7058,
                                7061
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                7058,
                                7061
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'routines'. Either include it or remove the dependency array. You can also do a functional update 'setRoutines(r => ...)' if you only need 'routines' in the 'setRoutines' call.",
                "line": 232,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 232,
                "endColumn": 51,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [newRoutineId, tabFromUrl, asset?.routines, routines]",
                        "fix": {
                            "range": [
                                8760,
                                8803
                            ],
                            "text": "[newRoutineId, tabFromUrl, asset?.routines, routines]"
                        }
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 415,
                "column": 25,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 415,
                "endColumn": 28,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                15159,
                                15162
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                15159,
                                15162
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 445,
                "column": 40,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 445,
                "endColumn": 43,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                16094,
                                16097
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                16094,
                                16097
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 8,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import AssetFormComponent from '@/components/AssetFormComponent';\nimport AssetRuntimeInput from '@/components/AssetRuntimeInput';\nimport CreateRoutineButton from '@/components/CreateRoutineButton';\nimport CreateShiftSheet from '@/components/CreateShiftSheet';\nimport InlineRoutineForm from '@/components/InlineRoutineForm';\nimport InlineRoutineFormEditor from '@/components/InlineRoutineFormEditor';\nimport RoutineList from '@/components/RoutineList';\nimport ShiftCalendarView from '@/components/ShiftCalendarView';\nimport ShiftSelectionCard, { ShiftSelectionCardRef } from '@/components/ShiftSelectionCard';\nimport ShiftTableView from '@/components/ShiftTableView';\nimport EmptyCard from '@/components/ui/empty-card';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/asset-hierarchy/show-layout';\nimport { cn } from '@/lib/utils';\nimport { type BreadcrumbItem } from '@/types';\nimport { type Area, type Asset, type AssetType, type Plant, type Sector } from '@/types/asset-hierarchy';\nimport { Head, Link, router, usePage } from '@inertiajs/react';\nimport axios from 'axios';\nimport { Calendar, CalendarClock, Clock, FileText, MessageSquare, Search, Table } from 'lucide-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { toast } from 'sonner';\n\ninterface Shift {\n    id: number;\n    name: string;\n    plant?: {\n        id: number;\n        name: string;\n    };\n    schedules: Array<{\n        weekday: string;\n        shifts: Array<{\n            start_time: string;\n            end_time: string;\n            active: boolean;\n            breaks: Array<{\n                start_time: string;\n                end_time: string;\n            }>;\n        }>;\n    }>;\n}\n\ninterface Manufacturer {\n    id: number;\n    name: string;\n    website?: string;\n    email?: string;\n    phone?: string;\n    country?: string;\n    notes?: string;\n}\n\ninterface Props {\n    asset?: Asset & {\n        asset_type: AssetType;\n        manufacturer?: Manufacturer;\n        plant: Plant;\n        area?: Area & { plant: Plant };\n        sector?: Sector;\n        routines?: Array<any>;\n        shift_id?: number;\n        runtime_data?: {\n            current_hours: number;\n            last_measurement?: {\n                hours: number;\n                datetime: string;\n                user_name?: string;\n            };\n            user_timezone?: string;\n        };\n    };\n    plants: Plant[];\n    assetTypes: AssetType[];\n    manufacturers: Manufacturer[];\n    isCreating?: boolean;\n    newRoutineId?: number;\n}\n\nexport default function Show({ asset, plants, assetTypes, manufacturers, isCreating = false, newRoutineId }: Props) {\n    const { url } = usePage<any>();\n\n    // Extrai o parâmetro tab da URL\n    const urlParams = new URLSearchParams(url.split('?')[1] || '');\n    const tabFromUrl = urlParams.get('tab');\n\n    // Define breadcrumbs with dynamic asset tag\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Home',\n            href: '/home',\n        },\n        {\n            title: 'Ativos',\n            href: '/asset-hierarchy/assets',\n        },\n        {\n            title: asset?.tag || 'Novo Ativo',\n            href: '#',\n        },\n    ];\n\n    // Estado para gerenciar as rotinas\n    const [routines, setRoutines] = useState<Array<any>>(asset?.routines || []);\n\n    // Update routines when asset prop changes\n    useEffect(() => {\n        if (asset?.routines) {\n            setRoutines(asset.routines);\n        }\n    }, [asset?.routines]);\n\n    // Estado para controlar qual rotina está sendo editada\n    const [editingRoutineFormId, setEditingRoutineFormId] = useState<number | null>(null);\n\n    // Estado para controlar o modo comprimido\n    const [isCompressed, setIsCompressed] = useState(false);\n\n    // Estado para busca de rotinas\n    const [searchTerm, setSearchTerm] = useState('');\n\n    // Estado para rastrear a rotina recém-criada (apenas para ordenação)\n    const [newlyCreatedRoutineId, setNewlyCreatedRoutineId] = useState<number | null>(null);\n\n    // Estado para controlar o preenchimento da rotina\n    const [fillingRoutineId, setFillingRoutineId] = useState<number | null>(null);\n\n    // Estado para controlar o carregamento do formulário\n    const [loadingFormEditor, setLoadingFormEditor] = useState(false);\n\n    // Refs para os componentes RoutineList\n    const routineListRefs = useRef<{ [key: number]: { focusAddTasksButton: () => void } | null }>({});\n\n    // Estados para turnos\n    const [shifts, setShifts] = useState<Shift[]>([]);\n    const [selectedShiftId, setSelectedShiftId] = useState<string>(asset?.shift_id?.toString() || '');\n    const [selectedShift, setSelectedShift] = useState<Shift | null>(null);\n    const [loadingShifts, setLoadingShifts] = useState(false);\n    const [viewMode, setViewMode] = useState<'calendar' | 'table'>('calendar');\n    const [createShiftSheetOpen, setCreateShiftSheetOpen] = useState(false);\n\n    // Estado para modo de edição dos turnos\n    const [isEditingShift, setIsEditingShift] = useState(false);\n    const [tempSelectedShiftId, setTempSelectedShiftId] = useState<string>('');\n\n    // Referência para o CreateRoutineButton\n    const createRoutineButtonRef = useRef<HTMLButtonElement>(null);\n    const shiftSelectionRef = useRef<ShiftSelectionCardRef>(null);\n\n    // Filtrar rotinas baseado no termo de busca\n    const filteredRoutines = routines.filter(\n        (routine) =>\n            routine.name.toLowerCase().includes(searchTerm.toLowerCase()) || routine.description?.toLowerCase().includes(searchTerm.toLowerCase()),\n    );\n\n    // Ordenar rotinas para colocar a recém-criada no topo\n    const sortedRoutines = [...filteredRoutines].sort((a, b) => {\n        // Se uma das rotinas é a recém-criada, ela vai para o topo\n        if (a.id === newlyCreatedRoutineId) return -1;\n        if (b.id === newlyCreatedRoutineId) return 1;\n        // Caso contrário, manter a ordem original\n        return 0;\n    });\n\n    // Handlers para rotinas\n    const handleSaveRoutine = (routine: any) => {\n        if (routine.id && routines.find((r) => r.id === routine.id)) {\n            // Atualizar rotina existente\n            setRoutines(routines.map((r) => (r.id === routine.id ? routine : r)));\n            toast.success('Rotina atualizada com sucesso!');\n        } else {\n            // Para novas rotinas, apenas adicionar ao estado (a criação já foi feita pelo EditRoutineSheet)\n            setRoutines([...routines, routine]);\n            toast.success('Rotina criada com sucesso!');\n        }\n    };\n\n    const handleCreateSuccess = (routine: any) => {\n        // Add the new routine to the state\n        if (routine && routine.id) {\n            setRoutines([...routines, routine]);\n        }\n        // The backend will redirect to the routines tab with the new routine ID\n        // The redirect will trigger the useEffect to open the form editor\n    };\n\n    const handleDeleteRoutine = (routine: any) => {\n        // Remover a rotina da listagem\n        setRoutines(routines.filter((r) => r.id !== routine.id));\n    };\n\n    const handleNewRoutineClick = () => {\n        createRoutineButtonRef.current?.click();\n    };\n\n    const handleAssetCreated = () => {\n        // This will be called after successful asset creation\n        // The AssetFormComponent will handle the redirect\n    };\n\n    // Check for new routine from flash data\n    useEffect(() => {\n        if (newRoutineId && tabFromUrl === 'rotinas') {\n            // Check if the routine exists in the current state\n            const routineExists = routines.some((r) => r.id === newRoutineId);\n\n            if (!routineExists) {\n                // If the routine doesn't exist in state, it means we need to find it\n                // It should be in the asset's routines that were loaded from the backend\n                const newRoutine = asset?.routines?.find((r) => r.id === newRoutineId);\n\n                if (newRoutine) {\n                    // Add it to the state at the beginning of the array\n                    setRoutines([newRoutine, ...routines]);\n                }\n            }\n\n            // Set the newly created routine ID for sorting\n            setNewlyCreatedRoutineId(newRoutineId);\n\n            // Small delay to ensure the UI is ready and the RoutineList component is mounted\n            setTimeout(() => {\n                // Focus the \"Adicionar Tarefas\" button for the new routine\n                const routineListRef = routineListRefs.current[newRoutineId];\n                if (routineListRef) {\n                    routineListRef.focusAddTasksButton();\n                }\n            }, 500);\n        }\n    }, [newRoutineId, tabFromUrl, asset?.routines]);\n\n    // Carregar turnos disponíveis\n    useEffect(() => {\n        if (!isCreating && asset) {\n            loadShifts();\n        }\n    }, [asset, isCreating]);\n\n    // Carregar detalhes do turno selecionado\n    useEffect(() => {\n        const shiftIdToLoad = isEditingShift ? tempSelectedShiftId : selectedShiftId;\n        if (shiftIdToLoad && shifts.length > 0) {\n            const shift = shifts.find((s) => s.id.toString() === shiftIdToLoad);\n            if (shift) {\n                loadShiftDetails(shift.id);\n            }\n        } else if (!shiftIdToLoad) {\n            setSelectedShift(null);\n        }\n    }, [selectedShiftId, tempSelectedShiftId, isEditingShift, shifts]);\n\n    const loadShifts = async () => {\n        setLoadingShifts(true);\n        try {\n            const response = await axios.get(route('asset-hierarchy.shifts'), {\n                params: {\n                    format: 'json',\n                },\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest',\n                },\n            });\n\n            const shiftsData = response.data.shifts || [];\n            setShifts(shiftsData);\n\n            if (shiftsData.length === 0) {\n                toast.info('Nenhum turno cadastrado.');\n            }\n        } catch {\n            toast.error('Erro ao carregar turnos');\n        } finally {\n            setLoadingShifts(false);\n        }\n    };\n\n    const loadShiftDetails = async (shiftId: number) => {\n        try {\n            const response = await axios.get(route('asset-hierarchy.shifts.show', shiftId), {\n                params: { format: 'json' },\n            });\n            setSelectedShift(response.data.shift);\n        } catch {\n            // Error loading shift details\n        }\n    };\n\n    const handleShiftChange = async (shiftId: string) => {\n        if (isEditingShift) {\n            // Durante edição, apenas atualizar o estado temporário\n            setTempSelectedShiftId(shiftId);\n        } else {\n            // Modo antigo para compatibilidade (não deveria ser usado)\n            setSelectedShiftId(shiftId);\n        }\n    };\n\n    const handleEditShift = () => {\n        setIsEditingShift(true);\n        setTempSelectedShiftId(selectedShiftId);\n    };\n\n    const handleCancelShiftEdit = () => {\n        setIsEditingShift(false);\n        setTempSelectedShiftId('');\n    };\n\n    const handleSaveShift = async () => {\n        if (asset && tempSelectedShiftId !== selectedShiftId) {\n            try {\n                await axios.patch(route('asset-hierarchy.assets.update', asset.id), {\n                    shift_id: tempSelectedShiftId || null,\n                });\n                setSelectedShiftId(tempSelectedShiftId);\n                toast.success('Turno associado ao ativo');\n\n                // Reload the page to refresh runtime data\n                router.reload();\n            } catch {\n                toast.error('Erro ao associar turno');\n                return;\n            }\n        }\n        setIsEditingShift(false);\n        setTempSelectedShiftId('');\n    };\n\n    const handleShiftCreated = async (newShift: Shift) => {\n        // Add the new shift to the list\n        setShifts([...shifts, newShift]);\n\n        // Close the sheet\n        setCreateShiftSheetOpen(false);\n\n        if (isEditingShift) {\n            // Se estamos em modo de edição, apenas selecionar temporariamente\n            setTempSelectedShiftId(newShift.id.toString());\n        } else {\n            // Se não estamos editando, aplicar diretamente\n            const newShiftId = newShift.id.toString();\n            setSelectedShiftId(newShiftId);\n\n            // Save the shift association to the asset\n            if (asset) {\n                try {\n                    await axios.patch(\n                        route('asset-hierarchy.assets.update', asset.id),\n                        {\n                            shift_id: newShiftId,\n                        },\n                        {\n                            headers: {\n                                'Content-Type': 'application/json',\n                                Accept: 'application/json',\n                            },\n                        },\n                    );\n                    toast.success('Turno criado e associado ao ativo');\n                } catch {\n                    toast.error('Erro ao associar turno ao ativo');\n                }\n            }\n        }\n    };\n\n    const handleShiftUpdated = (updatedShift: Shift) => {\n        // Update the shift in the list\n        setShifts(shifts.map((shift) => (shift.id === updatedShift.id ? updatedShift : shift)));\n\n        // Update the selected shift details if it's the currently selected one\n        if (selectedShift && selectedShift.id === updatedShift.id) {\n            setSelectedShift(updatedShift);\n        }\n\n        // If we're in edit mode and this is the temp selected shift, update it\n        if (isEditingShift && tempSelectedShiftId === updatedShift.id.toString()) {\n            // Exit edit mode\n            setIsEditingShift(false);\n            setTempSelectedShiftId('');\n\n            // Reload the page to refresh runtime data (automatic runtime report)\n            router.reload();\n        }\n    };\n\n    const handleCreateShiftClick = () => {\n        setCreateShiftSheetOpen(true);\n    };\n\n    const handleAddShiftClick = () => {\n        // Trigger the same action as \"Adicionar Turno\" button in ShiftSelectionCard\n        shiftSelectionRef.current?.triggerEditWithFocus();\n    };\n\n    const handleEditRoutineForm = async (routineId: number) => {\n        // First, fetch the complete routine data with form\n        setLoadingFormEditor(true);\n        try {\n            const url = route('maintenance.routines.form-data', routineId);\n\n            const response = await axios.get(url);\n            const routineWithForm = response.data.routine;\n\n            // Update the routine in the state with the fetched data\n            setRoutines(routines.map((r) => (r.id === routineId ? { ...r, ...routineWithForm } : r)));\n\n            // Then set the editing state\n            setEditingRoutineFormId(routineId);\n            // Ativar modo comprimido ao editar formulário\n            setIsCompressed(true);\n        } catch (error: any) {\n            // More specific error message\n            if (error.response?.status === 404) {\n                toast.error('Rotina não encontrada');\n            } else if (error.response?.status === 500) {\n                toast.error('Erro no servidor ao carregar formulário');\n            } else {\n                toast.error('Erro ao carregar dados do formulário');\n            }\n        } finally {\n            setLoadingFormEditor(false);\n        }\n    };\n\n    const handleFillRoutineForm = (routineId: number) => {\n        setFillingRoutineId(routineId);\n        setIsCompressed(true);\n    };\n\n    const handleCloseFormEditor = () => {\n        setEditingRoutineFormId(null);\n        // Desativar modo comprimido ao fechar editor\n        setIsCompressed(false);\n    };\n\n    const handleCloseFormFiller = () => {\n        setFillingRoutineId(null);\n        setIsCompressed(false);\n    };\n\n    const handleFormSaved = (formData: any) => {\n        // Atualizar a rotina com o novo formulário\n        setRoutines(\n            routines.map((r) => {\n                if (r.id === editingRoutineFormId) {\n                    return { ...r, form: formData };\n                }\n                return r;\n            }),\n        );\n        setEditingRoutineFormId(null);\n        toast.success('Formulário da rotina atualizado com sucesso!');\n        // Desativar modo comprimido ao fechar editor\n        setIsCompressed(false);\n    };\n\n    const tabs = [\n        {\n            id: 'informacoes',\n            label: 'Informações Gerais',\n            content: (\n                <div className=\"py-8\">\n                    <AssetFormComponent\n                        asset={asset}\n                        plants={plants}\n                        assetTypes={assetTypes}\n                        manufacturers={manufacturers}\n                        initialMode={isCreating ? 'edit' : 'view'}\n                        onSuccess={isCreating ? handleAssetCreated : undefined}\n                    />\n                </div>\n            ),\n        },\n        ...(isCreating\n            ? []\n            : [\n                  {\n                      id: 'shifts-runtime',\n                      label: 'Turnos & Horas',\n                      content: (\n                          <div className=\"space-y-6 py-6\">\n                              <div className=\"grid grid-cols-1 items-stretch gap-6 lg:grid-cols-2\">\n                                  {/* First Column - Runtime Input */}\n                                  <div className=\"h-full\">\n                                      <AssetRuntimeInput\n                                          assetId={asset?.id}\n                                          runtimeData={asset?.runtime_data}\n                                          onRuntimeUpdated={() => {\n                                              // Handle runtime update if needed\n                                          }}\n                                      />\n                                  </div>\n\n                                  {/* Second Column - Shift Configuration */}\n                                  <div className=\"h-full\">\n                                      <ShiftSelectionCard\n                                          ref={shiftSelectionRef}\n                                          shifts={shifts}\n                                          selectedShiftId={selectedShiftId}\n                                          tempSelectedShiftId={tempSelectedShiftId}\n                                          isEditingShift={isEditingShift}\n                                          loadingShifts={loadingShifts}\n                                          onEditShift={handleEditShift}\n                                          onCancelShiftEdit={handleCancelShiftEdit}\n                                          onSaveShift={handleSaveShift}\n                                          onShiftChange={handleShiftChange}\n                                          onCreateClick={handleCreateShiftClick}\n                                          onShiftUpdated={handleShiftUpdated}\n                                      />\n                                  </div>\n                              </div>\n\n                              {selectedShift ? (\n                                  <div className=\"space-y-4\">\n                                      <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'calendar' | 'table')}>\n                                          <TabsList className=\"flex w-[200px]\">\n                                              <TabsTrigger value=\"calendar\" className=\"flex flex-1 items-center gap-2\">\n                                                  <Calendar className=\"h-4 w-4\" />\n                                                  Calendário\n                                              </TabsTrigger>\n                                              <TabsTrigger value=\"table\" className=\"flex flex-1 items-center gap-2\">\n                                                  <Table className=\"h-4 w-4\" />\n                                                  Tabela\n                                              </TabsTrigger>\n                                          </TabsList>\n\n                                          <TabsContent value=\"calendar\" className=\"mt-4\">\n                                              <ShiftCalendarView schedules={selectedShift.schedules} showAllDays={true} />\n                                          </TabsContent>\n                                          <TabsContent value=\"table\" className=\"mt-4\">\n                                              <ShiftTableView schedules={selectedShift.schedules} />\n                                          </TabsContent>\n                                      </Tabs>\n                                  </div>\n                              ) : (\n                                  <EmptyCard\n                                      icon={Clock}\n                                      title=\"Nenhum turno selecionado\"\n                                      description=\"Selecione ou configure um turno de operação para visualizar os horários de trabalho do ativo.\"\n                                      primaryButtonText=\"Adicionar Turno\"\n                                      primaryButtonAction={handleAddShiftClick}\n                                  />\n                              )}\n\n                              {/* CreateShiftSheet oculto para ser acionado programaticamente */}\n                              <CreateShiftSheet\n                                  isOpen={createShiftSheetOpen}\n                                  onOpenChange={setCreateShiftSheetOpen}\n                                  showTrigger={false}\n                                  onSuccess={handleShiftCreated}\n                              />\n                          </div>\n                      ),\n                  },\n                  {\n                      id: 'rotinas',\n                      label: 'Rotinas',\n                      content: (\n                          <div className=\"min-h-full space-y-4\">\n                              {loadingFormEditor ? (\n                                  // Show loading state while fetching form data\n                                  <div className=\"flex min-h-[400px] items-center justify-center\">\n                                      <div className=\"text-center\">\n                                          <div className=\"border-primary mx-auto mb-4 h-12 w-12 animate-spin rounded-full border-b-2\"></div>\n                                          <p className=\"text-muted-foreground\">Carregando formulário...</p>\n                                      </div>\n                                  </div>\n                              ) : editingRoutineFormId ? (\n                                  // Mostrar o editor de formulário inline\n                                  (() => {\n                                      const routine = routines.find((r) => r.id === editingRoutineFormId);\n                                      if (!routine) return null;\n\n                                      return (\n                                          <InlineRoutineFormEditor\n                                              routine={routine}\n                                              assetId={asset!.id}\n                                              onClose={handleCloseFormEditor}\n                                              onSuccess={handleFormSaved}\n                                          />\n                                      );\n                                  })()\n                              ) : fillingRoutineId ? (\n                                  // Mostrar o preenchedor de formulário inline\n                                  (() => {\n                                      const routine = routines.find((r) => r.id === fillingRoutineId);\n                                      if (!routine) return null;\n\n                                      return (\n                                          <InlineRoutineForm\n                                              routine={routine}\n                                              assetId={asset!.id}\n                                              onClose={handleCloseFormFiller}\n                                              onComplete={handleCloseFormFiller}\n                                          />\n                                      );\n                                  })()\n                              ) : routines.length === 0 ? (\n                                  <div className=\"flex min-h-[400px] items-center justify-center py-4\">\n                                      <div className=\"w-full\">\n                                          <EmptyCard\n                                              icon={CalendarClock}\n                                              title=\"Nenhuma rotina\"\n                                              description=\"Crie rotinas de manutenção e inspeção para este ativo\"\n                                              primaryButtonText=\"Nova rotina\"\n                                              primaryButtonAction={handleNewRoutineClick}\n                                              secondaryButtonText=\"Ver cronograma\"\n                                              secondaryButtonAction={() => {\n                                                  // Navegar para cronograma ou implementar funcionalidade futura\n                                              }}\n                                          />\n                                      </div>\n                                  </div>\n                              ) : (\n                                  <>\n                                      {/* Lista de rotinas existentes */}\n\n                                      <div className=\"bg-background-muted\">\n                                          <div\n                                              className={cn(\n                                                  'transition-all duration-200 ease-in-out',\n                                                  isCompressed ? 'mt-4 mb-4 px-4' : 'mt-4 mb-4 px-4',\n                                              )}\n                                          >\n                                              <div className=\"relative\">\n                                                  <Search\n                                                      className={cn(\n                                                          'text-muted-foreground absolute top-1/2 left-3 -translate-y-1/2',\n                                                          isCompressed ? 'h-4 w-4' : 'h-5 w-5',\n                                                      )}\n                                                  />\n                                                  <Input\n                                                      type=\"text\"\n                                                      placeholder=\"Buscar rotinas...\"\n                                                      value={searchTerm}\n                                                      onChange={(e) => setSearchTerm(e.target.value)}\n                                                      className={cn('bg-background max-w-sm', isCompressed ? 'h-8 pl-9' : 'pl-10')}\n                                                  />\n                                              </div>\n                                          </div>\n\n                                          <div className={cn('transition-all duration-200 ease-in-out', isCompressed ? 'px-2' : 'px-4')}>\n                                              <ul role=\"list\" className=\"divide-y divide-gray-100 border-t border-b border-gray-100\">\n                                                  {sortedRoutines.map((routine) => (\n                                                      <li key={routine.id}>\n                                                          <RoutineList\n                                                              routine={routine}\n                                                              onSave={handleSaveRoutine}\n                                                              onDelete={handleDeleteRoutine}\n                                                              assetId={asset?.id}\n                                                              onEditForm={() => handleEditRoutineForm(routine.id)}\n                                                              onFillForm={() => handleFillRoutineForm(routine.id)}\n                                                              isCompressed={isCompressed}\n                                                              shift={selectedShift}\n                                                              ref={(el) => {\n                                                                  if (routine.id) {\n                                                                      routineListRefs.current[routine.id] = el;\n                                                                  }\n                                                              }}\n                                                          />\n                                                      </li>\n                                                  ))}\n                                              </ul>\n\n                                              {sortedRoutines.length === 0 && searchTerm && (\n                                                  <div className={cn('text-muted-foreground text-center', isCompressed ? 'py-4 text-sm' : 'py-8')}>\n                                                      Nenhuma rotina encontrada para \"{searchTerm}\"\n                                                  </div>\n                                              )}\n                                          </div>\n\n                                          {/* Botão para adicionar nova rotina quando já existem rotinas */}\n                                          <div\n                                              className={cn(\n                                                  'flex justify-center transition-all duration-200 ease-in-out',\n                                                  isCompressed ? 'py-2' : 'py-4',\n                                              )}\n                                          >\n                                              <CreateRoutineButton\n                                                  onSuccess={handleCreateSuccess}\n                                                  text=\"Adicionar Nova Rotina\"\n                                                  variant=\"outline\"\n                                                  assetId={asset?.id}\n                                              />\n                                          </div>\n                                      </div>\n                                  </>\n                              )}\n\n                              {/* CreateRoutineButton oculto para ser acionado programaticamente */}\n                              <div style={{ display: 'none' }}>\n                                  <CreateRoutineButton\n                                      ref={createRoutineButtonRef}\n                                      onSuccess={handleCreateSuccess}\n                                      text=\"Nova Rotina\"\n                                      assetId={asset?.id}\n                                  />\n                              </div>\n                          </div>\n                      ),\n                  },\n                  {\n                      id: 'chamados',\n                      label: 'Chamados de Usuário',\n                      content: (\n                          <div className=\"flex min-h-[400px] items-center justify-center py-4\">\n                              <div className=\"w-full\">\n                                  <EmptyCard\n                                      icon={MessageSquare}\n                                      title=\"Nenhum chamado registrado\"\n                                      description=\"Registre chamados para este ativo\"\n                                      primaryButtonText=\"Novo chamado\"\n                                      primaryButtonAction={() => {}}\n                                      secondaryButtonText=\"Ver histórico\"\n                                      secondaryButtonAction={() => {}}\n                                  />\n                              </div>\n                          </div>\n                      ),\n                  },\n                  {\n                      id: 'ordem-serviço',\n                      label: 'Ordens de Manutenção',\n                      content: (\n                          <div className=\"flex min-h-[400px] items-center justify-center py-4\">\n                              <div className=\"w-full\">\n                                  <EmptyCard\n                                      icon={FileText}\n                                      title=\"Nenhuma ordem de serviço\"\n                                      description=\"Registre ordens de serviço para este ativo\"\n                                      primaryButtonText=\"Nova ordem de serviço\"\n                                      primaryButtonAction={() => {}}\n                                      secondaryButtonText=\"Ver histórico\"\n                                      secondaryButtonAction={() => {}}\n                                  />\n                              </div>\n                          </div>\n                      ),\n                  },\n                  {\n                      id: 'arquivos',\n                      label: 'Arquivos',\n                      content: (\n                          <div className=\"flex min-h-[400px] items-center justify-center py-4\">\n                              <div className=\"w-full\">\n                                  <EmptyCard\n                                      icon={FileText}\n                                      title=\"Nenhum arquivo\"\n                                      description=\"Registre arquivos para este ativo\"\n                                      primaryButtonText=\"Novo arquivo\"\n                                      primaryButtonAction={() => {}}\n                                      secondaryButtonText=\"Ver histórico\"\n                                      secondaryButtonAction={() => {}}\n                                  />\n                              </div>\n                          </div>\n                      ),\n                  },\n                  {\n                      id: 'historico',\n                      label: 'Histórico',\n                      content: (\n                          <div className=\"flex min-h-[400px] items-center justify-center py-4\">\n                              <div className=\"w-full\">\n                                  <EmptyCard\n                                      icon={MessageSquare}\n                                      title=\"Nenhum histórico registrado\"\n                                      description=\"Quando houver algum histórico para este ativo, ele será exibido aqui.\"\n                                      primaryButtonText=\"Ver detalhes\"\n                                      primaryButtonAction={() => {\n                                          // Implementar ação para ver detalhes do histórico ou navegar\n                                      }}\n                                  />\n                              </div>\n                          </div>\n                      ),\n                  },\n              ]),\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={isCreating ? 'Novo Ativo' : `Ativo ${asset?.tag}`} />\n\n            <ShowLayout\n                title={isCreating ? 'Novo Ativo' : asset?.tag || 'Ativo'}\n                subtitle={\n                    isCreating ? (\n                        'Criação de novo ativo'\n                    ) : (\n                        <span className=\"flex flex-wrap items-center gap-x-3 gap-y-1\">\n                            {asset?.asset_type && (\n                                <Link href={route('asset-hierarchy.tipos-ativo.show', asset.asset_type.id)} className=\"hover:underline\">\n                                    {asset.asset_type.name}\n                                </Link>\n                            )}\n                            {asset?.serial_number && (\n                                <>\n                                    {asset?.asset_type && <span className=\"text-muted-foreground\">•</span>}\n                                    <span className=\"text-muted-foreground\">S/N: {asset.serial_number}</span>\n                                </>\n                            )}\n                            {asset?.part_number && (\n                                <>\n                                    {(asset?.asset_type || asset?.serial_number) && <span className=\"text-muted-foreground\">•</span>}\n                                    <span className=\"text-muted-foreground\">P/N: {asset.part_number}</span>\n                                </>\n                            )}\n                            {!asset?.asset_type && !asset?.serial_number && !asset?.part_number && (\n                                <span className=\"text-muted-foreground\">Sem informações adicionais</span>\n                            )}\n                        </span>\n                    )\n                }\n                editRoute={isCreating ? '' : asset ? route('asset-hierarchy.assets.edit', asset.id) : ''}\n                tabs={tabs}\n                defaultActiveTab={tabFromUrl || undefined}\n                defaultCompressed={isCompressed}\n                onCompressedChange={setIsCompressed}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/manufacturers.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1086,
                                1089
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1086,
                                1089
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateManufacturerSheet from '@/components/CreateManufacturerSheet';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Manufacturer } from '@/types/entities/manufacturer';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Fabricantes',\n        href: '/asset-hierarchy/manufacturers',\n    },\n];\n\ninterface Props {\n    manufacturers: {\n        data: Manufacturer[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\nexport default function Manufacturers({ manufacturers: initialManufacturers, filters }: Props) {\n    const entityOps = useEntityOperations<Manufacturer>({\n        entityName: 'manufacturer',\n        entityLabel: 'Fabricante',\n        routes: {\n            index: 'asset-hierarchy.manufacturers',\n            show: 'asset-hierarchy.manufacturers.show',\n            destroy: 'asset-hierarchy.manufacturers.destroy',\n            checkDependencies: 'asset-hierarchy.manufacturers.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.manufacturers',\n        initialSort: filters.sort || 'name',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('manufacturersColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            name: true,\n            country: true,\n            contact: true,\n            asset_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialManufacturers.data;\n    const pagination = {\n        current_page: initialManufacturers.current_page,\n        last_page: initialManufacturers.last_page,\n        per_page: initialManufacturers.per_page,\n        total: initialManufacturers.total,\n        from: initialManufacturers.from,\n        to: initialManufacturers.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.name,\n        },\n        {\n            key: 'country',\n            label: 'País',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value, row) => row.country || '-',\n        },\n        {\n            key: 'contact',\n            label: 'Contato',\n            sortable: false,\n            width: 'w-[300px]',\n            render: (value, row) => {\n                const contacts = [];\n                if (row.email) contacts.push(row.email);\n                if (row.phone) contacts.push(row.phone);\n                return contacts.length > 0 ? contacts.join(' | ') : '-';\n            },\n        },\n        {\n            key: 'asset_count',\n            label: 'Ativos',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value) => {\n                const count = value || 0;\n                return count > 0 ? `${count} ativo(s)` : 'Nenhum ativo';\n            },\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('manufacturersColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.manufacturers'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(\n            route('asset-hierarchy.manufacturers'),\n            { ...filters, search, sort, direction, page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.manufacturers'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Fabricantes\" />\n\n            <ListLayout\n                title=\"Fabricantes\"\n                description=\"Gerencie os fabricantes de ativos\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                onCreateClick={() => entityOps.setEditSheetOpen(true)}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(manufacturer) => router.visit(route('asset-hierarchy.manufacturers.show', { id: manufacturer.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        sortColumn={sort}\n                        sortDirection={direction}\n                        actions={(manufacturer) => (\n                            <EntityActionDropdown\n                                onEdit={() => entityOps.handleEdit(manufacturer)}\n                                onDelete={() => entityOps.handleDelete(manufacturer)}\n                            />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <CreateManufacturerSheet\n                manufacturer={entityOps.editingItem || undefined}\n                open={entityOps.isEditSheetOpen}\n                onOpenChange={entityOps.setEditSheetOpen}\n                mode={entityOps.editingItem ? 'edit' : 'create'}\n            />\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityName=\"fabricante\"\n                entityLabel={entityOps.deletingItem?.name || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"fabricante\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/manufacturers/show.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/plantas.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1058,
                                1061
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1058,
                                1061
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreatePlantSheet from '@/components/CreatePlantSheet';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Plant } from '@/types/entities/plant';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Plantas',\n        href: '/asset-hierarchy/plantas',\n    },\n];\n\ninterface Props {\n    plants: {\n        data: Plant[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\nexport default function Plantas({ plants: initialPlants, filters }: Props) {\n    const entityOps = useEntityOperations<Plant>({\n        entityName: 'plant',\n        entityLabel: 'Planta',\n        routes: {\n            index: 'asset-hierarchy.plantas',\n            show: 'asset-hierarchy.plantas.show',\n            destroy: 'asset-hierarchy.plantas.destroy',\n            checkDependencies: 'asset-hierarchy.plantas.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.plantas',\n        initialSort: filters.sort || 'name',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('plantsColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            name: true,\n            areas_count: true,\n            sectors_count: true,\n            asset_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialPlants.data;\n    const pagination = {\n        current_page: initialPlants.current_page,\n        last_page: initialPlants.last_page,\n        per_page: initialPlants.per_page,\n        total: initialPlants.total,\n        from: initialPlants.from,\n        to: initialPlants.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.name}</div>\n                    {row.description && <div className=\"text-muted-foreground text-sm\">{row.description}</div>}\n                </div>\n            ),\n        },\n        {\n            key: 'areas_count',\n            label: 'Áreas',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n        {\n            key: 'sectors_count',\n            label: 'Setores',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n        {\n            key: 'asset_count',\n            label: 'Ativos',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('plantsColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.plantas'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(route('asset-hierarchy.plantas'), { ...filters, search, sort, direction, page }, { preserveState: true, preserveScroll: true });\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.plantas'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Plantas\" />\n\n            <ListLayout\n                title=\"Plantas\"\n                description=\"Gerencie as plantas do sistema\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                onCreateClick={() => entityOps.setEditSheetOpen(true)}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(plant) => router.visit(route('asset-hierarchy.plantas.show', { id: plant.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        actions={(plant) => (\n                            <EntityActionDropdown onEdit={() => entityOps.handleEdit(plant)} onDelete={() => entityOps.handleDelete(plant)} />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <CreatePlantSheet\n                plant={entityOps.editingItem || undefined}\n                open={entityOps.isEditSheetOpen}\n                onOpenChange={entityOps.setEditSheetOpen}\n                mode=\"edit\"\n            />\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityLabel={entityOps.deletingItem?.name || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"planta\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/plantas/show.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/setores.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 20,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 20,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1116,
                                1119
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1116,
                                1119
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateSectorSheet from '@/components/CreateSectorSheet';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { type Plant } from '@/types/asset-hierarchy';\nimport { Sector } from '@/types/entities/sector';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Setores',\n        href: '/asset-hierarchy/setores',\n    },\n];\n\ninterface Props {\n    sectors: {\n        data: Sector[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n    plants: Plant[];\n}\n\nexport default function SectorIndex({ sectors: initialSectors, filters, plants }: Props) {\n    const entityOps = useEntityOperations<Sector>({\n        entityName: 'sector',\n        entityLabel: 'Setor',\n        routes: {\n            index: 'asset-hierarchy.setores',\n            show: 'asset-hierarchy.setores.show',\n            destroy: 'asset-hierarchy.setores.destroy',\n            checkDependencies: 'asset-hierarchy.setores.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.setores',\n        initialSort: filters.sort || 'name',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('sectorsColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            name: true,\n            plant: true,\n            area: true,\n            asset_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialSectors.data;\n    const pagination = {\n        current_page: initialSectors.current_page,\n        last_page: initialSectors.last_page,\n        per_page: initialSectors.per_page,\n        total: initialSectors.total,\n        from: initialSectors.from,\n        to: initialSectors.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.name}</div>\n                    {row.description && <div className=\"text-muted-foreground text-sm\">{row.description}</div>}\n                </div>\n            ),\n        },\n        {\n            key: 'plant',\n            label: 'Planta',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.area?.plant?.name || '-',\n        },\n        {\n            key: 'area',\n            label: 'Área',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => row.area?.name || '-',\n        },\n        {\n            key: 'asset_count',\n            label: 'Ativos',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('sectorsColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.setores'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(route('asset-hierarchy.setores'), { ...filters, search, sort, direction, page }, { preserveState: true, preserveScroll: true });\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.setores'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Setores\" />\n\n            <ListLayout\n                title=\"Setores\"\n                description=\"Gerencie os setores do sistema\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                onCreateClick={() => entityOps.setEditSheetOpen(true)}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(sector) => router.visit(route('asset-hierarchy.setores.show', { id: sector.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        actions={(sector) => (\n                            <EntityActionDropdown onEdit={() => entityOps.handleEdit(sector)} onDelete={() => entityOps.handleDelete(sector)} />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <CreateSectorSheet\n                sector={entityOps.editingItem || undefined}\n                open={entityOps.isEditSheetOpen}\n                onOpenChange={entityOps.setEditSheetOpen}\n                mode={entityOps.editingItem ? 'edit' : 'create'}\n                plants={plants}\n            />\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityLabel={entityOps.deletingItem?.name || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"setor\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/setores/create.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/setores/edit.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/setores/show.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 27,
                "column": 14,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 27,
                "endColumn": 17,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1043,
                                1046
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1043,
                                1046
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 112,
                "column": 60,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 112,
                "endColumn": 63,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3583,
                                3586
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3583,
                                3586
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { type BreadcrumbItem } from '@/types';\nimport { type Asset } from '@/types/asset-hierarchy';\nimport { router } from '@inertiajs/react';\nimport { ArrowDown, ArrowUp, ArrowUpDown, Cog, Factory, Map } from 'lucide-react';\n\nimport SectorFormComponent from '@/components/SectorFormComponent';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/asset-hierarchy/show-layout';\n\ninterface Props {\n    sector: {\n        id: number;\n        name: string;\n        area: {\n            id: number;\n            name: string;\n            plant: {\n                id: number;\n                name: string;\n            };\n        };\n        area_id?: number;\n    };\n    plants?: any[];\n    asset: {\n        data: Asset[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n    };\n    activeTab: string;\n    filters: {\n        asset: {\n            sort: string;\n            direction: string;\n        };\n    };\n}\n\nexport default function Show({ sector, plants, asset, activeTab, filters }: Props) {\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Home',\n            href: '/home',\n        },\n        {\n            title: 'Hierarquia de Ativos',\n            href: '/asset-hierarchy',\n        },\n        {\n            title: 'Setores',\n            href: '/asset-hierarchy/setores',\n        },\n        {\n            title: sector.name,\n            href: '#',\n        },\n    ];\n\n    const handleSort = (column: string) => {\n        const direction = filters.asset.sort === column && filters.asset.direction === 'asc' ? 'desc' : 'asc';\n\n        router.get(\n            route('asset-hierarchy.setores.show', {\n                setor: sector.id,\n                tab: activeTab,\n                asset_sort: column,\n                asset_direction: direction,\n                asset_page: 1,\n            }),\n            {},\n            { preserveState: true },\n        );\n    };\n\n    const getSortIcon = (column: string) => {\n        if (filters.asset.sort !== column) {\n            return <ArrowUpDown className=\"h-4 w-4\" />;\n        }\n        return filters.asset.direction === 'asc' ? <ArrowUp className=\"h-4 w-4\" /> : <ArrowDown className=\"h-4 w-4\" />;\n    };\n\n    const subtitle = (\n        <span className=\"text-muted-foreground flex items-center gap-4 text-sm\">\n            <span className=\"flex items-center gap-1\">\n                <Factory className=\"h-4 w-4\" />\n                <span>{sector.area.plant.name}</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Map className=\"h-4 w-4\" />\n                <span>{sector.area.name}</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Cog className=\"h-4 w-4\" />\n                <span>{asset.total} ativos</span>\n            </span>\n        </span>\n    );\n\n    const tabs = [\n        {\n            id: 'informacoes',\n            label: 'Informações Gerais',\n            content: (\n                <div className=\"py-8\">\n                    <SectorFormComponent sector={sector as any} plants={plants || []} initialMode=\"view\" onSuccess={() => router.reload()} />\n                </div>\n            ),\n        },\n        {\n            id: 'ativos',\n            label: 'Ativos',\n            content: (\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Ativos</CardTitle>\n                        <CardDescription>Lista de ativos vinculados a este setor</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        {asset.data.length > 0 ? (\n                            <div className=\"rounded-md\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead className=\"h-12 cursor-pointer\" onClick={() => handleSort('tag')}>\n                                                <div className=\"flex items-center gap-1\">\n                                                    TAG\n                                                    {getSortIcon('tag')}\n                                                </div>\n                                            </TableHead>\n                                            <TableHead className=\"h-12 cursor-pointer\" onClick={() => handleSort('type')}>\n                                                <div className=\"flex items-center gap-1\">\n                                                    Tipo\n                                                    {getSortIcon('type')}\n                                                </div>\n                                            </TableHead>\n                                            <TableHead className=\"h-12 cursor-pointer\" onClick={() => handleSort('manufacturer')}>\n                                                <div className=\"flex items-center gap-1\">\n                                                    Fabricante\n                                                    {getSortIcon('manufacturer')}\n                                                </div>\n                                            </TableHead>\n                                            <TableHead className=\"h-12 cursor-pointer\" onClick={() => handleSort('year')}>\n                                                <div className=\"flex items-center gap-1\">\n                                                    Ano\n                                                    {getSortIcon('year')}\n                                                </div>\n                                            </TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {asset.data.map((asset) => (\n                                            <TableRow\n                                                key={asset.id}\n                                                className=\"hover:bg-muted/50 h-12 cursor-pointer\"\n                                                onClick={() => router.get(route('asset-hierarchy.assets.show', asset.id))}\n                                            >\n                                                <TableCell>\n                                                    <div className=\"font-medium\">{asset.tag}</div>\n                                                </TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.asset_type?.name ?? '-'}</TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.manufacturer?.name ?? '-'}</TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.manufacturing_year ?? '-'}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                        ) : (\n                            <div className=\"text-muted-foreground py-6 text-center text-sm\">Nenhum ativo cadastrado neste setor.</div>\n                        )}\n                        <div className=\"mt-4 flex justify-center\">\n                            <Pagination>\n                                <PaginationContent>\n                                    <PaginationItem>\n                                        <PaginationPrevious\n                                            href={route('asset-hierarchy.setores.show', {\n                                                setor: sector.id,\n                                                asset_page: asset.current_page - 1,\n                                                tab: 'ativos',\n                                                asset_sort: filters.asset.sort,\n                                                asset_direction: filters.asset.direction,\n                                            })}\n                                            className={asset.current_page === 1 ? 'pointer-events-none opacity-50' : ''}\n                                        />\n                                    </PaginationItem>\n\n                                    {Array.from({ length: asset.last_page }, (_, i) => i + 1).map((page) => (\n                                        <PaginationItem key={`asset-pagination-${page}`}>\n                                            <PaginationLink\n                                                href={route('asset-hierarchy.setores.show', {\n                                                    setor: sector.id,\n                                                    asset_page: page,\n                                                    tab: 'ativos',\n                                                    asset_sort: filters.asset.sort,\n                                                    asset_direction: filters.asset.direction,\n                                                })}\n                                                isActive={page === asset.current_page}\n                                            >\n                                                {page}\n                                            </PaginationLink>\n                                        </PaginationItem>\n                                    ))}\n\n                                    <PaginationItem>\n                                        <PaginationNext\n                                            href={route('asset-hierarchy.setores.show', {\n                                                setor: sector.id,\n                                                asset_page: asset.current_page + 1,\n                                                tab: 'ativos',\n                                                asset_sort: filters.asset.sort,\n                                                asset_direction: filters.asset.direction,\n                                            })}\n                                            className={asset.current_page === asset.last_page ? 'pointer-events-none opacity-50' : ''}\n                                        />\n                                    </PaginationItem>\n                                </PaginationContent>\n                            </Pagination>\n                        </div>\n                    </CardContent>\n                </Card>\n            ),\n        },\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <ShowLayout title={sector.name} subtitle={subtitle} editRoute={route('asset-hierarchy.setores.edit', sector.id)} tabs={tabs} />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/shifts.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 65,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 65,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2182,
                                2185
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2182,
                                2185
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has missing dependencies: 'assetCount' and 'loadAssets'. Either include them or remove the dependency array.",
                "line": 113,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 113,
                "endColumn": 17,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [assetCount, loadAssets, shiftId]",
                        "fix": {
                            "range": [
                                3232,
                                3241
                            ],
                            "text": "[assetCount, loadAssets, shiftId]"
                        }
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 284,
                "column": 44,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 284,
                "endColumn": 47,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9980,
                                9983
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9980,
                                9983
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 287,
                "column": 50,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 287,
                "endColumn": 53,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                10138,
                                10141
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                10138,
                                10141
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 292,
                "column": 51,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 292,
                "endColumn": 54,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                10409,
                                10412
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                10409,
                                10412
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 4,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ShiftCalendarView from '@/components/ShiftCalendarView';\nimport ShiftTableView from '@/components/ShiftTableView';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogTitle } from '@/components/ui/dialog';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { PaginationWrapper } from '@/components/ui/pagination-wrapper';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Head, Link, router, usePage } from '@inertiajs/react';\nimport axios from 'axios';\nimport { AlertTriangle, ArrowUpDown, Calendar, ChevronDownIcon, ChevronUpIcon, Clock, List, MoreVertical, Plus, Settings } from 'lucide-react';\nimport { useEffect, useState } from 'react';\nimport { toast } from 'sonner';\n\ninterface Break {\n    start_time: string;\n    end_time: string;\n}\n\ninterface Shift {\n    start_time: string;\n    end_time: string;\n    active: boolean;\n    breaks: Break[];\n}\n\ninterface Schedule {\n    weekday: string;\n    shifts: Shift[];\n}\n\ninterface ShiftData {\n    id: number;\n    name: string;\n    plant_count?: number;\n    area_count?: number;\n    sector_count?: number;\n    asset_count?: number;\n    schedules: Schedule[];\n    total_work_hours?: number;\n    total_work_minutes?: number;\n    total_break_hours?: number;\n    total_break_minutes?: number;\n}\n\ninterface AssetData {\n    id: number;\n    tag: string;\n    description: string;\n    asset_type: string | null;\n    plant: string | null;\n    area: string | null;\n    sector: string | null;\n    current_runtime_hours: number;\n}\n\ninterface PageProps {\n    [key: string]: any;\n    flash?: {\n        success?: string;\n    };\n}\n\ninterface Props {\n    shifts:\n        | ShiftData[]\n        | {\n              data: ShiftData[];\n              current_page: number;\n              last_page: number;\n              per_page: number;\n              total: number;\n          };\n    filters?: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Turnos',\n        href: '/asset-hierarchy/shifts',\n    },\n];\n\n// Component to display assets list in the expanded view\nconst AssetsList = ({ shiftId, assetCount }: { shiftId: number; assetCount: number }) => {\n    const [assets, setAssets] = useState<AssetData[]>([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (assetCount > 0) {\n            loadAssets();\n        }\n    }, [shiftId]);\n\n    const loadAssets = async () => {\n        setLoading(true);\n        try {\n            const response = await axios.get(route('asset-hierarchy.shifts.assets', shiftId));\n            setAssets(response.data.assets || []);\n        } catch (error) {\n            console.error('Error loading assets:', error);\n            toast.error('Erro ao carregar ativos');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className=\"p-4\">\n            <h4 className=\"mb-4 font-medium\">Ativos Associados</h4>\n            {loading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"text-muted-foreground\">Carregando ativos...</div>\n                </div>\n            ) : assetCount === 0 ? (\n                <p className=\"text-muted-foreground\">Nenhum ativo associado a este turno.</p>\n            ) : (\n                <div className=\"rounded-md border\">\n                    <Table>\n                        <TableHeader>\n                            <TableRow>\n                                <TableHead>Tag</TableHead>\n                                <TableHead>Descrição</TableHead>\n                                <TableHead>Tipo</TableHead>\n                                <TableHead>Localização</TableHead>\n                                <TableHead className=\"text-right\">Horímetro</TableHead>\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                            {assets.map((asset) => (\n                                <TableRow key={asset.id}>\n                                    <TableCell className=\"font-medium\">\n                                        <Link href={route('asset-hierarchy.assets.show', asset.id)} className=\"text-primary hover:underline\">\n                                            {asset.tag}\n                                        </Link>\n                                    </TableCell>\n                                    <TableCell>{asset.description || '-'}</TableCell>\n                                    <TableCell>{asset.asset_type || '-'}</TableCell>\n                                    <TableCell>{[asset.plant, asset.area, asset.sector].filter(Boolean).join(' > ') || '-'}</TableCell>\n                                    <TableCell className=\"text-right\">{asset.current_runtime_hours.toFixed(1)}h</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default function Index({\n    shifts,\n    filters = {\n        search: '',\n        sort: 'name',\n        direction: 'asc' as const,\n        per_page: 8,\n    },\n}: Props) {\n    const [search, setSearch] = useState(filters?.search || '');\n    const [perPage] = useState(filters?.per_page || 8);\n    const [sort, setSort] = useState(filters?.sort || 'name');\n    const [direction, setDirection] = useState<'asc' | 'desc'>(filters?.direction || 'asc');\n    const [expanded, setExpanded] = useState<number | null>(null);\n    const [isDeleting, setIsDeleting] = useState(false);\n    const [selectedShift, setSelectedShift] = useState<ShiftData | null>(null);\n    const [confirmationText, setConfirmationText] = useState('');\n    const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n    const [openDropdownId, setOpenDropdownId] = useState<number | null>(null);\n    const [associatedAssets, setAssociatedAssets] = useState<AssetData[]>([]);\n    const [loadingAssets, setLoadingAssets] = useState(false);\n    const [showAssetsDialog, setShowAssetsDialog] = useState(false);\n\n    const page = usePage<PageProps>();\n    const flash = page.props.flash;\n\n    useEffect(() => {\n        if (flash?.success) {\n            toast.success('Operação realizada com sucesso!', {\n                description: flash.success,\n            });\n        }\n    }, [flash]);\n\n    useEffect(() => {\n        const searchTimeout = setTimeout(() => {\n            router.get(\n                route('asset-hierarchy.shifts'),\n                {\n                    search,\n                    sort,\n                    direction,\n                    per_page: perPage,\n                },\n                { preserveState: true, preserveScroll: true },\n            );\n        }, 300);\n\n        return () => clearTimeout(searchTimeout);\n    }, [search, sort, direction, perPage]);\n\n    const handleSort = (columnId: string) => {\n        if (sort === columnId) {\n            setDirection(direction === 'asc' ? 'desc' : 'asc');\n        } else {\n            setSort(columnId);\n            setDirection('asc');\n        }\n    };\n\n    const handleDelete = async (id: number) => {\n        const data = Array.isArray(shifts) ? shifts : shifts.data;\n        const shift = data.find((shift: ShiftData) => shift.id === id);\n        if (!shift) return;\n\n        setSelectedShift(shift);\n        setOpenDropdownId(null); // Close dropdown before opening dialog\n\n        // Check if shift has associated assets\n        if (shift.asset_count && shift.asset_count > 0) {\n            // Fetch the list of associated assets\n            setLoadingAssets(true);\n            try {\n                const response = await axios.get(route('asset-hierarchy.shifts.assets', shift.id));\n                setAssociatedAssets(response.data.assets || []);\n                setShowAssetsDialog(true);\n            } catch (error) {\n                console.error('Error fetching associated assets:', error);\n                toast.error('Erro ao buscar ativos associados');\n            } finally {\n                setLoadingAssets(false);\n            }\n        } else {\n            // No assets associated, show regular delete dialog\n            setShowDeleteDialog(true);\n        }\n    };\n\n    const confirmDelete = () => {\n        if (!selectedShift) return;\n\n        setIsDeleting(true);\n        router.delete(route('asset-hierarchy.shifts.destroy', selectedShift.id), {\n            onSuccess: () => {\n                toast.success('Turno excluído com sucesso!');\n                setShowDeleteDialog(false);\n                setSelectedShift(null);\n                setConfirmationText('');\n            },\n            onError: () => {\n                toast.error('Erro ao excluir turno');\n            },\n            onFinish: () => {\n                setIsDeleting(false);\n            },\n        });\n    };\n\n    const isConfirmationValid = confirmationText === 'EXCLUIR';\n\n    const data = Array.isArray(shifts) ? shifts : shifts.data;\n\n    // Função para transformar os dados do backend para o formato esperado pelos componentes\n    const transformSchedules = (schedules: any[]): Schedule[] => {\n        return schedules.map((schedule) => ({\n            weekday: schedule.weekday,\n            shifts: schedule.shifts?.map((shift: any) => ({\n                start_time: shift.start_time,\n                end_time: shift.end_time,\n                active: shift.active ?? true, // Mantém o valor existente ou usa true como padrão\n                breaks:\n                    shift.breaks?.map((breakTime: any) => ({\n                        start_time: breakTime.start_time,\n                        end_time: breakTime.end_time,\n                    })) || [],\n            })) || [\n                {\n                    start_time: '07:00',\n                    end_time: '17:00',\n                    active: true,\n                    breaks: [\n                        {\n                            start_time: '12:00',\n                            end_time: '13:00',\n                        },\n                    ],\n                },\n            ], // Valor padrão se não houver turnos\n        }));\n    };\n\n    const columns = [\n        {\n            id: 'name',\n            header: (\n                <div className=\"flex cursor-pointer items-center gap-2\" onClick={() => handleSort('name')}>\n                    Nome\n                    <ArrowUpDown className=\"h-4 w-4\" />\n                </div>\n            ),\n            cell: (row: { original: ShiftData }) => row.original.name,\n            width: 'w-[200px]',\n        },\n        {\n            id: 'entities',\n            header: (\n                <div className=\"flex cursor-pointer items-center gap-2\" onClick={() => handleSort('plant_count')}>\n                    Associações\n                    <ArrowUpDown className=\"h-4 w-4\" />\n                </div>\n            ),\n            cell: (row: { original: ShiftData }) => {\n                const counts = [];\n                if ((row.original.plant_count || 0) > 0) counts.push(`${row.original.plant_count} planta(s)`);\n                if ((row.original.area_count || 0) > 0) counts.push(`${row.original.area_count} área(s)`);\n                if ((row.original.sector_count || 0) > 0) counts.push(`${row.original.sector_count} setor(es)`);\n                if ((row.original.asset_count || 0) > 0) counts.push(`${row.original.asset_count} ativo(s)`);\n                return counts.length > 0 ? counts.join(', ') : 'Nenhuma associação';\n            },\n            width: 'w-[300px]',\n        },\n        {\n            id: 'work_hours',\n            header: (\n                <div className=\"flex cursor-pointer items-center gap-2\" onClick={() => handleSort('total_work_hours')}>\n                    Horas de Trabalho\n                    <ArrowUpDown className=\"h-4 w-4\" />\n                </div>\n            ),\n            cell: (row: { original: ShiftData }) => {\n                const hours = row.original.total_work_hours || 0;\n                const minutes = row.original.total_work_minutes || 0;\n                return `${hours}h ${minutes}m`;\n            },\n            width: 'w-[150px]',\n        },\n        {\n            id: 'break_hours',\n            header: (\n                <div className=\"flex cursor-pointer items-center gap-2\" onClick={() => handleSort('total_break_hours')}>\n                    Horas de Intervalo\n                    <ArrowUpDown className=\"h-4 w-4\" />\n                </div>\n            ),\n            cell: (row: { original: ShiftData }) => {\n                const hours = row.original.total_break_hours || 0;\n                const minutes = row.original.total_break_minutes || 0;\n                return `${hours}h ${minutes}m`;\n            },\n            width: 'w-[150px]',\n        },\n        {\n            id: 'actions',\n            header: 'Ações',\n            cell: (row: { original: ShiftData }) => (\n                <DropdownMenu open={openDropdownId === row.original.id} onOpenChange={(open) => setOpenDropdownId(open ? row.original.id : null)}>\n                    <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" className=\"text-muted-foreground data-[state=open]:bg-muted ignore-row-click flex size-8\" size=\"icon\">\n                            <MoreVertical />\n                            <span className=\"sr-only\">Abrir menu</span>\n                        </Button>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"end\" className=\"ignore-row-click w-32\">\n                        <DropdownMenuItem\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                setExpanded(expanded === row.original.id ? null : row.original.id);\n                                setOpenDropdownId(null);\n                            }}\n                        >\n                            Visualizar\n                        </DropdownMenuItem>\n                        <DropdownMenuItem asChild>\n                            <Link href={route('asset-hierarchy.shifts.edit', row.original.id)} onClick={(e) => e.stopPropagation()}>\n                                Editar\n                            </Link>\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                handleDelete(row.original.id);\n                            }}\n                        >\n                            Excluir\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            ),\n            width: 'w-[80px]',\n        },\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Turnos\" />\n\n            <ListLayout\n                title=\"Turnos\"\n                description=\"Gerencie os turnos de trabalho\"\n                searchPlaceholder=\"Buscar por nome...\"\n                searchValue={search}\n                onSearchChange={(value) => setSearch(value)}\n                createRoute={route('asset-hierarchy.shifts.shift-editor')}\n                createButtonText=\"Adicionar\"\n            >\n                <div className=\"space-y-4\">\n                    {data.length === 0 ? (\n                        <Card className=\"bg-muted/50 rounded-lg border p-6 transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]\">\n                            <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n                                <div className=\"bg-muted mb-3 flex size-12 items-center justify-center rounded-full\">\n                                    <Clock className=\"text-muted-foreground size-6\" />\n                                </div>\n                                <h3 className=\"mb-1 text-lg font-medium\">Nenhum turno cadastrado</h3>\n                                <p className=\"text-muted-foreground mb-4 text-sm\">\n                                    Adicione turnos para começar a gerenciar os horários de trabalho.\n                                </p>\n                                <Link href={route('asset-hierarchy.shifts.shift-editor')}>\n                                    <Button>\n                                        <Plus className=\"mr-2 h-4 w-4\" />\n                                        Adicionar Turno\n                                    </Button>\n                                </Link>\n                            </CardContent>\n                        </Card>\n                    ) : (\n                        <div className=\"rounded-md border\">\n                            <Table>\n                                <TableHeader className=\"bg-muted sticky top-0 z-10\">\n                                    <TableRow>\n                                        <TableHead className=\"w-[40px] text-center\" />\n                                        {columns.map((column, index) => (\n                                            <TableHead key={column.id} className={`${index === 0 ? 'pl-4' : ''} ${column.width || ''}`}>\n                                                {column.header}\n                                            </TableHead>\n                                        ))}\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {data.map((shift) => [\n                                        <TableRow\n                                            key={shift.id}\n                                            className={`${expanded === shift.id ? 'bg-muted/50 hover:bg-background' : 'hover:bg-muted/30'} cursor-pointer transition-colors`}\n                                            onClick={(e) => {\n                                                // Evita conflito com ações (dropdown e links)\n                                                if ((e.target as HTMLElement).closest('.ignore-row-click, a, button')) return;\n                                                setExpanded(expanded === shift.id ? null : shift.id);\n                                            }}\n                                        >\n                                            <TableCell className=\"w-[40px] text-center align-middle\">\n                                                {expanded === shift.id ? (\n                                                    <ChevronUpIcon className=\"mx-auto h-4 w-4\" />\n                                                ) : (\n                                                    <ChevronDownIcon className=\"mx-auto h-4 w-4\" />\n                                                )}\n                                            </TableCell>\n                                            {columns.map((column) => (\n                                                <TableCell\n                                                    key={column.id}\n                                                    className={column.width + (column.id === 'actions' ? ' ignore-row-click' : '')}\n                                                >\n                                                    {column.cell({ original: shift })}\n                                                </TableCell>\n                                            ))}\n                                        </TableRow>,\n                                        expanded === shift.id && (\n                                            <TableRow key={`expanded-${shift.id}`} className=\"hover:bg-transparent\">\n                                                <TableCell colSpan={columns.length + 1} className=\"bg-muted/50 border-border/40 border-t p-0\">\n                                                    <Tabs defaultValue=\"calendar\" className=\"w-full p-4\">\n                                                        <div className=\"mb-4 flex items-center justify-between\">\n                                                            <TabsList className=\"grid w-[400px] grid-cols-3\">\n                                                                <TabsTrigger value=\"calendar\" className=\"flex items-center gap-2\">\n                                                                    <Calendar className=\"h-4 w-4\" />\n                                                                    Calendário\n                                                                </TabsTrigger>\n                                                                <TabsTrigger value=\"table\" className=\"flex items-center gap-2\">\n                                                                    <List className=\"h-4 w-4\" />\n                                                                    Tabela\n                                                                </TabsTrigger>\n                                                                <TabsTrigger value=\"asset\" className=\"flex items-center gap-2\">\n                                                                    <Settings className=\"h-4 w-4\" />\n                                                                    Ativos\n                                                                </TabsTrigger>\n                                                            </TabsList>\n                                                        </div>\n                                                        <TabsContent value=\"calendar\">\n                                                            <ShiftCalendarView schedules={transformSchedules(shift.schedules)} showAllDays={true} />\n                                                        </TabsContent>\n                                                        <TabsContent value=\"table\">\n                                                            <ShiftTableView schedules={transformSchedules(shift.schedules)} />\n                                                        </TabsContent>\n                                                        <TabsContent value=\"asset\">\n                                                            <AssetsList shiftId={shift.id} assetCount={shift.asset_count || 0} />\n                                                        </TabsContent>\n                                                    </Tabs>\n                                                </TableCell>\n                                            </TableRow>\n                                        ),\n                                    ])}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    )}\n\n                    {!Array.isArray(shifts) && (\n                        <PaginationWrapper\n                            currentPage={shifts.current_page}\n                            lastPage={shifts.last_page}\n                            total={shifts.total}\n                            routeName=\"asset-hierarchy.shifts\"\n                            search={search}\n                            sort={sort}\n                            direction={direction}\n                            perPage={perPage}\n                        />\n                    )}\n                </div>\n            </ListLayout>\n\n            {/* Diálogo de Confirmação de Exclusão */}\n            <Dialog\n                open={showDeleteDialog}\n                onOpenChange={(open) => {\n                    setShowDeleteDialog(open);\n                    if (!open) {\n                        setConfirmationText('');\n                        setSelectedShift(null);\n                    }\n                }}\n            >\n                <DialogContent>\n                    <DialogTitle>Confirmar exclusão</DialogTitle>\n                    <DialogDescription>\n                        Tem certeza que deseja excluir o turno {selectedShift?.name}? Esta ação não pode ser desfeita.\n                    </DialogDescription>\n                    <div className=\"space-y-4\">\n                        <div className=\"space-y-2\">\n                            <Label htmlFor=\"confirmation\">Digite EXCLUIR para confirmar</Label>\n                            <Input\n                                id=\"confirmation\"\n                                variant=\"destructive\"\n                                value={confirmationText}\n                                onChange={(e) => setConfirmationText(e.target.value)}\n                            />\n                        </div>\n                    </div>\n                    <DialogFooter>\n                        <DialogClose asChild>\n                            <Button variant=\"secondary\">Cancelar</Button>\n                        </DialogClose>\n                        <Button variant=\"destructive\" onClick={confirmDelete} disabled={!isConfirmationValid || isDeleting}>\n                            {isDeleting ? 'Excluindo...' : 'Excluir'}\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n\n            {/* Diálogo de Ativos Associados */}\n            <Dialog\n                open={showAssetsDialog}\n                onOpenChange={(open) => {\n                    setShowAssetsDialog(open);\n                    if (!open) {\n                        setSelectedShift(null);\n                        setAssociatedAssets([]);\n                    }\n                }}\n            >\n                <DialogContent className=\"max-w-2xl\">\n                    <DialogTitle className=\"flex items-center gap-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n                        Turno com ativos associados\n                    </DialogTitle>\n                    <DialogDescription>\n                        O turno <strong>{selectedShift?.name}</strong> não pode ser excluído porque está associado aos seguintes ativos:\n                    </DialogDescription>\n\n                    {loadingAssets ? (\n                        <div className=\"flex items-center justify-center py-8\">\n                            <div className=\"text-muted-foreground\">Carregando ativos...</div>\n                        </div>\n                    ) : associatedAssets.length > 5 ? (\n                        <div className=\"rounded-md border\">\n                            <Table>\n                                <TableHeader className=\"bg-background sticky top-0 z-10 border-b\">\n                                    <TableRow>\n                                        <TableHead>Tag</TableHead>\n                                        <TableHead>Descrição</TableHead>\n                                        <TableHead>Tipo</TableHead>\n                                        <TableHead>Localização</TableHead>\n                                        <TableHead className=\"text-right\">Horímetro</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                            </Table>\n                            <ScrollArea className=\"h-[205px]\">\n                                <Table>\n                                    <TableBody>\n                                        {associatedAssets.map((asset) => (\n                                            <TableRow key={asset.id}>\n                                                <TableCell className=\"font-medium\">\n                                                    <Link\n                                                        href={route('asset-hierarchy.assets.show', asset.id)}\n                                                        className=\"text-primary hover:underline\"\n                                                    >\n                                                        {asset.tag}\n                                                    </Link>\n                                                </TableCell>\n                                                <TableCell>{asset.description || '-'}</TableCell>\n                                                <TableCell>{asset.asset_type || '-'}</TableCell>\n                                                <TableCell>{[asset.plant, asset.area, asset.sector].filter(Boolean).join(' > ') || '-'}</TableCell>\n                                                <TableCell className=\"text-right\">{asset.current_runtime_hours.toFixed(1)}h</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </ScrollArea>\n                        </div>\n                    ) : (\n                        <div className=\"rounded-md border\">\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Tag</TableHead>\n                                        <TableHead>Descrição</TableHead>\n                                        <TableHead>Tipo</TableHead>\n                                        <TableHead>Localização</TableHead>\n                                        <TableHead className=\"text-right\">Horímetro</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    {associatedAssets.map((asset) => (\n                                        <TableRow key={asset.id}>\n                                            <TableCell className=\"font-medium\">\n                                                <Link href={route('asset-hierarchy.assets.show', asset.id)} className=\"text-primary hover:underline\">\n                                                    {asset.tag}\n                                                </Link>\n                                            </TableCell>\n                                            <TableCell>{asset.description || '-'}</TableCell>\n                                            <TableCell>{asset.asset_type || '-'}</TableCell>\n                                            <TableCell>{[asset.plant, asset.area, asset.sector].filter(Boolean).join(' > ') || '-'}</TableCell>\n                                            <TableCell className=\"text-right\">{asset.current_runtime_hours.toFixed(1)}h</TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    )}\n\n                    <div className=\"rounded-md bg-yellow-50 p-4\">\n                        <p className=\"text-sm text-yellow-800\">\n                            Para excluir este turno, primeiro você deve desassociar ou reatribuir os ativos listados acima para outro turno.\n                        </p>\n                    </div>\n\n                    <DialogFooter>\n                        <DialogClose asChild>\n                            <Button variant=\"outline\">Fechar</Button>\n                        </DialogClose>\n                        <Button asChild>\n                            <Link href={route('asset-hierarchy.shifts.edit', selectedShift?.id || 0)}>Editar Turno</Link>\n                        </Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/shifts/shift-editor.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "line": 41,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterface",
                "endLine": 41,
                "endColumn": 22,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterface",
                        "data": {
                            "replacement": "object"
                        },
                        "fix": {
                            "range": [
                                1512,
                                1536
                            ],
                            "text": "type CreateProps = object"
                        },
                        "desc": "Replace empty interface with `object`."
                    },
                    {
                        "messageId": "replaceEmptyInterface",
                        "data": {
                            "replacement": "unknown"
                        },
                        "fix": {
                            "range": [
                                1512,
                                1536
                            ],
                            "text": "type CreateProps = unknown"
                        },
                        "desc": "Replace empty interface with `unknown`."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ShiftCalendarView from '@/components/ShiftCalendarView';\nimport ShiftTableView from '@/components/ShiftTableView';\nimport TextInput from '@/components/TextInput';\nimport TimeSelect from '@/components/TimeSelect';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport AppLayout from '@/layouts/app-layout';\nimport CreateLayout from '@/layouts/asset-hierarchy/create-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { type ShiftForm } from '@/types/asset-hierarchy';\nimport { Head, useForm } from '@inertiajs/react';\nimport { AlertCircle, Clock, Copy, Plus, Table, Trash2 } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { toast } from 'sonner';\n\n// Interface para representar um intervalo de descanso\ninterface Break {\n    start_time: string;\n    end_time: string;\n}\n\n// Interface para representar um turno de trabalho\ninterface Shift {\n    start_time: string;\n    end_time: string;\n    active: boolean;\n    breaks: Break[];\n}\n\n// Interface para representar a programação de um dia da semana\ninterface Schedule {\n    weekday: string;\n    shifts: Shift[];\n}\n\ninterface CreateProps {}\n\ninterface ShiftData {\n    id: number;\n    name: string;\n    plant?: {\n        id: number;\n        name: string;\n    };\n    schedules: Schedule[];\n}\n\nconst weekdays = [\n    { key: 'Monday', label: 'Segunda' },\n    { key: 'Tuesday', label: 'Terça' },\n    { key: 'Wednesday', label: 'Quarta' },\n    { key: 'Thursday', label: 'Quinta' },\n    { key: 'Friday', label: 'Sexta' },\n    { key: 'Saturday', label: 'Sábado' },\n    { key: 'Sunday', label: 'Domingo' },\n];\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Cadastro',\n        href: '/asset-hierarchy/assets',\n    },\n    {\n        title: 'Turnos',\n        href: '/asset-hierarchy/shifts',\n    },\n    {\n        title: 'Novo Turno',\n        href: '/asset-hierarchy/shifts/shift-editor',\n    },\n];\n\n// Função para validar se um intervalo está dentro do horário do turno\nconst isBreakValid = (shift: Shift, breakTime: Break): boolean => {\n    const shiftStart = new Date(`2000-01-01T${shift.start_time}`);\n    const shiftEnd = new Date(`2000-01-01T${shift.end_time}`);\n    const breakStart = new Date(`2000-01-01T${breakTime.start_time}`);\n    const breakEnd = new Date(`2000-01-01T${breakTime.end_time}`);\n\n    // Se o turno termina no dia seguinte\n    if (shiftEnd < shiftStart) {\n        shiftEnd.setDate(shiftEnd.getDate() + 1);\n    }\n\n    // Se o intervalo termina no dia seguinte\n    if (breakEnd < breakStart) {\n        breakEnd.setDate(breakEnd.getDate() + 1);\n    }\n\n    return breakStart >= shiftStart && breakEnd <= shiftEnd;\n};\n\n// Função para converter horário em minutos\nconst timeToMinutes = (time: string): number => {\n    const [hours, minutes] = time.split(':').map(Number);\n    return hours * 60 + minutes;\n};\n\n// Função para converter minutos em horário\nconst minutesToTime = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60) % 24;\n    const mins = minutes % 60;\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\n};\n\n// Função para calcular a duração entre dois horários\nconst calculateDuration = (start: string, end: string): number => {\n    const startMinutes = timeToMinutes(start);\n    const endMinutes = timeToMinutes(end);\n\n    // Se o horário final for menor que o inicial, significa que atravessou a meia-noite\n    if (endMinutes < startMinutes) {\n        return 24 * 60 - startMinutes + endMinutes;\n    }\n\n    return endMinutes - startMinutes;\n};\n\n// Função para adicionar minutos a um horário\nconst addMinutes = (time: string, minutes: number): string => {\n    const totalMinutes = timeToMinutes(time) + minutes;\n    return minutesToTime(totalMinutes);\n};\n\n// Função para encontrar o maior período sem intervalo\nconst findLargestGap = (shift: Shift): { start: string; end: string } | null => {\n    if (shift.breaks.length === 0) {\n        return {\n            start: shift.start_time,\n            end: shift.end_time,\n        };\n    }\n\n    // Ordena os intervalos por horário de início\n    const sortedBreaks = [...shift.breaks].sort((a, b) => timeToMinutes(a.start_time) - timeToMinutes(b.start_time));\n\n    let largestGap = 0;\n    let gapStart = shift.start_time;\n    let gapEnd = shift.end_time;\n\n    // Verifica o período antes do primeiro intervalo\n    const firstGap = calculateDuration(shift.start_time, sortedBreaks[0].start_time);\n    if (firstGap > largestGap) {\n        largestGap = firstGap;\n        gapStart = shift.start_time;\n        gapEnd = sortedBreaks[0].start_time;\n    }\n\n    // Verifica os períodos entre intervalos\n    for (let i = 0; i < sortedBreaks.length - 1; i++) {\n        const currentGap = calculateDuration(sortedBreaks[i].end_time, sortedBreaks[i + 1].start_time);\n        if (currentGap > largestGap) {\n            largestGap = currentGap;\n            gapStart = sortedBreaks[i].end_time;\n            gapEnd = sortedBreaks[i + 1].start_time;\n        }\n    }\n\n    // Verifica o período após o último intervalo\n    const lastGap = calculateDuration(sortedBreaks[sortedBreaks.length - 1].end_time, shift.end_time);\n    if (lastGap > largestGap) {\n        largestGap = lastGap;\n        gapStart = sortedBreaks[sortedBreaks.length - 1].end_time;\n        gapEnd = shift.end_time;\n    }\n\n    return largestGap > 0 ? { start: gapStart, end: gapEnd } : null;\n};\n\n// Função para verificar se dois turnos se sobrepõem\nconst hasOverlappingShifts = (shift1: Shift, shift2: Shift): boolean => {\n    const shift1Start = timeToMinutes(shift1.start_time);\n    const shift1End = timeToMinutes(shift1.end_time);\n    const shift2Start = timeToMinutes(shift2.start_time);\n    const shift2End = timeToMinutes(shift2.end_time);\n\n    // Se algum dos turnos atravessa a meia-noite\n    if (shift1End < shift1Start) {\n        // Verifica se o turno 2 começa antes do turno 1 terminar\n        if (shift2Start < shift1End) return true;\n        // Verifica se o turno 2 termina depois do turno 1 começar\n        if (shift2End > shift1Start) return true;\n        // Verifica se o turno 2 atravessa a meia-noite e se sobrepõe\n        if (shift2End < shift2Start && shift2Start < shift1End && shift2End > shift1Start) return true;\n    } else if (shift2End < shift2Start) {\n        // Verifica se o turno 1 começa antes do turno 2 terminar\n        if (shift1Start < shift2End) return true;\n        // Verifica se o turno 1 termina depois do turno 2 começar\n        if (shift1End > shift2Start) return true;\n        // Verifica se o turno 1 atravessa a meia-noite e se sobrepõe\n        if (shift1End < shift1Start && shift1Start < shift2End && shift1End > shift2Start) return true;\n    } else {\n        // Caso nenhum dos turnos atravesse a meia-noite\n        return shift1Start < shift2End && shift2Start < shift1End;\n    }\n\n    return false;\n};\n\n// Função para encontrar turnos sobrepostos\nconst findOverlappingShifts = (shifts: Shift[], currentShiftIndex: number): number[] => {\n    const currentShift = shifts[currentShiftIndex];\n    const overlappingIndices: number[] = [];\n\n    for (let i = 0; i < shifts.length; i++) {\n        if (i !== currentShiftIndex && hasOverlappingShifts(currentShift, shifts[i])) {\n            overlappingIndices.push(i);\n        }\n    }\n\n    return overlappingIndices;\n};\n\n// Função para verificar se dois intervalos se sobrepõem\nconst hasOverlappingBreaks = (break1: Break, break2: Break): boolean => {\n    const break1Start = timeToMinutes(break1.start_time);\n    const break1End = timeToMinutes(break1.end_time);\n    const break2Start = timeToMinutes(break2.start_time);\n    const break2End = timeToMinutes(break2.end_time);\n\n    // Se algum dos intervalos atravessa a meia-noite\n    if (break1End < break1Start) {\n        // Verifica se o intervalo 2 começa antes do intervalo 1 terminar\n        if (break2Start < break1End) return true;\n        // Verifica se o intervalo 2 termina depois do intervalo 1 começar\n        if (break2End > break1Start) return true;\n        // Verifica se o intervalo 2 atravessa a meia-noite e se sobrepõe\n        if (break2End < break2Start && break2Start < break1End && break2End > break1Start) return true;\n    } else if (break2End < break2Start) {\n        // Verifica se o intervalo 1 começa antes do intervalo 2 terminar\n        if (break1Start < break2End) return true;\n        // Verifica se o intervalo 1 termina depois do intervalo 2 começar\n        if (break1End > break2Start) return true;\n        // Verifica se o intervalo 1 atravessa a meia-noite e se sobrepõe\n        if (break1End < break1Start && break1Start < break2End && break1End > break2Start) return true;\n    } else {\n        // Caso nenhum dos intervalos atravesse a meia-noite\n        return break1Start < break2End && break2Start < break1End;\n    }\n\n    return false;\n};\n\n// Função para verificar se um intervalo está sobrepondo com outros intervalos do mesmo turno\nconst isBreakOverlapping = (shift: Shift, currentBreak: Break, currentBreakIndex: number): boolean => {\n    return shift.breaks.some((breakTime, index) => index !== currentBreakIndex && hasOverlappingBreaks(currentBreak, breakTime));\n};\n\ninterface ShiftFormProps extends CreateProps {\n    mode?: 'create' | 'edit';\n    shift?: ShiftData;\n}\n\nconst ShiftForm: React.FC<ShiftFormProps> = ({ mode = 'create', shift }) => {\n    const { data, setData, post, put, processing, errors, clearErrors } = useForm<ShiftForm>({\n        name: shift?.name || '',\n        schedules:\n            shift?.schedules ||\n            weekdays.map((day) => ({\n                weekday: day.key,\n                shifts:\n                    day.key === 'Saturday' || day.key === 'Sunday'\n                        ? []\n                        : [\n                              {\n                                  start_time: '07:00',\n                                  end_time: '17:00',\n                                  active: true,\n                                  breaks: [{ start_time: '12:00', end_time: '13:00' }],\n                              },\n                          ],\n            })),\n    });\n\n    const [selectedDay, setSelectedDay] = useState(weekdays[0].key);\n    const [selectedDays, setSelectedDays] = useState<string[]>([]);\n    const [viewMode, setViewMode] = useState<'timeline' | 'table'>('timeline');\n\n    // Função para adicionar um novo turno em um dia específico\n    const addShift = (dayIndex: number) => {\n        const newSchedules = [...data.schedules];\n        const existingShifts = newSchedules[dayIndex].shifts;\n\n        // Se não houver turnos, usa o padrão\n        if (existingShifts.length === 0) {\n            newSchedules[dayIndex].shifts.push({\n                start_time: '07:00',\n                end_time: '17:00',\n                active: true,\n                breaks: [{ start_time: '12:00', end_time: '13:00' }],\n            });\n        } else {\n            // Pega o último turno\n            const lastShift = existingShifts[existingShifts.length - 1];\n            const lastEndTime = lastShift.end_time;\n\n            // Calcula o novo horário\n            const [lastEndHour, lastEndMinute] = lastEndTime.split(':').map(Number);\n            const newStartHour = lastEndHour;\n            const newStartMinute = lastEndMinute;\n\n            // Calcula o horário de término (9 horas depois)\n            let newEndHour = newStartHour + 9;\n            if (newEndHour >= 24) {\n                newEndHour -= 24;\n            }\n\n            // Calcula o horário do intervalo (4 horas depois do início)\n            let breakStartHour = newStartHour + 4;\n            if (breakStartHour >= 24) {\n                breakStartHour -= 24;\n            }\n            let breakEndHour = breakStartHour + 1;\n            if (breakEndHour >= 24) {\n                breakEndHour -= 24;\n            }\n\n            // Formata os horários\n            const formatTime = (hour: number, minute: number) => {\n                return `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n            };\n\n            newSchedules[dayIndex].shifts.push({\n                start_time: formatTime(newStartHour, newStartMinute),\n                end_time: formatTime(newEndHour, newStartMinute),\n                active: true,\n                breaks: [\n                    {\n                        start_time: formatTime(breakStartHour, newStartMinute),\n                        end_time: formatTime(breakEndHour, newStartMinute),\n                    },\n                ],\n            });\n        }\n\n        setData('schedules', newSchedules);\n    };\n\n    // Função para remover um turno de um dia específico\n    const removeShift = (dayIndex: number, shiftIndex: number) => {\n        const newSchedules = data.schedules.map((day, idx) => {\n            if (idx === dayIndex) {\n                return {\n                    ...day,\n                    shifts: day.shifts.filter((_, index) => index !== shiftIndex),\n                };\n            }\n            return day;\n        });\n\n        setData('schedules', newSchedules);\n    };\n\n    // Função para adicionar um intervalo em um turno específico\n    const addBreak = (dayIndex: number, shiftIndex: number) => {\n        const newSchedules = [...data.schedules];\n        const shift = newSchedules[dayIndex].shifts[shiftIndex];\n\n        if (shift.breaks.length === 0) {\n            // Se não houver intervalos, adiciona um intervalo de 30 minutos no meio do turno\n            const shiftDuration = calculateDuration(shift.start_time, shift.end_time);\n            const breakStart = addMinutes(shift.start_time, Math.floor(shiftDuration / 2) - 15);\n            const breakEnd = addMinutes(breakStart, 30);\n\n            newSchedules[dayIndex].shifts[shiftIndex].breaks.push({\n                start_time: breakStart,\n                end_time: breakEnd,\n            });\n        } else {\n            // Encontra o maior período sem intervalo\n            const largestGap = findLargestGap(shift);\n\n            if (largestGap) {\n                const gapDuration = calculateDuration(largestGap.start, largestGap.end);\n                const breakStart = addMinutes(largestGap.start, Math.floor(gapDuration / 2) - 7);\n                const breakEnd = addMinutes(breakStart, 15);\n\n                newSchedules[dayIndex].shifts[shiftIndex].breaks.push({\n                    start_time: breakStart,\n                    end_time: breakEnd,\n                });\n            }\n        }\n\n        setData('schedules', newSchedules);\n    };\n\n    const removeBreak = (dayIndex: number, shiftIndex: number, breakIndex: number) => {\n        const newSchedules = data.schedules.map((day, idx) => {\n            if (idx === dayIndex) {\n                return {\n                    ...day,\n                    shifts: day.shifts.map((shift, sIdx) => {\n                        if (sIdx === shiftIndex) {\n                            return {\n                                ...shift,\n                                breaks: shift.breaks.filter((_, bIdx) => bIdx !== breakIndex),\n                            };\n                        }\n                        return shift;\n                    }),\n                };\n            }\n            return day;\n        });\n\n        setData('schedules', newSchedules);\n    };\n\n    const updateBreak = (dayIndex: number, shiftIndex: number, breakIndex: number, field: keyof Break, value: string) => {\n        const newSchedules = [...data.schedules];\n        newSchedules[dayIndex].shifts[shiftIndex].breaks[breakIndex][field] = value;\n        setData('schedules', newSchedules);\n    };\n\n    const applyToSelectedDays = () => {\n        const sourceDay = data.schedules.find((s) => s.weekday === selectedDay);\n        if (!sourceDay) return;\n\n        const newSchedules = data.schedules.map((schedule) => {\n            if (selectedDays.includes(schedule.weekday)) {\n                // Cria uma cópia profunda do dia de origem\n                return {\n                    ...sourceDay,\n                    weekday: schedule.weekday,\n                    shifts: sourceDay.shifts.map((shift) => ({\n                        ...shift,\n                        breaks: shift.breaks.map((breakTime) => ({ ...breakTime })),\n                    })),\n                };\n            }\n            return schedule;\n        });\n\n        setData('schedules', newSchedules);\n        setSelectedDays([]);\n    };\n\n    const handleSave = () => {\n        // Remove os segundos de todos os horários antes de enviar\n        const formattedData = {\n            ...data,\n            schedules: data.schedules.map((schedule) => ({\n                ...schedule,\n                shifts: schedule.shifts.map((shift) => ({\n                    ...shift,\n                    start_time: shift.start_time?.substring(0, 5) || shift.start_time,\n                    end_time: shift.end_time?.substring(0, 5) || shift.end_time,\n                    breaks: shift.breaks.map((breakTime) => ({\n                        start_time: breakTime.start_time?.substring(0, 5) || breakTime.start_time,\n                        end_time: breakTime.end_time?.substring(0, 5) || breakTime.end_time,\n                    })),\n                })),\n            })),\n        };\n\n        // Atualiza os dados do formulário com os valores formatados\n        setData(formattedData);\n\n        if (mode === 'create') {\n            post(route('asset-hierarchy.shifts.store'), {\n                onSuccess: () => {\n                    toast.success('Turno criado com sucesso!');\n                },\n                onError: () => {\n                    toast.error('Erro ao criar turno', {\n                        description: 'Ocorreu um erro. Por favor, verifique os dados e tente novamente.',\n                    });\n                },\n            });\n        } else {\n            put(route('asset-hierarchy.shifts.update', shift?.id), {\n                onSuccess: () => {\n                    toast.success('Turno atualizado com sucesso!');\n                },\n                onError: () => {\n                    toast.error('Erro ao atualizar turno', {\n                        description: 'Ocorreu um erro. Por favor, verifique os dados e tente novamente.',\n                    });\n                },\n            });\n        }\n    };\n\n    const isEditing = mode === 'edit';\n    const title = isEditing ? 'Editar Turno' : 'Cadastrar Turno';\n    const subtitle = isEditing ? 'Edite as configurações do turno' : 'Configure os turnos de trabalho';\n    const saveButtonText = isEditing ? 'Salvar Alterações' : 'Salvar';\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title={title} />\n\n            <CreateLayout\n                title={title}\n                subtitle={subtitle}\n                backRoute={route('asset-hierarchy.shifts')}\n                onSave={handleSave}\n                isSaving={processing}\n                contentWidth=\"custom\"\n                contentClassName=\"w-[950px]\"\n                saveButtonText={saveButtonText}\n            >\n                <form\n                    onSubmit={(e) => {\n                        e.preventDefault();\n                        handleSave();\n                    }}\n                    className=\"space-y-6\"\n                >\n                    <div className=\"grid grid-cols-1 justify-items-start\">\n                        <div className=\"w-fit space-y-6\">\n                            {/* Campo de nome do turno */}\n                            <div className=\"w-full space-y-2\">\n                                <TextInput<ShiftForm>\n                                    form={{\n                                        data,\n                                        setData,\n                                        errors,\n                                        clearErrors,\n                                    }}\n                                    name=\"name\"\n                                    label=\"Nome do Turno\"\n                                    placeholder=\"Digite o nome do turno\"\n                                    required\n                                />\n                            </div>\n\n                            {/* Seletor de dias da semana */}\n                            <Tabs value={selectedDay} onValueChange={setSelectedDay}>\n                                <TabsList className=\"grid grid-cols-7 gap-2\">\n                                    {weekdays.map((day) => (\n                                        <TabsTrigger key={day.key} value={day.key} className=\"px-4\">\n                                            {day.label}\n                                        </TabsTrigger>\n                                    ))}\n                                </TabsList>\n\n                                {/* Conteúdo de cada dia da semana */}\n                                {weekdays.map((day, dayIndex) => (\n                                    <TabsContent key={day.key} value={day.key} className=\"!pr-0 !pl-2\">\n                                        <div className=\"flex flex-row items-center justify-between pt-6 pb-6\">\n                                            <h3 className=\"text-lg font-semibold\">Turnos da {day.label}</h3>\n                                            <div className=\"flex items-center gap-2\">\n                                                {/* Botão para copiar turnos para múltiplos dias */}\n                                                <Popover>\n                                                    <PopoverTrigger asChild>\n                                                        <Button\n                                                            type=\"button\"\n                                                            variant=\"outline\"\n                                                            size=\"sm\"\n                                                            disabled={data.schedules[dayIndex].shifts.length === 0}\n                                                        >\n                                                            <Copy className=\"mr-2 h-4 w-4\" />\n                                                            Copiar para Múltiplos Dias\n                                                        </Button>\n                                                    </PopoverTrigger>\n                                                    <PopoverContent className=\"w-80 p-6\" align=\"end\" sideOffset={5}>\n                                                        {/* Conteúdo do popover de cópia */}\n                                                        <div className=\"space-y-5\">\n                                                            <div className=\"mt-1 grid grid-cols-2 gap-4\">\n                                                                {weekdays\n                                                                    .filter((d) => d.key !== day.key)\n                                                                    .map((d) => (\n                                                                        <div key={d.key} className=\"flex items-center space-x-1 py-1\">\n                                                                            <Checkbox\n                                                                                checked={selectedDays.includes(d.key)}\n                                                                                onCheckedChange={(checked) => {\n                                                                                    if (checked) {\n                                                                                        setSelectedDays([...selectedDays, d.key]);\n                                                                                    } else {\n                                                                                        setSelectedDays(selectedDays.filter((day) => day !== d.key));\n                                                                                    }\n                                                                                }}\n                                                                                id={`copy-day-${d.key}`}\n                                                                                className=\"h-5 w-5\"\n                                                                            />\n                                                                            <Label htmlFor={`copy-day-${d.key}`} className=\"cursor-pointer\">\n                                                                                {d.label}\n                                                                            </Label>\n                                                                        </div>\n                                                                    ))}\n                                                            </div>\n                                                            <div className=\"pt-3\">\n                                                                <Button\n                                                                    type=\"button\"\n                                                                    onClick={applyToSelectedDays}\n                                                                    size=\"sm\"\n                                                                    disabled={selectedDays.length === 0}\n                                                                    className=\"w-full\"\n                                                                >\n                                                                    Aplicar\n                                                                </Button>\n                                                            </div>\n                                                        </div>\n                                                    </PopoverContent>\n                                                </Popover>\n                                                {/* Botão para adicionar novo turno */}\n                                                <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={() => addShift(dayIndex)}>\n                                                    <Plus className=\"mr-2 h-4 w-4\" />\n                                                    Adicionar Turno\n                                                </Button>\n                                            </div>\n                                        </div>\n\n                                        {/* Lista de turnos do dia */}\n                                        {data.schedules[dayIndex].shifts.length === 0 ? (\n                                            <div className=\"bg-muted/50 rounded-lg border p-6 transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]\">\n                                                <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n                                                    <div className=\"bg-muted mb-3 flex size-12 items-center justify-center rounded-full\">\n                                                        <Clock className=\"text-muted-foreground size-6\" />\n                                                    </div>\n                                                    <h3 className=\"mb-1 text-lg font-medium\">Nenhum turno adicionado</h3>\n                                                    <p className=\"text-muted-foreground mb-4 text-sm\">Adicione turnos para este dia da semana.</p>\n                                                </div>\n                                            </div>\n                                        ) : (\n                                            data.schedules[dayIndex].shifts.map((shift, shiftIndex) => {\n                                                const overlappingShifts = findOverlappingShifts(data.schedules[dayIndex].shifts, shiftIndex);\n\n                                                return (\n                                                    <Card\n                                                        key={`shift-${dayIndex}-${shiftIndex}-${shift.start_time}-${shift.end_time}`}\n                                                        className=\"bg-muted/50 mb-4 transition-all duration-500 ease-[cubic-bezier(0.4,0,0.2,1)]\"\n                                                    >\n                                                        <CardHeader className=\"flex flex-col space-y-2\">\n                                                            <div className=\"flex items-center\">\n                                                                <Label className=\"text-md font-semibold\">Turno {shiftIndex + 1}</Label>\n                                                            </div>\n                                                            <div className=\"flex items-center space-x-2\">\n                                                                <div className=\"flex items-center space-x-2\">\n                                                                    {/* Seletor de horário de início */}\n                                                                    <TimeSelect\n                                                                        value={shift.start_time}\n                                                                        onChange={(value: string) => {\n                                                                            const newSchedules = [...data.schedules];\n                                                                            newSchedules[dayIndex].shifts[shiftIndex].start_time = value;\n                                                                            setData('schedules', newSchedules);\n                                                                        }}\n                                                                    />\n                                                                    <span className=\"text-muted-foreground\">até</span>\n                                                                    {/* Seletor de horário de término */}\n                                                                    <TimeSelect\n                                                                        value={shift.end_time}\n                                                                        onChange={(value: string) => {\n                                                                            const newSchedules = [...data.schedules];\n                                                                            newSchedules[dayIndex].shifts[shiftIndex].end_time = value;\n                                                                            setData('schedules', newSchedules);\n                                                                        }}\n                                                                    />\n                                                                    {/* Botão para remover turno */}\n                                                                    <Button\n                                                                        type=\"button\"\n                                                                        variant=\"ghost\"\n                                                                        size=\"icon\"\n                                                                        onClick={() => removeShift(dayIndex, shiftIndex)}\n                                                                        className=\"h-10 w-10\"\n                                                                    >\n                                                                        <Trash2 className=\"text-destructive h-4 w-4\" />\n                                                                    </Button>\n                                                                </div>\n                                                                {overlappingShifts.length > 0 && (\n                                                                    <Alert\n                                                                        variant=\"destructive\"\n                                                                        className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                    >\n                                                                        <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                        <AlertDescription className=\"text-sm\">\n                                                                            Este turno está sobrepondo com{' '}\n                                                                            {overlappingShifts.length === 1 ? 'o turno' : 'os turnos'}{' '}\n                                                                            {overlappingShifts.map((i) => i + 1).join(', ')}\n                                                                        </AlertDescription>\n                                                                    </Alert>\n                                                                )}\n                                                            </div>\n                                                        </CardHeader>\n                                                        <CardContent className=\"-mt-2 space-y-2\">\n                                                            <div className=\"grid grid-cols-1 gap-2\">\n                                                                {/* Seção de intervalos */}\n                                                                <div className=\"space-y-0.5 pl-4\">\n                                                                    <div className=\"mb-2 flex items-center justify-between\">\n                                                                        <Label className=\"ml-2 pt-2 text-base font-medium\">Intervalos</Label>\n                                                                        {/* Botão para adicionar intervalo */}\n                                                                        <Button\n                                                                            type=\"button\"\n                                                                            variant=\"outline\"\n                                                                            size=\"sm\"\n                                                                            onClick={() => addBreak(dayIndex, shiftIndex)}\n                                                                        >\n                                                                            <Plus className=\"mr-2 h-4 w-4\" />\n                                                                            Adicionar Intervalo\n                                                                        </Button>\n                                                                    </div>\n                                                                    {shift.breaks.length === 0 ? (\n                                                                        <Card className=\"bg-background shadow-none\">\n                                                                            <CardContent className=\"-mt-3 -mb-3 ml-2 flex items-start space-x-2 px-2 py-0\">\n                                                                                <div className=\"bg-muted -mt-0.75 flex size-8 items-center justify-center rounded-full\">\n                                                                                    <Clock className=\"text-muted-foreground size-4\" />\n                                                                                </div>\n                                                                                <div className=\"flex flex-col py-0.5\">\n                                                                                    <h3 className=\"text-base font-medium\">\n                                                                                        Nenhum intervalo adicionado\n                                                                                    </h3>\n                                                                                    <p className=\"text-muted-foreground text-sm\">\n                                                                                        Adicione intervalos para este turno.\n                                                                                    </p>\n                                                                                </div>\n                                                                            </CardContent>\n                                                                        </Card>\n                                                                    ) : (\n                                                                        <div className=\"space-y-2\">\n                                                                            {/* Lista de intervalos */}\n                                                                            {shift.breaks.map((breakTime, breakIndex) => {\n                                                                                const isValidInShift = isBreakValid(shift, breakTime);\n                                                                                const isOverlapping =\n                                                                                    isValidInShift &&\n                                                                                    isBreakOverlapping(shift, breakTime, breakIndex);\n\n                                                                                return (\n                                                                                    <Card\n                                                                                        key={`break-${dayIndex}-${shiftIndex}-${breakIndex}-${breakTime.start_time}-${breakTime.end_time}`}\n                                                                                        className=\"bg-background shadow-none\"\n                                                                                    >\n                                                                                        <CardContent className=\"-mt-3 -mb-3 ml-1 flex items-center space-x-2 px-2\">\n                                                                                            <div className=\"flex items-center space-x-2\">\n                                                                                                {/* Seletor de horário de início do intervalo */}\n                                                                                                <TimeSelect\n                                                                                                    value={breakTime.start_time}\n                                                                                                    onChange={(value: string) =>\n                                                                                                        updateBreak(\n                                                                                                            dayIndex,\n                                                                                                            shiftIndex,\n                                                                                                            breakIndex,\n                                                                                                            'start_time',\n                                                                                                            value,\n                                                                                                        )\n                                                                                                    }\n                                                                                                />\n                                                                                                <span className=\"text-muted-foreground\">até</span>\n                                                                                                {/* Seletor de horário de término do intervalo */}\n                                                                                                <TimeSelect\n                                                                                                    value={breakTime.end_time}\n                                                                                                    onChange={(value: string) =>\n                                                                                                        updateBreak(\n                                                                                                            dayIndex,\n                                                                                                            shiftIndex,\n                                                                                                            breakIndex,\n                                                                                                            'end_time',\n                                                                                                            value,\n                                                                                                        )\n                                                                                                    }\n                                                                                                />\n                                                                                                {/* Botão para remover intervalo */}\n                                                                                                <Button\n                                                                                                    type=\"button\"\n                                                                                                    variant=\"ghost\"\n                                                                                                    size=\"icon\"\n                                                                                                    className=\"h-10 w-10\"\n                                                                                                    onClick={() =>\n                                                                                                        removeBreak(dayIndex, shiftIndex, breakIndex)\n                                                                                                    }\n                                                                                                >\n                                                                                                    <Trash2 className=\"text-destructive h-4 w-4\" />\n                                                                                                </Button>\n                                                                                            </div>\n                                                                                            {!isValidInShift && (\n                                                                                                <Alert\n                                                                                                    variant=\"destructive\"\n                                                                                                    className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                                                >\n                                                                                                    <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                                                    <AlertDescription className=\"text-sm\">\n                                                                                                        O intervalo deve estar dentro do horário do\n                                                                                                        turno\n                                                                                                    </AlertDescription>\n                                                                                                </Alert>\n                                                                                            )}\n                                                                                            {isOverlapping && (\n                                                                                                <Alert\n                                                                                                    variant=\"destructive\"\n                                                                                                    className=\"ml-2 flex items-center gap-2 border-0 py-2\"\n                                                                                                >\n                                                                                                    <AlertCircle className=\"mb-1 h-4 w-4\" />\n                                                                                                    <AlertDescription className=\"text-sm\">\n                                                                                                        Este intervalo está sobrepondo com outro\n                                                                                                        intervalo do turno\n                                                                                                    </AlertDescription>\n                                                                                                </Alert>\n                                                                                            )}\n                                                                                        </CardContent>\n                                                                                    </Card>\n                                                                                );\n                                                                            })}\n                                                                        </div>\n                                                                    )}\n                                                                </div>\n                                                            </div>\n                                                        </CardContent>\n                                                    </Card>\n                                                );\n                                            })\n                                        )}\n                                    </TabsContent>\n                                ))}\n                            </Tabs>\n\n                            {/* Seção de visualização */}\n                            <div className=\"space-y-4\">\n                                {/* Seletor de modo de visualização */}\n                                <Tabs value={viewMode} onValueChange={(value) => setViewMode(value as 'timeline' | 'table')}>\n                                    <TabsList className=\"grid w-[200px] grid-cols-2\">\n                                        <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\n                                            <Clock className=\"h-4 w-4\" />\n                                            Timeline\n                                        </TabsTrigger>\n                                        <TabsTrigger value=\"table\" className=\"flex items-center gap-2\">\n                                            <Table className=\"h-4 w-4\" />\n                                            Tabela\n                                        </TabsTrigger>\n                                    </TabsList>\n                                </Tabs>\n\n                                {/* Visualização dos turnos */}\n                                <div className=\"relative\">\n                                    {/* Visualização em timeline */}\n                                    <div\n                                        className={`transition-opacity duration-300 ${viewMode === 'timeline' ? 'opacity-100' : 'pointer-events-none absolute inset-0 opacity-0'}`}\n                                    >\n                                        <Card>\n                                            <CardHeader>\n                                                <CardTitle>Visualização dos Turnos</CardTitle>\n                                            </CardHeader>\n                                            <CardContent>\n                                                <ShiftCalendarView schedules={data.schedules} />\n                                            </CardContent>\n                                        </Card>\n                                    </div>\n                                    {/* Visualização em tabela */}\n                                    <div\n                                        className={`transition-opacity duration-300 ${viewMode === 'table' ? 'opacity-100' : 'pointer-events-none absolute inset-0 opacity-0'}`}\n                                    >\n                                        <Card>\n                                            <CardHeader>\n                                                <CardTitle>Visão Geral Semanal</CardTitle>\n                                            </CardHeader>\n                                            <CardContent>\n                                                <ShiftTableView schedules={data.schedules} />\n                                            </CardContent>\n                                        </Card>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </form>\n            </CreateLayout>\n        </AppLayout>\n    );\n};\n\nexport default ShiftForm;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/tipos-ativo.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1075,
                                1078
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1075,
                                1078
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import CreateAssetTypeSheet from '@/components/CreateAssetTypeSheet';\nimport { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityDeleteDialog } from '@/components/shared/EntityDeleteDialog';\nimport { EntityDependenciesDialog } from '@/components/shared/EntityDependenciesDialog';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { useEntityOperations } from '@/hooks/useEntityOperations';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { AssetType } from '@/types/entities/asset-type';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Hierarquia de Ativos',\n        href: '/asset-hierarchy',\n    },\n    {\n        title: 'Tipos de Ativo',\n        href: '/asset-hierarchy/tipos-ativo',\n    },\n];\n\ninterface Props {\n    assetTypes: {\n        data: AssetType[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n        from: number | null;\n        to: number | null;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\nexport default function TiposAtivo({ assetTypes: initialAssetTypes, filters }: Props) {\n    const entityOps = useEntityOperations<AssetType>({\n        entityName: 'assetType',\n        entityLabel: 'Tipo de Ativo',\n        routes: {\n            index: 'asset-hierarchy.tipos-ativo',\n            show: 'asset-hierarchy.tipos-ativo.show',\n            destroy: 'asset-hierarchy.tipos-ativo.destroy',\n            checkDependencies: 'asset-hierarchy.tipos-ativo.check-dependencies',\n        },\n    });\n\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'asset-hierarchy.tipos-ativo',\n        initialSort: filters.sort || 'name',\n        initialDirection: filters.direction || 'asc',\n        additionalParams: {\n            search,\n            per_page: filters.per_page,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('assetTypesColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            name: true,\n            description: true,\n            asset_count: true,\n        };\n    });\n\n    // Use data from server\n    const data = initialAssetTypes.data;\n    const pagination = {\n        current_page: initialAssetTypes.current_page,\n        last_page: initialAssetTypes.last_page,\n        per_page: initialAssetTypes.per_page,\n        total: initialAssetTypes.total,\n        from: initialAssetTypes.from,\n        to: initialAssetTypes.to,\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'name',\n            label: 'Nome',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.name}</div>\n                    {row.description && <div className=\"text-muted-foreground text-sm\">{row.description}</div>}\n                </div>\n            ),\n        },\n        {\n            key: 'description',\n            label: 'Descrição',\n            sortable: true,\n            width: 'w-[300px]',\n            render: (value, row) => row.description || '-',\n        },\n        {\n            key: 'asset_count',\n            label: 'Ativos',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => value || 0,\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('assetTypesColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('asset-hierarchy.tipos-ativo'),\n            { search: value, sort, direction, per_page: filters.per_page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(\n            route('asset-hierarchy.tipos-ativo'),\n            { ...filters, search, sort, direction, page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('asset-hierarchy.tipos-ativo'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Tipos de Ativo\" />\n\n            <ListLayout\n                title=\"Tipos de Ativo\"\n                description=\"Gerencie os tipos de ativo do sistema\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                onCreateClick={() => entityOps.setEditSheetOpen(true)}\n                createButtonText=\"Adicionar\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    <EntityDataTable\n                        data={data}\n                        columns={columns}\n                        loading={false}\n                        onRowClick={(assetType) => router.visit(route('asset-hierarchy.tipos-ativo.show', { id: assetType.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        sortColumn={sort}\n                        sortDirection={direction}\n                        actions={(assetType) => (\n                            <EntityActionDropdown onEdit={() => entityOps.handleEdit(assetType)} onDelete={() => entityOps.handleDelete(assetType)} />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n\n            <CreateAssetTypeSheet\n                assetType={entityOps.editingItem || undefined}\n                open={entityOps.isEditSheetOpen}\n                onOpenChange={entityOps.setEditSheetOpen}\n                mode={entityOps.editingItem ? 'edit' : 'create'}\n            />\n\n            <EntityDeleteDialog\n                open={entityOps.isDeleteDialogOpen}\n                onOpenChange={entityOps.setDeleteDialogOpen}\n                entityName=\"tipo de ativo\"\n                entityLabel={entityOps.deletingItem?.name || ''}\n                onConfirm={entityOps.confirmDelete}\n            />\n\n            <EntityDependenciesDialog\n                open={entityOps.isDependenciesDialogOpen}\n                onOpenChange={entityOps.setDependenciesDialogOpen}\n                entityName=\"tipo de ativo\"\n                dependencies={entityOps.dependencies}\n            />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/tipos-ativo/create.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/tipos-ativo/edit.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/asset-hierarchy/tipos-ativo/show.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'activeTab' is defined but never used.",
                "line": 31,
                "column": 50,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 31,
                "endColumn": 59
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 71,
                "column": 69,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 71,
                "endColumn": 72,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2317,
                                2320
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2317,
                                2320
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { type BreadcrumbItem } from '@/types';\nimport { type Asset } from '@/types/asset-hierarchy';\nimport { router } from '@inertiajs/react';\nimport { Cog, Settings } from 'lucide-react';\n\nimport AssetTypeFormComponent from '@/components/AssetTypeFormComponent';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport AppLayout from '@/layouts/app-layout';\nimport ShowLayout from '@/layouts/asset-hierarchy/show-layout';\n\ninterface Props {\n    assetType: {\n        id: number;\n        name: string;\n        description: string | null;\n        created_at?: string;\n        updated_at?: string;\n    };\n    asset: {\n        data: Asset[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n    };\n    activeTab: string;\n}\n\nexport default function Show({ assetType, asset, activeTab }: Props) {\n    const breadcrumbs: BreadcrumbItem[] = [\n        {\n            title: 'Home',\n            href: '/home',\n        },\n        {\n            title: 'Hierarquia de Ativos',\n            href: '/asset-hierarchy',\n        },\n        {\n            title: 'Tipos de Ativo',\n            href: '/asset-hierarchy/tipos-ativo',\n        },\n        {\n            title: assetType.name,\n            href: '#',\n        },\n    ];\n\n    const subtitle = (\n        <span className=\"text-muted-foreground flex items-center gap-4 text-sm\">\n            <span className=\"flex items-center gap-1\">\n                <Settings className=\"h-4 w-4\" />\n                <span>Tipo de Ativo</span>\n            </span>\n            <span className=\"text-muted-foreground\">•</span>\n            <span className=\"flex items-center gap-1\">\n                <Cog className=\"h-4 w-4\" />\n                <span>{asset.total} ativos</span>\n            </span>\n        </span>\n    );\n\n    const tabs = [\n        {\n            id: 'informacoes',\n            label: 'Informações Gerais',\n            content: (\n                <div className=\"py-8\">\n                    <AssetTypeFormComponent assetType={assetType as any} initialMode=\"view\" onSuccess={() => router.reload()} />\n                </div>\n            ),\n        },\n        {\n            id: 'ativos',\n            label: 'Ativos',\n            content: (\n                <Card>\n                    <CardHeader>\n                        <CardTitle>Ativos</CardTitle>\n                        <CardDescription>Lista de ativos deste tipo</CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                        {asset.data.length > 0 ? (\n                            <div className=\"rounded-md\">\n                                <Table>\n                                    <TableHeader>\n                                        <TableRow>\n                                            <TableHead className=\"h-12\">TAG</TableHead>\n                                            <TableHead className=\"h-12\">Área</TableHead>\n                                            <TableHead className=\"h-12\">Fabricante</TableHead>\n                                            <TableHead className=\"h-12\">Ano</TableHead>\n                                        </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                        {asset.data.map((asset) => (\n                                            <TableRow\n                                                key={asset.id}\n                                                className=\"hover:bg-muted/50 h-12 cursor-pointer\"\n                                                onClick={() => router.get(route('asset-hierarchy.assets.show', asset.id))}\n                                            >\n                                                <TableCell>\n                                                    <div className=\"font-medium\">{asset.tag}</div>\n                                                </TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.area?.name ?? '-'}</TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.manufacturer?.name ?? '-'}</TableCell>\n                                                <TableCell className=\"text-muted-foreground text-sm\">{asset.manufacturing_year ?? '-'}</TableCell>\n                                            </TableRow>\n                                        ))}\n                                    </TableBody>\n                                </Table>\n                            </div>\n                        ) : (\n                            <div className=\"text-muted-foreground py-6 text-center text-sm\">Nenhum ativo cadastrado deste tipo.</div>\n                        )}\n                        <div className=\"mt-4 flex justify-center\">\n                            <Pagination>\n                                <PaginationContent>\n                                    <PaginationItem>\n                                        <PaginationPrevious\n                                            href={route('asset-hierarchy.tipos-ativo.show', {\n                                                assetType: assetType.id,\n                                                asset_page: asset.current_page - 1,\n                                                tab: 'ativos',\n                                            })}\n                                            className={asset.current_page === 1 ? 'pointer-events-none opacity-50' : ''}\n                                        />\n                                    </PaginationItem>\n\n                                    {Array.from({ length: asset.last_page }, (_, i) => i + 1).map((page) => (\n                                        <PaginationItem key={`asset-pagination-${page}`}>\n                                            <PaginationLink\n                                                href={route('asset-hierarchy.tipos-ativo.show', {\n                                                    assetType: assetType.id,\n                                                    asset_page: page,\n                                                    tab: 'ativos',\n                                                })}\n                                                isActive={page === asset.current_page}\n                                            >\n                                                {page}\n                                            </PaginationLink>\n                                        </PaginationItem>\n                                    ))}\n\n                                    <PaginationItem>\n                                        <PaginationNext\n                                            href={route('asset-hierarchy.tipos-ativo.show', {\n                                                assetType: assetType.id,\n                                                asset_page: asset.current_page + 1,\n                                                tab: 'ativos',\n                                            })}\n                                            className={asset.current_page === asset.last_page ? 'pointer-events-none opacity-50' : ''}\n                                        />\n                                    </PaginationItem>\n                                </PaginationContent>\n                            </Pagination>\n                        </div>\n                    </CardContent>\n                </Card>\n            ),\n        },\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <ShowLayout title={assetType.name} subtitle={subtitle} editRoute={route('asset-hierarchy.tipos-ativo.edit', assetType.id)} tabs={tabs} />\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/confirm-password.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/forgot-password.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/login.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/register.tsx",
        "messages": [
            {
                "ruleId": "react-hooks/exhaustive-deps",
                "severity": 1,
                "message": "React Hook useEffect has a missing dependency: 'setData'. Either include it or remove the dependency array.",
                "line": 35,
                "column": 8,
                "nodeType": "ArrayExpression",
                "endLine": 35,
                "endColumn": 10,
                "suggestions": [
                    {
                        "desc": "Update the dependencies array to be: [setData]",
                        "fix": {
                            "range": [
                                1099,
                                1101
                            ],
                            "text": "[setData]"
                        }
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 1,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Head, useForm } from '@inertiajs/react';\nimport { LoaderCircle } from 'lucide-react';\nimport { FormEventHandler, useEffect } from 'react';\n\nimport InputError from '@/components/input-error';\nimport TextLink from '@/components/text-link';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport AuthLayout from '@/layouts/auth-layout';\n\ntype RegisterForm = {\n    name: string;\n    email: string;\n    password: string;\n    password_confirmation: string;\n    timezone: string;\n};\n\nexport default function Register() {\n    const { data, setData, post, processing, errors, reset } = useForm<Required<RegisterForm>>({\n        name: '',\n        email: '',\n        password: '',\n        password_confirmation: '',\n        timezone: 'UTC',\n    });\n\n    useEffect(() => {\n        // Detect browser timezone on component mount\n        const browserTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\n        if (browserTimezone) {\n            setData('timezone', browserTimezone);\n        }\n    }, []);\n\n    const submit: FormEventHandler = (e) => {\n        e.preventDefault();\n        post(route('register'), {\n            onFinish: () => reset('password', 'password_confirmation'),\n        });\n    };\n\n    return (\n        <AuthLayout title=\"Create an account\" description=\"Enter your details below to create your account\">\n            <Head title=\"Register\" />\n            <form className=\"flex flex-col gap-6\" onSubmit={submit}>\n                <div className=\"grid gap-6\">\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"name\">Name</Label>\n                        <Input\n                            id=\"name\"\n                            type=\"text\"\n                            required\n                            autoFocus\n                            tabIndex={1}\n                            autoComplete=\"name\"\n                            value={data.name}\n                            onChange={(e) => setData('name', e.target.value)}\n                            disabled={processing}\n                            placeholder=\"Full name\"\n                        />\n                        <InputError message={errors.name} className=\"mt-2\" />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"email\">Email address</Label>\n                        <Input\n                            id=\"email\"\n                            type=\"email\"\n                            required\n                            tabIndex={2}\n                            autoComplete=\"email\"\n                            value={data.email}\n                            onChange={(e) => setData('email', e.target.value)}\n                            disabled={processing}\n                            placeholder=\"email@example.com\"\n                        />\n                        <InputError message={errors.email} />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"password\">Password</Label>\n                        <Input\n                            id=\"password\"\n                            type=\"password\"\n                            required\n                            tabIndex={3}\n                            autoComplete=\"new-password\"\n                            value={data.password}\n                            onChange={(e) => setData('password', e.target.value)}\n                            disabled={processing}\n                            placeholder=\"Password\"\n                        />\n                        <InputError message={errors.password} />\n                    </div>\n\n                    <div className=\"grid gap-2\">\n                        <Label htmlFor=\"password_confirmation\">Confirm password</Label>\n                        <Input\n                            id=\"password_confirmation\"\n                            type=\"password\"\n                            required\n                            tabIndex={4}\n                            autoComplete=\"new-password\"\n                            value={data.password_confirmation}\n                            onChange={(e) => setData('password_confirmation', e.target.value)}\n                            disabled={processing}\n                            placeholder=\"Confirm password\"\n                        />\n                        <InputError message={errors.password_confirmation} />\n                    </div>\n\n                    {/* Hidden timezone field */}\n                    <input type=\"hidden\" name=\"timezone\" value={data.timezone} />\n\n                    <Button type=\"submit\" className=\"mt-2 w-full\" tabIndex={5} disabled={processing}>\n                        {processing && <LoaderCircle className=\"h-4 w-4 animate-spin\" />}\n                        Create account\n                    </Button>\n                </div>\n\n                <div className=\"text-muted-foreground text-center text-sm\">\n                    Already have an account?{' '}\n                    <TextLink href={route('login')} tabIndex={6}>\n                        Log in\n                    </TextLink>\n                </div>\n            </form>\n        </AuthLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/reset-password.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/auth/verify-email.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/forms/index.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/home.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/items/bom-config.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 23,
                "column": 15,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 23,
                "endColumn": 18,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                639,
                                642
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                639,
                                642
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'id' is defined but never used.",
                "line": 176,
                "column": 55,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 176,
                "endColumn": 57
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'e' is defined but never used.",
                "line": 337,
                "column": 28,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 337,
                "endColumn": 29
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'e' is defined but never used.",
                "line": 622,
                "column": 47,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 622,
                "endColumn": 48
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'data' is defined but never used.",
                "line": 744,
                "column": 37,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 744,
                "endColumn": 41
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'filters' is defined but never used.",
                "line": 744,
                "column": 43,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 744,
                "endColumn": 50
            }
        ],
        "suppressedMessages": [],
        "errorCount": 6,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { type BreadcrumbItem } from '@/types';\nimport { Head } from '@inertiajs/react';\nimport { ChevronDown, ChevronRight, Edit, GripVertical, Plus, Trash2 } from 'lucide-react';\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport AppLayout from '@/layouts/app-layout';\nimport CreateLayout from '@/layouts/asset-hierarchy/create-layout';\nimport ItemModal from './components/ItemModal';\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Cadastro',\n        href: '/items',\n    },\n    {\n        title: 'Configuração BOM',\n        href: '/items/bom-config',\n    },\n];\n\ninterface Props {\n    data: {\n        data: any[];\n        current_page: number;\n        last_page: number;\n        per_page: number;\n        total: number;\n    };\n    filters: {\n        search: string;\n        sort: string;\n        direction: 'asc' | 'desc';\n        per_page: number;\n    };\n}\n\ninterface BOMItem {\n    id: string;\n    name: string;\n    description: string;\n    quantity: number;\n    unit: string;\n    children: BOMItem[];\n}\n\ninterface VisualBOMBuilderProps {\n    ref?: React.RefObject<{ handleExportBOM: () => void }>;\n}\n\nconst VisualBOMBuilder = React.forwardRef<{ handleExportBOM: () => void }, VisualBOMBuilderProps>((props, ref) => {\n    const [items, setItems] = useState<BOMItem[]>([\n        {\n            id: '1',\n            name: 'Main Assembly',\n            description: 'Top level assembly',\n            quantity: 1,\n            unit: 'ea',\n            children: [\n                {\n                    id: '1-1',\n                    name: 'Sub-Assembly A',\n                    description: 'First sub-assembly',\n                    quantity: 2,\n                    unit: 'ea',\n                    children: [\n                        { id: '1-1-1', name: 'Component X', description: 'Metal bracket', quantity: 4, unit: 'ea', children: [] },\n                        { id: '1-1-2', name: 'Component Y', description: 'Fastener set', quantity: 12, unit: 'ea', children: [] },\n                    ],\n                },\n                {\n                    id: '1-2',\n                    name: 'Sub-Assembly B',\n                    description: 'Second sub-assembly',\n                    quantity: 1,\n                    unit: 'ea',\n                    children: [{ id: '1-2-1', name: 'Component Z', description: 'Circuit board', quantity: 1, unit: 'ea', children: [] }],\n                },\n            ],\n        },\n    ]);\n\n    const [expanded, setExpanded] = useState<Record<string, boolean>>({ '1': true, '1-1': true, '1-2': true });\n    const [editingItem, setEditingItem] = useState<BOMItem | null>(null);\n    const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n    const [newItemParentId, setNewItemParentId] = useState<string | null>(null);\n    const draggingRef = useRef<string | null>(null);\n    const dragItemRef = useRef<HTMLElement | null>(null);\n    const dropTypeRef = useRef<{ parentId: string; index: number } | null>(null);\n\n    // Helper function to find and update an item in the tree\n    const findItemById = (items: BOMItem[], id: string): BOMItem | null => {\n        for (const item of items) {\n            if (item.id === id) {\n                return item;\n            }\n            if (item.children && item.children.length > 0) {\n                const found = findItemById(item.children, id);\n                if (found) return found;\n            }\n        }\n        return null;\n    };\n\n    // Helper function to update the items tree\n    const updateItemsTree = (items: BOMItem[], id: string, updateFn: (item: BOMItem) => BOMItem): BOMItem[] => {\n        return items.map((item) => {\n            if (item.id === id) {\n                return updateFn(item);\n            }\n            if (item.children && item.children.length > 0) {\n                return {\n                    ...item,\n                    children: updateItemsTree(item.children, id, updateFn),\n                };\n            }\n            return item;\n        });\n    };\n\n    // Helper function to remove an item from the tree\n    const removeItemFromTree = (items: BOMItem[], id: string): BOMItem[] => {\n        return items.reduce<BOMItem[]>((acc, item) => {\n            if (item.id === id) {\n                return acc;\n            }\n\n            if (item.children && item.children.length > 0) {\n                const newChildren = removeItemFromTree(item.children, id);\n                return [...acc, { ...item, children: newChildren }];\n            }\n\n            return [...acc, item];\n        }, []);\n    };\n\n    // Helper function to add a child to an item\n    const addChildToItem = (items: BOMItem[], parentId: string, newChild: BOMItem): BOMItem[] => {\n        return items.map((item) => {\n            if (item.id === parentId) {\n                return {\n                    ...item,\n                    children: [...item.children, newChild],\n                };\n            }\n            if (item.children && item.children.length > 0) {\n                return {\n                    ...item,\n                    children: addChildToItem(item.children, parentId, newChild),\n                };\n            }\n            return item;\n        });\n    };\n\n    // Function to toggle expanded state\n    const toggleExpand = (id: string) => {\n        setExpanded((prev) => ({\n            ...prev,\n            [id]: !prev[id],\n        }));\n    };\n\n    // Usar useEffect para garantir que todos os elementos estejam prontos para drag and drop\n    useEffect(() => {\n        // Adicionar uma classe específica para os itens arrastáveis\n        const allDraggableItems = document.querySelectorAll('.drag-handle');\n        allDraggableItems.forEach((item) => {\n            item.setAttribute('draggable', 'true');\n        });\n\n        // Limpar qualquer estado de dragging quando a página é carregada/recarregada\n        draggingRef.current = null;\n    }, [items]);\n\n    // Função para iniciar o arrasto com mousedown + dragstart\n    const handleItemMouseDown = (e: React.MouseEvent, id: string) => {\n        // Garantir que estamos no elemento correto\n        const target = e.currentTarget as HTMLElement;\n        dragItemRef.current = target;\n    };\n\n    // Function to handle drag start - simplificado e mais direto\n    const handleDragStart = (id: string) => {\n        draggingRef.current = id;\n    };\n\n    // Função atualizada para adicionar um item em uma posição específica dentro de um pai\n    const insertItemAtPosition = (items: BOMItem[], parentId: string, newItem: BOMItem, position: number): BOMItem[] => {\n        return items.map((item) => {\n            if (item.id === parentId) {\n                // Criar uma cópia dos filhos\n                const newChildren = [...item.children];\n                // Inserir o novo item na posição específica\n                newChildren.splice(position, 0, newItem);\n\n                return {\n                    ...item,\n                    children: newChildren,\n                };\n            }\n\n            if (item.children && item.children.length > 0) {\n                return {\n                    ...item,\n                    children: insertItemAtPosition(item.children, parentId, newItem, position),\n                };\n            }\n\n            return item;\n        });\n    };\n\n    // Função para obter o ID do pai de um item\n    const getParentId = (items: BOMItem[], childId: string, parentId: string = ''): string => {\n        for (const item of items) {\n            // Verificar se este item é o pai\n            const isParent = item.children.some((child) => child.id === childId);\n            if (isParent) {\n                return item.id;\n            }\n\n            // Verificar recursivamente nos filhos\n            if (item.children.length > 0) {\n                const foundParentId = getParentId(item.children, childId, item.id);\n                if (foundParentId) {\n                    return foundParentId;\n                }\n            }\n        }\n\n        return parentId;\n    };\n\n    // Função para obter a posição/índice de um item dentro dos filhos do seu pai\n    const getItemIndex = (items: BOMItem[], itemId: string): number => {\n        // Encontrar o pai\n        const parentId = getParentId(items, itemId);\n        if (!parentId) return -1;\n\n        // Encontrar o pai na árvore\n        const parent = findItemById(items, parentId);\n        if (!parent) return -1;\n\n        // Encontrar o índice do item nos filhos do pai\n        return parent.children.findIndex((child) => child.id === itemId);\n    };\n\n    // Function to handle drag over - atualizada para lidar com drop zones\n    const handleDragOver = (e: React.DragEvent, targetId: string, dropType: 'as-child' | 'reorder' = 'as-child', position?: number) => {\n        // Sempre previnir o comportamento padrão para permitir o drop\n        e.preventDefault();\n\n        // Verificar se estamos arrastando algo\n        if (!draggingRef.current) return;\n\n        // Não destacar o item sendo arrastado\n        if (draggingRef.current === targetId) return;\n\n        // Se for drop para reordenar, não precisamos da verificação de filhos\n        if (dropType === 'as-child') {\n            // Verificar se o alvo é um filho do item arrastado (para prevenir referência circular)\n            const isChildOfDragged = checkIfChildOfDragged(draggingRef.current, targetId);\n            if (isChildOfDragged) return;\n        }\n\n        // Remover qualquer destaque existente\n        document.querySelectorAll('.highlight-drop-area').forEach((el) => {\n            el.classList.remove('border-blue-500', 'border-2', 'bg-blue-50', 'highlight-drop-area');\n        });\n\n        document.querySelectorAll('.highlight-reorder-area').forEach((el) => {\n            el.classList.remove('border-blue-500', 'border-2', 'h-2', 'bg-blue-500', 'highlight-reorder-area');\n        });\n\n        // Armazenar o tipo de operação atual\n        dropTypeRef.current = dropType === 'reorder' && position !== undefined ? { parentId: targetId, index: position } : null;\n\n        if (dropType === 'reorder' && position !== undefined) {\n            // Para reordenação, precisamos destacar a drop zone\n            const container = e.currentTarget as HTMLElement;\n            if (container) {\n                container.classList.add('border-blue-500', 'border-2', 'h-2', 'bg-blue-500', 'highlight-reorder-area');\n            }\n        } else {\n            // Para adição como filho, destacar o container do item\n            const container = e.currentTarget as HTMLElement;\n            if (container) {\n                container.classList.add('border-blue-500', 'border-2', 'bg-blue-50', 'highlight-drop-area');\n            }\n        }\n\n        // Definir o efeito de drop\n        e.dataTransfer.dropEffect = 'move';\n    };\n\n    // Função helper para verificar referência circular\n    const checkIfChildOfDragged = (draggedId: string, targetId: string): boolean => {\n        const draggedItem = findItemById(items, draggedId);\n\n        const checkChildren = (item: BOMItem): boolean => {\n            if (item.id === targetId) return true;\n            if (item.children && item.children.length > 0) {\n                return item.children.some((child) => checkChildren(child));\n            }\n            return false;\n        };\n\n        return draggedItem ? draggedItem.children.some((child) => checkChildren(child)) : false;\n    };\n\n    // Function to handle drag leave - atualizada para lidar com os dois tipos de áreas\n    const handleDragLeave = (e: React.DragEvent) => {\n        // Verificar se o mouse realmente saiu do elemento (e não apenas entrou em um filho)\n        if (e.currentTarget && e.relatedTarget) {\n            const currentTarget = e.currentTarget as HTMLElement;\n            const relatedTarget = e.relatedTarget as HTMLElement;\n\n            // Se o relatedTarget é filho do currentTarget, não remover os destaques\n            if (currentTarget.contains(relatedTarget)) {\n                return;\n            }\n        }\n\n        const container = e.currentTarget as HTMLElement;\n\n        // Remover o destaque visual baseado na classe\n        if (container.classList.contains('highlight-drop-area')) {\n            container.classList.remove('border-blue-500', 'border-2', 'bg-blue-50', 'highlight-drop-area');\n        }\n\n        if (container.classList.contains('highlight-reorder-area')) {\n            container.classList.remove('border-blue-500', 'border-2', 'h-2', 'bg-blue-500', 'highlight-reorder-area');\n        }\n    };\n\n    // Function to handle drag end\n    const handleDragEnd = (e: React.DragEvent) => {\n        // Remover classes visuais de todos os elementos\n        document.querySelectorAll('.droppable-area').forEach((el) => {\n            el.classList.remove('border-blue-500', 'border-2', 'bg-blue-50', 'opacity-50');\n        });\n\n        // Limpar a referência de arrasto\n        if (draggingRef.current) {\n            const draggedElement = document.querySelector(`[data-id=\"${draggingRef.current}\"]`);\n            if (draggedElement) {\n                draggedElement.classList.remove('opacity-50');\n            }\n            draggingRef.current = null;\n        }\n    };\n\n    // Function to handle drop - atualizada para suportar reordenação\n    const handleDrop = (e: React.DragEvent, targetId: string) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Remover destaques visuais\n        document.querySelectorAll('.highlight-drop-area, .highlight-reorder-area').forEach((el) => {\n            el.classList.remove('border-blue-500', 'border-2', 'bg-blue-50', 'h-2', 'bg-blue-500', 'highlight-drop-area', 'highlight-reorder-area');\n        });\n\n        // Recuperar o ID do item arrastado\n        const draggedId = draggingRef.current;\n        if (!draggedId) {\n            try {\n                const dataId = e.dataTransfer.getData('text/plain');\n                if (dataId) {\n                    draggingRef.current = dataId;\n                } else {\n                    return;\n                }\n            } catch (error) {\n                console.error('Error getting data from dataTransfer:', error);\n                return;\n            }\n        }\n\n        const finalDraggedId = draggingRef.current;\n        if (!finalDraggedId) return;\n\n        // Não permitir drop no próprio item\n        if (finalDraggedId === targetId && dropTypeRef.current) {\n            resetDragState();\n            return;\n        }\n\n        // Verificar referência circular para adição como filho\n        if (dropTypeRef.current && checkIfChildOfDragged(finalDraggedId, targetId)) {\n            // Mostrar feedback de erro\n            const targetElement = document.querySelector(`[data-id=\"${targetId}\"]`);\n            if (targetElement) {\n                targetElement.classList.add('border-red-500', 'border-2');\n                setTimeout(() => {\n                    targetElement.classList.remove('border-red-500', 'border-2');\n                }, 1000);\n            }\n            resetDragState();\n            return;\n        }\n\n        // Obter o item arrastado\n        const draggedItem = findItemById(items, finalDraggedId);\n        if (!draggedItem) {\n            resetDragState();\n            return;\n        }\n\n        // Criar uma cópia dos itens sem o item arrastado\n        const newItems = removeItemFromTree(items, finalDraggedId);\n        let updatedItems: BOMItem[];\n\n        // Processar de acordo com o tipo de operação\n        if (dropTypeRef.current) {\n            const { parentId, index } = dropTypeRef.current;\n            updatedItems = insertItemAtPosition(newItems, parentId, draggedItem, index);\n\n            // Garantir que o nó pai esteja expandido\n            setExpanded((prev) => ({\n                ...prev,\n                [parentId]: true,\n            }));\n        } else {\n            // Adição como filho: adicionar ao final dos filhos do alvo\n            updatedItems = addChildToItem(newItems, targetId, draggedItem);\n\n            // Expandir o nó alvo\n            setExpanded((prev) => ({\n                ...prev,\n                [targetId]: true,\n            }));\n        }\n\n        // Atualizar o estado\n        setItems(updatedItems);\n\n        // Limpar estado de drag\n        resetDragState();\n    };\n\n    // Função auxiliar para resetar o estado de drag\n    const resetDragState = () => {\n        draggingRef.current = null;\n        dropTypeRef.current = null;\n        document.body.classList.remove('dragging-active');\n    };\n\n    // Function to handle edit item\n    const handleEditItem = (item: BOMItem) => {\n        setEditingItem({ ...item });\n        setIsModalOpen(true);\n    };\n\n    // Function to save edited item\n    const handleSaveEdit = () => {\n        if (!editingItem) return;\n\n        const updatedItems = updateItemsTree(items, editingItem.id, () => ({\n            ...editingItem,\n        }));\n\n        setItems(updatedItems);\n        setEditingItem(null);\n        setIsModalOpen(false);\n    };\n\n    // Function to add new item\n    const handleAddItem = (parentId: string) => {\n        const parent = findItemById(items, parentId);\n        if (!parent) return;\n\n        const newId = `${parentId}-${parent.children.length + 1}`;\n\n        const newItem: BOMItem = {\n            id: newId,\n            name: 'Novo Item',\n            description: 'Descrição',\n            quantity: 1,\n            unit: 'ea',\n            children: [],\n        };\n\n        setNewItemParentId(parentId);\n        setEditingItem(newItem);\n        setIsModalOpen(true);\n    };\n\n    // Function to save new item\n    const handleSaveNewItem = () => {\n        if (!editingItem || !newItemParentId) return;\n\n        const updatedItems = addChildToItem(items, newItemParentId, editingItem);\n        setItems(updatedItems);\n\n        // Expand the parent to show the new item\n        setExpanded((prev) => ({\n            ...prev,\n            [newItemParentId]: true,\n        }));\n\n        setEditingItem(null);\n        setNewItemParentId(null);\n        setIsModalOpen(false);\n    };\n\n    // Function to delete an item\n    const handleDeleteItem = (id: string) => {\n        // Don't allow deleting the root item\n        if (id === '1') return;\n\n        const updatedItems = removeItemFromTree(items, id);\n        setItems(updatedItems);\n    };\n\n    // Function to export BOM as JSON\n    const handleExportBOM = () => {\n        const dataStr = JSON.stringify(items, null, 2);\n        const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);\n\n        const exportFileDefaultName = 'bom.json';\n\n        const linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', exportFileDefaultName);\n        linkElement.click();\n    };\n\n    // Exporte a função handleExportBOM através do ref\n    React.useImperativeHandle(ref, () => ({\n        handleExportBOM,\n    }));\n\n    // Função para lidar com o cancelamento de edição/adição\n    const handleCancelEdit = () => {\n        setEditingItem(null);\n        setNewItemParentId(null);\n        setIsModalOpen(false);\n    };\n\n    // TreeItem component atualizado para incluir drop zones\n    const TreeItem = ({\n        node,\n        depth = 0,\n        isLast = true,\n        parentConnectorLines = [],\n    }: {\n        node: BOMItem;\n        depth?: number;\n        isLast?: boolean;\n        parentConnectorLines: boolean[];\n    }) => {\n        const isExpanded = expanded[node.id];\n        const hasChildren = node.children && node.children.length > 0;\n\n        // Create the connector lines for children of this node\n        const childConnectorLines = [...parentConnectorLines];\n        if (depth > 0) {\n            // Add connector for this level: true if not last item, false otherwise\n            childConnectorLines.push(!isLast);\n        }\n\n        return (\n            <div className=\"w-full\">\n                {/* Drop zone para inserir antes deste item (exceto para o item raiz) */}\n                {node.id !== '1' && (\n                    <div\n                        className=\"drop-zone mx-6 h-1 rounded transition-all hover:h-2 hover:bg-gray-200\"\n                        onDragOver={(e) => {\n                            // Encontrar o ID do pai e o índice atual deste nó\n                            const parentId = getParentId(items, node.id);\n                            if (!parentId) return;\n\n                            const currentIndex = getItemIndex(items, node.id);\n                            handleDragOver(e, parentId, 'reorder', currentIndex);\n                        }}\n                        onDragLeave={handleDragLeave}\n                        onDrop={(e) => {\n                            if (dropTypeRef.current) {\n                                handleDrop(e, dropTypeRef.current.parentId);\n                            }\n                        }}\n                    ></div>\n                )}\n\n                <div className=\"flex\">\n                    {/* Display connector lines from parent levels */}\n                    {parentConnectorLines.map((showLine, i) => (\n                        <div key={`connector-${i}`} className=\"relative w-6\">\n                            {showLine && <div className=\"absolute top-0 left-3 h-full w-0 border-l-2 border-gray-300\"></div>}\n                        </div>\n                    ))}\n\n                    {/* Current level connector */}\n                    {depth > 0 && (\n                        <div className=\"relative w-6\">\n                            {/* Vertical line */}\n                            <div className=\"absolute top-0 left-3 h-1/2 w-0 border-l-2 border-gray-300\"></div>\n\n                            {/* Horizontal line to the node */}\n                            <div className=\"absolute top-1/2 left-3 w-3 border-t-2 border-gray-300\"></div>\n\n                            {/* Continue vertical line for non-last items */}\n                            {!isLast && <div className=\"absolute top-1/2 left-3 h-1/2 w-0 border-l-2 border-gray-300\"></div>}\n                        </div>\n                    )}\n\n                    {/* Item content */}\n                    <div\n                        className=\"droppable-area flex-grow rounded border border-gray-200 p-2 hover:bg-gray-50\"\n                        data-draggable=\"true\"\n                        data-id={node.id}\n                        onDragOver={(e) => handleDragOver(e, node.id, 'as-child')}\n                        onDragLeave={handleDragLeave}\n                        onDrop={(e) => handleDrop(e, node.id)}\n                    >\n                        <div className=\"flex w-full items-center\">\n                            {/* Drag handle - agora com mousedown + dragstart */}\n                            <div\n                                className=\"drag-handle mr-2 cursor-grab p-1 text-gray-400 hover:text-gray-600 active:cursor-grabbing\"\n                                draggable=\"true\"\n                                onMouseDown={(e) => handleItemMouseDown(e, node.id)}\n                                onDragStart={(e) => handleDragStart(node.id)}\n                                onDragEnd={handleDragEnd}\n                                title=\"Arraste para reposicionar\"\n                            >\n                                <GripVertical size={16} />\n                            </div>\n\n                            {hasChildren && (\n                                <button className=\"mr-2 focus:outline-none\" onClick={() => toggleExpand(node.id)}>\n                                    {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n                                </button>\n                            )}\n                            {!hasChildren && <div className=\"mr-2 w-6\"></div>}\n\n                            <div className=\"grid flex-grow grid-cols-12 gap-2\">\n                                <div className=\"col-span-3 font-medium\">{node.name}</div>\n                                <div className=\"col-span-4 text-gray-600\">{node.description}</div>\n                                <div className=\"col-span-2 text-center\">\n                                    {node.quantity} {node.unit}\n                                </div>\n                                <div className=\"col-span-3 flex justify-end gap-2\">\n                                    <button\n                                        className=\"rounded p-1 text-blue-600 hover:bg-blue-100\"\n                                        onClick={() => handleEditItem(node)}\n                                        title=\"Editar item\"\n                                    >\n                                        <Edit size={16} />\n                                    </button>\n                                    <button\n                                        className=\"rounded p-1 text-green-600 hover:bg-green-100\"\n                                        onClick={() => handleAddItem(node.id)}\n                                        title=\"Adicionar item filho\"\n                                    >\n                                        <Plus size={16} />\n                                    </button>\n                                    {node.id !== '1' && (\n                                        <button\n                                            className=\"rounded p-1 text-red-600 hover:bg-red-100\"\n                                            onClick={() => handleDeleteItem(node.id)}\n                                            title=\"Remover item\"\n                                        >\n                                            <Trash2 size={16} />\n                                        </button>\n                                    )}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Render children */}\n                {hasChildren && isExpanded && (\n                    <div>\n                        {node.children.map((child, index) => (\n                            <TreeItem\n                                key={child.id}\n                                node={child}\n                                depth={depth + 1}\n                                isLast={index === node.children.length - 1}\n                                parentConnectorLines={childConnectorLines}\n                            />\n                        ))}\n\n                        {/* Drop zone para adicionar ao final dos filhos */}\n                        <div className=\"flex\">\n                            {/* Espaço para as linhas de conexão */}\n                            {[...childConnectorLines, false].map((showLine, i) => (\n                                <div key={`last-connector-${i}`} className=\"relative w-6\">\n                                    {showLine && <div className=\"absolute top-0 left-3 h-full w-0 border-l-2 border-gray-300\"></div>}\n                                </div>\n                            ))}\n\n                            <div\n                                className=\"drop-zone mx-4 h-2 flex-grow rounded transition-all hover:h-3 hover:bg-gray-200\"\n                                onDragOver={(e) => handleDragOver(e, node.id, 'reorder', node.children.length)}\n                                onDragLeave={handleDragLeave}\n                                onDrop={(e) => {\n                                    if (dropTypeRef.current) {\n                                        handleDrop(e, dropTypeRef.current.parentId);\n                                    }\n                                }}\n                            ></div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"w-full\">\n            <div className=\"overflow-auto\">\n                <div className=\"mb-4 grid w-full grid-cols-12 gap-2 rounded-lg bg-gray-100 p-3 font-semibold\">\n                    <div className=\"col-span-3\">Nome</div>\n                    <div className=\"col-span-4\">Descrição</div>\n                    <div className=\"col-span-2 text-center\">Quantidade</div>\n                    <div className=\"col-span-3 text-right\">Ações</div>\n                </div>\n\n                <div>\n                    {items.map((item, index) => (\n                        <TreeItem key={item.id} node={item} isLast={index === items.length - 1} parentConnectorLines={[]} />\n                    ))}\n                </div>\n            </div>\n\n            {/* Utilizar o componente ItemModal ao invés do modal inline */}\n            {editingItem && (\n                <ItemModal\n                    editingItem={editingItem}\n                    isNewItem={!!newItemParentId}\n                    onCancel={handleCancelEdit}\n                    onSave={newItemParentId ? handleSaveNewItem : handleSaveEdit}\n                    setEditingItem={setEditingItem}\n                    isOpen={isModalOpen}\n                    onOpenChange={setIsModalOpen}\n                />\n            )}\n        </div>\n    );\n});\n\nexport default function BomConfig({ data, filters }: Props) {\n    const visualBomRef = React.useRef<{ handleExportBOM: () => void }>(null);\n\n    const handleExport = () => {\n        visualBomRef.current?.handleExportBOM();\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Configuração BOM\" />\n\n            <CreateLayout\n                title=\"Configuração BOM\"\n                subtitle=\"Gerencie as configurações de BOM do sistema\"\n                breadcrumbs={breadcrumbs}\n                backRoute=\"/items\"\n                onSave={handleExport}\n                saveButtonText=\"Exportar BOM\"\n            >\n                <VisualBOMBuilder ref={visualBomRef} />\n            </CreateLayout>\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/items/components/ItemModal.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/items/index.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/maintenance/dashboard-maintenance.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'selectedPath' is assigned a value but never used.",
                "line": 35,
                "column": 12,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 35,
                "endColumn": 24
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'setSelectedPath' is assigned a value but never used.",
                "line": 35,
                "column": 26,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 35,
                "endColumn": 41
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import ActionShortcuts, { type PathItem } from '@/components/ActionShortcuts';\nimport AppLayout from '@/layouts/app-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Head, router } from '@inertiajs/react';\nimport {\n    AlertTriangle,\n    Building,\n    Building2,\n    Calendar,\n    ClipboardList,\n    Clock,\n    Edit,\n    Factory,\n    Layers,\n    MapPin,\n    Play,\n    Plus,\n    RotateCcw,\n    Settings,\n} from 'lucide-react';\nimport { useState } from 'react';\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Manutenção',\n        href: '/maintenance/dashboard',\n    },\n];\n\nexport default function DashboardMaintenance() {\n    const [selectedPath, setSelectedPath] = useState<string | null>(null);\n\n    const paths: Record<string, PathItem> = {\n        maintenance_plans: {\n            title: 'Planos de Manutenção',\n            icon: ClipboardList,\n            description: 'Gestão da manutenção preventiva',\n            actions: [\n                {\n                    name: 'Planejar Execução',\n                    icon: Calendar,\n                    comingSoon: true,\n                    description: 'Agendar e organizar execuções de manutenção',\n                },\n                {\n                    name: 'Executar Tarefa',\n                    icon: Play,\n                    comingSoon: true,\n                    description: 'Executar tarefas de manutenção programadas',\n                },\n                {\n                    name: 'Criar Novo Plano',\n                    icon: Plus,\n                    comingSoon: true,\n                    description: 'Configurar novos planos de manutenção preventiva',\n                },\n            ],\n        },\n        asset: {\n            title: 'Ativos',\n            icon: Settings,\n            description: 'Gestão de ativos',\n            actions: [\n                {\n                    name: 'Executar Rotina',\n                    icon: RotateCcw,\n                    comingSoon: true,\n                    description: 'Executar rotinas de manutenção',\n                },\n                {\n                    name: 'Reportar Problema',\n                    icon: AlertTriangle,\n                    comingSoon: true,\n                    description: 'Relatar problemas e falhas em ativos',\n                },\n                {\n                    name: 'Editar Ativo',\n                    icon: Edit,\n                    comingSoon: true,\n                    description: 'Atualizar informações e configurações',\n                },\n                {\n                    name: 'Turnos',\n                    icon: Clock,\n                    description: 'Configurar turnos de trabalho',\n                    href: '/asset-hierarchy/shifts',\n                },\n            ],\n        },\n        asset_hierarchy: {\n            title: 'Hierarquia de Ativos',\n            icon: Building,\n            description: 'Organizar estrutura dos ativos',\n            actions: [\n                {\n                    name: 'Empresas',\n                    icon: Building2,\n                    comingSoon: true,\n                    description: 'Gerenciar informações das empresas',\n                },\n                {\n                    name: 'Plantas',\n                    icon: Factory,\n                    comingSoon: true,\n                    description: 'Configurar e organizar plantas industriais',\n                },\n                {\n                    name: 'Áreas',\n                    icon: MapPin,\n                    comingSoon: true,\n                    description: 'Definir e gerenciar áreas operacionais',\n                },\n                {\n                    name: 'Setores',\n                    icon: Layers,\n                    comingSoon: true,\n                    description: 'Organizar setores dentro das áreas',\n                },\n            ],\n        },\n    };\n\n    const handleActionClick = (pathKey: string, actionName: string) => {\n        const path = paths[pathKey as keyof typeof paths];\n        const action = path.actions.find((a) => a.name === actionName);\n\n        if (action && action.href) {\n            router.visit(action.href);\n        }\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Dashboard - Manutenção\" />\n            <div className=\"flex h-full flex-1 flex-col gap-6 rounded-xl p-6\">\n                {/* Charts Section */}\n                <div>\n                    <h2 className=\"text-foreground mb-6 text-xl font-semibold\">Dashboard de Manutenção</h2>\n                    <div className=\"grid grid-cols-1 gap-6 md:grid-cols-3\">\n                        {/* Chart 1 - Ativos por Status */}\n                        <div className=\"bg-card border-border rounded-xl border p-6\">\n                            <div className=\"mb-4\">\n                                <h3 className=\"text-foreground mb-2 font-semibold\">Ativos por Status</h3>\n                                <p className=\"text-muted-foreground text-sm\">Distribuição dos ativos por status operacional</p>\n                            </div>\n                            <div className=\"bg-muted flex h-48 items-center justify-center rounded-lg\">\n                                <p className=\"text-muted-foreground text-sm\">Gráfico de Donut - Status dos Ativos</p>\n                            </div>\n                        </div>\n\n                        {/* Chart 2 - Manutenções Mensais */}\n                        <div className=\"bg-card border-border rounded-xl border p-6\">\n                            <div className=\"mb-4\">\n                                <h3 className=\"text-foreground mb-2 font-semibold\">Manutenções Mensais</h3>\n                                <p className=\"text-muted-foreground text-sm\">Histórico de manutenções realizadas nos últimos 12 meses</p>\n                            </div>\n                            <div className=\"bg-muted flex h-48 items-center justify-center rounded-lg\">\n                                <p className=\"text-muted-foreground text-sm\">Gráfico de Barras - Manutenções por Mês</p>\n                            </div>\n                        </div>\n\n                        {/* Chart 3 - Eficiência por Área */}\n                        <div className=\"bg-card border-border rounded-xl border p-6\">\n                            <div className=\"mb-4\">\n                                <h3 className=\"text-foreground mb-2 font-semibold\">Eficiência por Área</h3>\n                                <p className=\"text-muted-foreground text-sm\">Indicadores de eficiência das diferentes áreas produtivas</p>\n                            </div>\n                            <div className=\"bg-muted flex h-48 items-center justify-center rounded-lg\">\n                                <p className=\"text-muted-foreground text-sm\">Gráfico de Linha - Eficiência por Área</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {/* ActionShortcuts Component */}\n                <ActionShortcuts paths={paths} onActionClick={handleActionClick} />\n\n                {/* Footer Info */}\n                <div className=\"text-muted-foreground mt-12 text-center text-sm\">\n                    <p>Sistema de Gestão de Manutenção - Para suporte técnico, entre em contato com a equipe de TI.</p>\n                </div>\n            </div>\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/maintenance/routines/History.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 73,
                "column": 17,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 73,
                "endColumn": 20,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2472,
                                2475
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2472,
                                2475
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 75,
                "column": 14,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 75,
                "endColumn": 17,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2536,
                                2539
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2536,
                                2539
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 76,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 76,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2560,
                                2563
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2560,
                                2563
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'dailyTrend' is defined but never used.",
                "line": 94,
                "column": 69,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 94,
                "endColumn": 79
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'filters' is defined but never used.",
                "line": 94,
                "column": 101,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 94,
                "endColumn": 108
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'filterOptions' is defined but never used.",
                "line": 94,
                "column": 110,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 94,
                "endColumn": 123
            }
        ],
        "suppressedMessages": [],
        "errorCount": 6,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useExportManager } from '@/hooks/use-export-manager';\nimport AppLayout from '@/layouts/app-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Head, Link } from '@inertiajs/react';\nimport { BarChart3, Calendar, Clock, Download, Minus, TrendingDown, TrendingUp, Users } from 'lucide-react';\nimport React, { useState } from 'react';\nimport { toast } from 'sonner';\n\n// Simple utility functions inline\nconst formatDate = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString();\n};\n\nconst formatDuration = (minutes: number | null): string => {\n    if (!minutes || minutes <= 0) return 'N/A';\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes === 0 ? `${hours}h` : `${hours}h ${remainingMinutes}m`;\n};\n\nconst getRelativeTime = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return formatDate(dateString);\n};\n\ninterface Stats {\n    total: number;\n    completed: number;\n    in_progress: number;\n    failed: number;\n    completion_rate: number;\n    trend: {\n        direction: 'up' | 'down' | 'stable';\n        percentage: number;\n    };\n}\n\ninterface ExecutionSummary {\n    id: number;\n    routine_name: string;\n    asset_tag: string | null;\n    executor_name: string;\n    status: string;\n    started_at: string;\n    duration_minutes: number | null;\n    progress: number;\n}\n\ninterface PerformanceMetrics {\n    average_duration_minutes: number;\n    median_duration_minutes: number;\n    fastest_execution_minutes: number;\n    slowest_execution_minutes: number;\n    total_execution_time_hours: number;\n}\n\ninterface HistoryProps {\n    stats: Stats;\n    recentExecutions: ExecutionSummary[];\n    dailyTrend: any[];\n    performanceMetrics: PerformanceMetrics;\n    filters: any;\n    filterOptions: any;\n}\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Maintenance',\n        href: '/maintenance/dashboard',\n    },\n    {\n        title: 'Execution History',\n        href: '/maintenance/routines/history',\n    },\n];\n\nconst History: React.FC<HistoryProps> = ({ stats, recentExecutions, dailyTrend, performanceMetrics, filters, filterOptions }) => {\n    const [activeTab, setActiveTab] = useState('overview');\n    const [isExporting, setIsExporting] = useState(false);\n    const { addExport, updateExport } = useExportManager();\n\n    const getTrendIcon = (direction: string) => {\n        switch (direction) {\n            case 'up':\n                return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n            case 'down':\n                return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n            default:\n                return <Minus className=\"h-4 w-4 text-gray-600\" />;\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case 'completed':\n                return 'bg-green-100 text-green-800';\n            case 'in_progress':\n                return 'bg-blue-100 text-blue-800';\n            case 'pending':\n                return 'bg-yellow-100 text-yellow-800';\n            case 'cancelled':\n                return 'bg-red-100 text-red-800';\n            default:\n                return 'bg-gray-100 text-gray-800';\n        }\n    };\n\n    // Simplified components\n    const ExecutionFilters = () => <div className=\"text-muted-foreground text-sm\">Filters component will be implemented here</div>;\n\n    const ExecutionTrendChart = () => (\n        <div className=\"bg-muted flex h-64 items-center justify-center rounded-lg\">\n            <div className=\"text-center\">\n                <BarChart3 className=\"text-muted-foreground mx-auto mb-2 h-8 w-8\" />\n                <p className=\"text-muted-foreground text-sm\">Trend chart will be implemented here</p>\n            </div>\n        </div>\n    );\n\n    const RecentExecutionsList = () => (\n        <div className=\"space-y-3\">\n            {recentExecutions.map((execution) => (\n                <Link\n                    key={execution.id}\n                    href={`/maintenance/routines/${execution.id}`}\n                    className=\"hover:bg-muted/50 flex cursor-pointer items-center justify-between rounded-lg border p-3 transition-colors\"\n                >\n                    <div className=\"flex-1\">\n                        <div className=\"font-medium\">{execution.routine_name}</div>\n                        <div className=\"text-muted-foreground text-sm\">\n                            {execution.asset_tag} • {execution.executor_name}\n                        </div>\n                    </div>\n                    <div className=\"text-right\">\n                        <Badge className={getStatusColor(execution.status)}>{execution.status.replace('_', ' ')}</Badge>\n                        <div className=\"text-muted-foreground mt-1 text-xs\">{getRelativeTime(execution.started_at)}</div>\n                    </div>\n                </Link>\n            ))}\n        </div>\n    );\n\n    const PerformanceMetricsWidget = () => (\n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-lg\">Average Duration</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{formatDuration(performanceMetrics.average_duration_minutes)}</div>\n                    <p className=\"text-muted-foreground text-sm\">Per execution</p>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-lg\">Total Time</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"text-2xl font-bold\">{performanceMetrics.total_execution_time_hours}h</div>\n                    <p className=\"text-muted-foreground text-sm\">All executions</p>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"text-lg\">Fastest/Slowest</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Fastest:</span>\n                            <span className=\"font-medium\">{formatDuration(performanceMetrics.fastest_execution_minutes)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                            <span className=\"text-sm\">Slowest:</span>\n                            <span className=\"font-medium\">{formatDuration(performanceMetrics.slowest_execution_minutes)}</span>\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n        </div>\n    );\n\n    const handleExportReport = async () => {\n        setIsExporting(true);\n\n        try {\n            // Get recent execution IDs for batch export\n            const executionIds = recentExecutions.slice(0, 10).map((e) => e.id);\n\n            const response = await fetch('/maintenance/routines/export/batch', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content') || '',\n                },\n                body: JSON.stringify({\n                    execution_ids: executionIds,\n                    format: 'pdf',\n                    template: 'summary',\n                    grouping: 'by_asset',\n                    include_cover_page: true,\n                    include_index: true,\n                    separate_files: false,\n                    include_images: true,\n                    compress_images: true,\n                    paper_size: 'A4',\n                    delivery: {\n                        method: 'download',\n                    },\n                }),\n            });\n\n            const data = await response.json();\n\n            if (!response.ok) {\n                throw new Error(data.error || 'Export failed');\n            }\n\n            // Add to export manager\n            addExport({\n                id: data.export_id,\n                type: 'batch',\n                description: `History Report - ${executionIds.length} executions`,\n                status: 'processing',\n                progress: 0,\n            });\n\n            // Poll for status\n            const pollInterval = setInterval(async () => {\n                try {\n                    const statusResponse = await fetch(`/maintenance/routines/exports/${data.export_id}/status`, {\n                        headers: {\n                            'X-Requested-With': 'XMLHttpRequest',\n                        },\n                    });\n                    const statusData = await statusResponse.json();\n\n                    // Update progress\n                    if (statusData.progress_percentage) {\n                        updateExport(data.export_id, {\n                            progress: statusData.progress_percentage,\n                        });\n                    }\n\n                    if (statusData.status === 'completed' && statusData.download_url) {\n                        clearInterval(pollInterval);\n\n                        // Update export manager\n                        updateExport(data.export_id, {\n                            status: 'completed',\n                            downloadUrl: statusData.download_url,\n                            completedAt: new Date(),\n                        });\n\n                        // No longer auto-download - user will click the toast or dropdown to download\n                    } else if (statusData.status === 'failed') {\n                        clearInterval(pollInterval);\n\n                        updateExport(data.export_id, {\n                            status: 'failed',\n                            error: 'Export failed. Please try again.',\n                        });\n                    }\n                } catch (error) {\n                    console.error('Status polling error:', error);\n                }\n            }, 2000);\n\n            // Timeout after 5 minutes\n            setTimeout(() => {\n                clearInterval(pollInterval);\n            }, 300000);\n        } catch (error) {\n            console.error('Export error:', error);\n            toast.error(error instanceof Error ? error.message : 'Failed to start export');\n        } finally {\n            setIsExporting(false);\n        }\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Execution History - Maintenance\" />\n\n            <div className=\"flex h-full flex-1 flex-col gap-6 rounded-xl p-6\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between\">\n                    <div>\n                        <h1 className=\"text-foreground text-2xl font-semibold\">Execution History</h1>\n                        <p className=\"text-muted-foreground\">Track and analyze routine execution performance</p>\n                    </div>\n                    <div className=\"flex gap-3\">\n                        <Button variant=\"outline\" asChild>\n                            <Link href=\"/maintenance/routines\">\n                                <BarChart3 className=\"mr-2 h-4 w-4\" />\n                                View All Executions\n                            </Link>\n                        </Button>\n                        <Button variant=\"outline\" onClick={handleExportReport} disabled={isExporting}>\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            {isExporting ? 'Starting Export...' : 'Export Report'}\n                        </Button>\n                    </div>\n                </div>\n\n                {/* Filters */}\n                <Card>\n                    <CardHeader>\n                        <CardTitle className=\"text-lg\">Filters</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                        <ExecutionFilters />\n                    </CardContent>\n                </Card>\n\n                {/* Overview Stats */}\n                <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4\">\n                    <Card>\n                        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                            <CardTitle className=\"text-sm font-medium\">Total Executions</CardTitle>\n                            <Calendar className=\"text-muted-foreground h-4 w-4\" />\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"text-2xl font-bold\">{stats.total.toLocaleString()}</div>\n                            <div className=\"text-muted-foreground flex items-center text-xs\">\n                                {getTrendIcon(stats.trend.direction)}\n                                <span className=\"ml-1\">{stats.trend.percentage}% from last period</span>\n                            </div>\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                            <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n                            <Users className=\"text-muted-foreground h-4 w-4\" />\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"text-2xl font-bold text-green-600\">{stats.completed.toLocaleString()}</div>\n                            <div className=\"text-muted-foreground text-xs\">{stats.completion_rate}% completion rate</div>\n                            <Progress value={stats.completion_rate} className=\"mt-2\" />\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                            <CardTitle className=\"text-sm font-medium\">In Progress</CardTitle>\n                            <Clock className=\"text-muted-foreground h-4 w-4\" />\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"text-2xl font-bold text-blue-600\">{stats.in_progress.toLocaleString()}</div>\n                            <div className=\"text-muted-foreground text-xs\">\n                                {stats.total > 0 ? ((stats.in_progress / stats.total) * 100).toFixed(1) : 0}% of total\n                            </div>\n                        </CardContent>\n                    </Card>\n\n                    <Card>\n                        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                            <CardTitle className=\"text-sm font-medium\">Failed/Cancelled</CardTitle>\n                            <TrendingDown className=\"text-muted-foreground h-4 w-4\" />\n                        </CardHeader>\n                        <CardContent>\n                            <div className=\"text-2xl font-bold text-red-600\">{stats.failed.toLocaleString()}</div>\n                            <div className=\"text-muted-foreground text-xs\">\n                                {stats.total > 0 ? ((stats.failed / stats.total) * 100).toFixed(1) : 0}% of total\n                            </div>\n                        </CardContent>\n                    </Card>\n                </div>\n\n                {/* Main Content Tabs */}\n                <Tabs value={activeTab} onValueChange={setActiveTab}>\n                    <TabsList className=\"grid w-full grid-cols-3\">\n                        <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                        <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n                        <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"overview\" className=\"space-y-6\">\n                        <div className=\"grid grid-cols-1 gap-6 lg:grid-cols-2\">\n                            {/* Recent Executions */}\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Recent Executions</CardTitle>\n                                    <CardDescription>Latest execution activity</CardDescription>\n                                </CardHeader>\n                                <CardContent>\n                                    <RecentExecutionsList />\n                                    <div className=\"mt-4\">\n                                        <Button variant=\"outline\" className=\"w-full\" asChild>\n                                            <Link href=\"/maintenance/routines\">View All Executions</Link>\n                                        </Button>\n                                    </div>\n                                </CardContent>\n                            </Card>\n\n                            {/* Execution Status Distribution */}\n                            <Card>\n                                <CardHeader>\n                                    <CardTitle>Status Distribution</CardTitle>\n                                    <CardDescription>Breakdown of execution statuses</CardDescription>\n                                </CardHeader>\n                                <CardContent className=\"space-y-4\">\n                                    <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Badge className={getStatusColor('completed')}>Completed</Badge>\n                                        </div>\n                                        <span className=\"font-medium\">{stats.completed}</span>\n                                    </div>\n                                    <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Badge className={getStatusColor('in_progress')}>In Progress</Badge>\n                                        </div>\n                                        <span className=\"font-medium\">{stats.in_progress}</span>\n                                    </div>\n                                    <div className=\"flex items-center justify-between\">\n                                        <div className=\"flex items-center space-x-2\">\n                                            <Badge className={getStatusColor('cancelled')}>Failed/Cancelled</Badge>\n                                        </div>\n                                        <span className=\"font-medium\">{stats.failed}</span>\n                                    </div>\n                                </CardContent>\n                            </Card>\n                        </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"trends\" className=\"space-y-6\">\n                        <Card>\n                            <CardHeader>\n                                <CardTitle>Execution Trends</CardTitle>\n                                <CardDescription>Daily execution activity over the last 30 days</CardDescription>\n                            </CardHeader>\n                            <CardContent>\n                                <ExecutionTrendChart />\n                            </CardContent>\n                        </Card>\n                    </TabsContent>\n\n                    <TabsContent value=\"performance\" className=\"space-y-6\">\n                        <PerformanceMetricsWidget />\n                    </TabsContent>\n                </Tabs>\n            </div>\n        </AppLayout>\n    );\n};\n\nexport default History;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/maintenance/routines/Index.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 21,
                "column": 46,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 21,
                "endColumn": 49,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1228,
                                1231
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1228,
                                1231
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'sortOptions' is defined but never used.",
                "line": 54,
                "column": 94,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 54,
                "endColumn": 105
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'handleSelectAll' is assigned a value but never used.",
                "line": 243,
                "column": 11,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 243,
                "endColumn": 26
            }
        ],
        "suppressedMessages": [],
        "errorCount": 3,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { ColumnVisibility } from '@/components/data-table';\nimport { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { EntityPagination } from '@/components/shared/EntityPagination';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useSorting } from '@/hooks/useSorting';\nimport AppLayout from '@/layouts/app-layout';\nimport ListLayout from '@/layouts/asset-hierarchy/list-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport type { ExecutionFilters, FilterOption, PaginatedExecutions, SortOption } from '@/types/maintenance';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { Download, Eye, FileText, Filter } from 'lucide-react';\nimport React, { useState } from 'react';\n\n// Declare the global route function from Ziggy\ndeclare const route: (name: string, params?: any) => string;\n\ninterface ExecutionIndexProps {\n    executions: PaginatedExecutions;\n    filters: ExecutionFilters;\n    filterOptions: {\n        assets: FilterOption[];\n        routines: FilterOption[];\n        executors: FilterOption[];\n        statuses: FilterOption[];\n    };\n    sortOptions: SortOption[];\n    currentSort: {\n        column: string;\n        direction: 'asc' | 'desc';\n    };\n}\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Maintenance',\n        href: '/maintenance/dashboard',\n    },\n    {\n        title: 'Executions',\n        href: '/maintenance/routines',\n    },\n];\n\nconst ExecutionIndex: React.FC<ExecutionIndexProps> = ({ executions, filters, filterOptions, sortOptions, currentSort }) => {\n    const [selectedExecutions, setSelectedExecutions] = useState<number[]>([]);\n    const [showFilters, setShowFilters] = useState(false);\n    const [localFilters, setLocalFilters] = useState(filters);\n    const [search, setSearch] = useState(filters.search || '');\n\n    // Use centralized sorting hook\n    const { sort, direction, handleSort } = useSorting({\n        routeName: 'maintenance.routines.index',\n        initialSort: currentSort.column || 'id',\n        initialDirection: currentSort.direction || 'desc',\n        additionalParams: {\n            ...localFilters,\n            search,\n        },\n    });\n\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const savedVisibility = localStorage.getItem('executionsColumnsVisibility');\n            if (savedVisibility) {\n                return JSON.parse(savedVisibility);\n            }\n        }\n        return {\n            id: true,\n            routine_name: true,\n            asset_tag: true,\n            executor_name: true,\n            status: true,\n            started_at: true,\n            duration: true,\n        };\n    });\n\n    // Use data from server\n    const data = executions.data;\n    const pagination = {\n        current_page: executions.current_page,\n        last_page: executions.last_page,\n        per_page: executions.per_page,\n        total: executions.total,\n        from: executions.from,\n        to: executions.to,\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case 'completed':\n                return 'bg-green-100 text-green-800';\n            case 'in_progress':\n                return 'bg-blue-100 text-blue-800';\n            case 'pending':\n                return 'bg-yellow-100 text-yellow-800';\n            case 'cancelled':\n                return 'bg-red-100 text-red-800';\n            default:\n                return 'bg-gray-100 text-gray-800';\n        }\n    };\n\n    const formatDate = (dateString: string | null) => {\n        if (!dateString) return 'N/A';\n        return new Date(dateString).toLocaleString();\n    };\n\n    const columns: ColumnConfig[] = [\n        {\n            key: 'id',\n            label: 'ID',\n            sortable: true,\n            width: 'w-[80px]',\n            render: (value) => `#${value}`,\n        },\n        {\n            key: 'routine_name',\n            label: 'Routine',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value, row) => (\n                <div>\n                    <div className=\"font-medium\">{row.routine.name}</div>\n                    {row.routine.description && <div className=\"text-muted-foreground text-sm\">{row.routine.description}</div>}\n                </div>\n            ),\n        },\n        {\n            key: 'asset_tag',\n            label: 'Asset',\n            sortable: false,\n            width: 'w-[150px]',\n            render: (value, row) => (row.assets.length > 0 ? row.assets[0].tag : row.primary_asset_tag || 'N/A'),\n        },\n        {\n            key: 'executor_name',\n            label: 'Executor',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value, row) => row.executor.name,\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            sortable: true,\n            width: 'w-[120px]',\n            render: (value, row) => (\n                <div className=\"flex items-center gap-2\">\n                    <Badge className={getStatusColor(row.status)}>{row.status.replace('_', ' ')}</Badge>\n                    {row.status === 'in_progress' && <span className=\"text-muted-foreground text-xs\">{row.progress}%</span>}\n                </div>\n            ),\n        },\n        {\n            key: 'started_at',\n            label: 'Started At',\n            sortable: true,\n            width: 'w-[180px]',\n            render: (value) => formatDate(value),\n        },\n        {\n            key: 'duration',\n            label: 'Duration',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value, row) => (row.duration_minutes ? `${row.duration_minutes}m` : 'N/A'),\n        },\n    ];\n\n    const handleColumnVisibilityChange = (columnId: string, value: boolean) => {\n        const newVisibility = {\n            ...columnVisibility,\n            [columnId]: value,\n        };\n        setColumnVisibility(newVisibility);\n        localStorage.setItem('executionsColumnsVisibility', JSON.stringify(newVisibility));\n    };\n\n    const handleSearch = (value: string) => {\n        setSearch(value);\n        router.get(\n            route('maintenance.routines.index'),\n            { ...localFilters, search: value, sort, direction },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const applyFilters = () => {\n        router.get(\n            route('maintenance.routines.index'),\n            {\n                ...localFilters,\n                search,\n                sort,\n                direction,\n            },\n            {\n                preserveState: true,\n                preserveScroll: true,\n            },\n        );\n    };\n\n    const handlePageChange = (page: number) => {\n        router.get(\n            route('maintenance.routines.index'),\n            { ...filters, search, sort, direction, page },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handlePerPageChange = (perPage: number) => {\n        router.get(\n            route('maintenance.routines.index'),\n            { ...filters, search, sort, direction, per_page: perPage, page: 1 },\n            { preserveState: true, preserveScroll: true },\n        );\n    };\n\n    const handleExportSelected = () => {\n        if (selectedExecutions.length === 0) return;\n        // TODO: Implement batch export functionality\n        console.log('Export selected:', selectedExecutions);\n    };\n\n    const handleExportSingle = (executionId: number) => {\n        // TODO: Implement single export functionality\n        console.log('Export single:', executionId);\n    };\n\n    const handleSelectAll = (checked: boolean) => {\n        if (checked) {\n            setSelectedExecutions(data.map((e) => e.id));\n        } else {\n            setSelectedExecutions([]);\n        }\n    };\n\n    const handleSelectExecution = (id: number, checked: boolean) => {\n        if (checked) {\n            setSelectedExecutions([...selectedExecutions, id]);\n        } else {\n            setSelectedExecutions(selectedExecutions.filter((eId) => eId !== id));\n        }\n    };\n\n    // Extended table with selection checkboxes\n    const columnsWithSelection: ColumnConfig[] = [\n        {\n            key: '_selection',\n            label: '',\n            width: 'w-[40px]',\n            render: (value, row) => (\n                <Checkbox\n                    checked={selectedExecutions.includes(row.id)}\n                    onCheckedChange={(checked) => handleSelectExecution(row.id, checked as boolean)}\n                    onClick={(e) => e.stopPropagation()}\n                />\n            ),\n        },\n        ...columns,\n    ];\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Executions - Maintenance\" />\n\n            <ListLayout\n                title=\"Routine Executions\"\n                description=\"View and manage all routine execution records\"\n                searchValue={search}\n                onSearchChange={handleSearch}\n                createButtonText=\"\"\n                actions={\n                    <div className=\"flex items-center gap-2\">\n                        <Button variant=\"outline\" onClick={() => setShowFilters(!showFilters)}>\n                            <Filter className=\"mr-2 h-4 w-4\" />\n                            Filters\n                        </Button>\n                        <Button variant=\"outline\" onClick={handleExportSelected} disabled={selectedExecutions.length === 0}>\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            Export Selected ({selectedExecutions.length})\n                        </Button>\n                        <ColumnVisibility\n                            columns={columns.map((col) => ({\n                                id: col.key,\n                                header: col.label,\n                                cell: () => null,\n                                width: 'w-auto',\n                            }))}\n                            columnVisibility={columnVisibility}\n                            onColumnVisibilityChange={handleColumnVisibilityChange}\n                        />\n                    </div>\n                }\n            >\n                <div className=\"space-y-4\">\n                    {/* Filters Panel */}\n                    {showFilters && (\n                        <Card>\n                            <CardHeader>\n                                <CardTitle className=\"text-lg\">Filters</CardTitle>\n                            </CardHeader>\n                            <CardContent>\n                                <div className=\"grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4\">\n                                    <div>\n                                        <label className=\"mb-2 block text-sm font-medium\">Status</label>\n                                        <Select\n                                            value={localFilters.status?.[0] || ''}\n                                            onValueChange={(value) => setLocalFilters({ ...localFilters, status: value ? [value] : [] })}\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"All statuses\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                <SelectItem value=\"\">All statuses</SelectItem>\n                                                {filterOptions.statuses.map((status) => (\n                                                    <SelectItem key={status.value} value={status.value.toString()}>\n                                                        {status.label}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </div>\n\n                                    <div>\n                                        <label className=\"mb-2 block text-sm font-medium\">Asset</label>\n                                        <Select\n                                            value={localFilters.asset_ids?.[0]?.toString() || ''}\n                                            onValueChange={(value) => setLocalFilters({ ...localFilters, asset_ids: value ? [parseInt(value)] : [] })}\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"All assets\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                <SelectItem value=\"\">All assets</SelectItem>\n                                                {filterOptions.assets.map((asset) => (\n                                                    <SelectItem key={asset.value} value={asset.value.toString()}>\n                                                        {asset.label}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </div>\n\n                                    <div>\n                                        <label className=\"mb-2 block text-sm font-medium\">Routine</label>\n                                        <Select\n                                            value={localFilters.routine_ids?.[0]?.toString() || ''}\n                                            onValueChange={(value) =>\n                                                setLocalFilters({ ...localFilters, routine_ids: value ? [parseInt(value)] : [] })\n                                            }\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"All routines\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                <SelectItem value=\"\">All routines</SelectItem>\n                                                {filterOptions.routines.map((routine) => (\n                                                    <SelectItem key={routine.value} value={routine.value.toString()}>\n                                                        {routine.label}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </div>\n\n                                    <div>\n                                        <label className=\"mb-2 block text-sm font-medium\">Executor</label>\n                                        <Select\n                                            value={localFilters.executor_ids?.[0]?.toString() || ''}\n                                            onValueChange={(value) =>\n                                                setLocalFilters({ ...localFilters, executor_ids: value ? [parseInt(value)] : [] })\n                                            }\n                                        >\n                                            <SelectTrigger>\n                                                <SelectValue placeholder=\"All executors\" />\n                                            </SelectTrigger>\n                                            <SelectContent>\n                                                <SelectItem value=\"\">All executors</SelectItem>\n                                                {filterOptions.executors.map((executor) => (\n                                                    <SelectItem key={executor.value} value={executor.value.toString()}>\n                                                        {executor.label}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n                                    </div>\n                                </div>\n\n                                <div className=\"mt-4 flex justify-end gap-2\">\n                                    <Button\n                                        variant=\"outline\"\n                                        onClick={() => {\n                                            setLocalFilters({});\n                                            router.get(\n                                                route('maintenance.routines.index'),\n                                                {},\n                                                {\n                                                    preserveState: true,\n                                                    preserveScroll: true,\n                                                },\n                                            );\n                                        }}\n                                    >\n                                        Clear Filters\n                                    </Button>\n                                    <Button onClick={applyFilters}>Apply Filters</Button>\n                                </div>\n                            </CardContent>\n                        </Card>\n                    )}\n\n                    <EntityDataTable\n                        data={data}\n                        columns={columnsWithSelection}\n                        loading={false}\n                        onRowClick={(execution) => router.visit(route('maintenance.routines.show', { id: execution.id }))}\n                        columnVisibility={columnVisibility}\n                        onSort={handleSort}\n                        actions={(execution) => (\n                            <EntityActionDropdown\n                                additionalActions={[\n                                    {\n                                        label: 'View',\n                                        icon: <Eye className=\"h-4 w-4\" />,\n                                        onClick: () => router.visit(route('maintenance.routines.show', { id: execution.id })),\n                                    },\n                                    {\n                                        label: 'Export',\n                                        icon: <FileText className=\"h-4 w-4\" />,\n                                        onClick: () => handleExportSingle(execution.id),\n                                    },\n                                ]}\n                            />\n                        )}\n                    />\n\n                    <EntityPagination pagination={pagination} onPageChange={handlePageChange} onPerPageChange={handlePerPageChange} />\n                </div>\n            </ListLayout>\n        </AppLayout>\n    );\n};\n\nexport default ExecutionIndex;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/maintenance/routines/Show.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/maintenance/routine-dashboard.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 84,
                "column": 17,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 84,
                "endColumn": 20,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2467,
                                2470
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2467,
                                2470
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 86,
                "column": 14,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 86,
                "endColumn": 17,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2531,
                                2534
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2531,
                                2534
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 87,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 87,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2555,
                                2558
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2555,
                                2558
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'performanceMetrics' is defined but never used.",
                "line": 141,
                "column": 99,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 141,
                "endColumn": 117
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'filters' is defined but never used.",
                "line": 141,
                "column": 119,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 141,
                "endColumn": 126
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'filterOptions' is defined but never used.",
                "line": 141,
                "column": 128,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 141,
                "endColumn": 141
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'setColumnVisibility' is assigned a value but never used.",
                "line": 173,
                "column": 30,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 173,
                "endColumn": 49
            },
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'getTrendIcon' is assigned a value but never used.",
                "line": 261,
                "column": 11,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 261,
                "endColumn": 23
            }
        ],
        "suppressedMessages": [],
        "errorCount": 8,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { EntityActionDropdown } from '@/components/shared/EntityActionDropdown';\nimport { EntityDataTable } from '@/components/shared/EntityDataTable';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Calendar } from '@/components/ui/calendar';\nimport { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from '@/components/ui/chart';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuLabel,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Separator } from '@/components/ui/separator';\nimport { useExportManager } from '@/hooks/use-export-manager';\nimport AppLayout from '@/layouts/app-layout';\nimport { cn } from '@/lib/utils';\nimport { type BreadcrumbItem } from '@/types';\nimport { ColumnConfig } from '@/types/shared';\nimport { Head, router } from '@inertiajs/react';\nimport { format } from 'date-fns';\nimport {\n    AlertCircle,\n    BarChart3,\n    Calendar as CalendarIcon,\n    CheckCircle,\n    ChevronDown,\n    Clock,\n    Download,\n    Eye,\n    FileText,\n    Minus,\n    Plus,\n    Search,\n    TrendingDown,\n    TrendingUp,\n    XCircle,\n} from 'lucide-react';\nimport React, { useState } from 'react';\nimport { DateRange } from 'react-day-picker';\nimport { Area, AreaChart, CartesianGrid, XAxis } from 'recharts';\nimport { toast } from 'sonner';\n\n// Types from History.tsx\ninterface Stats {\n    total: number;\n    completed: number;\n    in_progress: number;\n    failed: number;\n    completion_rate: number;\n    trend: {\n        direction: 'up' | 'down' | 'stable';\n        percentage: number;\n    };\n}\n\ninterface ExecutionSummary {\n    id: number;\n    routine_name: string;\n    asset_tag: string | null;\n    executor_name: string;\n    status: string;\n    started_at: string;\n    duration_minutes: number | null;\n    progress: number;\n}\n\ninterface PerformanceMetrics {\n    average_duration_minutes: number;\n    median_duration_minutes: number;\n    fastest_execution_minutes: number;\n    slowest_execution_minutes: number;\n    total_execution_time_hours: number;\n}\n\ninterface RoutineDashboardProps {\n    stats: Stats;\n    recentExecutions: ExecutionSummary[];\n    dailyTrend: any[];\n    performanceMetrics: PerformanceMetrics;\n    filters: any;\n    filterOptions: any;\n}\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Home',\n        href: '/home',\n    },\n    {\n        title: 'Maintenance',\n        href: '/maintenance/dashboard',\n    },\n    {\n        title: 'Routine Dashboard',\n        href: '/maintenance/routine-dashboard',\n    },\n];\n\n// Utility functions\nconst formatDate = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString();\n};\n\nconst formatDuration = (minutes: number | null): string => {\n    if (!minutes || minutes <= 0) return 'N/A';\n    if (minutes < 60) return `${minutes}m`;\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    return remainingMinutes === 0 ? `${hours}h` : `${hours}h ${remainingMinutes}m`;\n};\n\nconst getRelativeTime = (dateString: string | null): string => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    return formatDate(dateString);\n};\n\nconst chartConfig = {\n    completed: {\n        label: 'Completed',\n        color: 'hsl(var(--chart-1))',\n    },\n    failed: {\n        label: 'Failed',\n        color: 'hsl(var(--chart-2))',\n    },\n} satisfies ChartConfig;\n\nconst RoutineDashboard: React.FC<RoutineDashboardProps> = ({ stats, recentExecutions, dailyTrend, performanceMetrics, filters, filterOptions }) => {\n    const [date, setDate] = useState<DateRange | undefined>(() => {\n        // Initialize from URL params or use default range\n        const urlParams = new URLSearchParams(window.location.search);\n        const dateFrom = urlParams.get('date_from');\n        const dateTo = urlParams.get('date_to');\n\n        if (dateFrom && dateTo) {\n            return {\n                from: new Date(dateFrom),\n                to: new Date(dateTo),\n            };\n        }\n\n        return {\n            from: new Date(new Date().setDate(new Date().getDate() - 30)),\n            to: new Date(),\n        };\n    });\n    const [statusFilter, setStatusFilter] = useState(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('status') || 'All';\n    });\n    const [timeframe, setTimeframe] = useState('Daily');\n    const [searchQuery, setSearchQuery] = useState(() => {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('search') || '';\n    });\n    const [isExporting, setIsExporting] = useState(false);\n    const { addExport, updateExport } = useExportManager();\n\n    // Column visibility state\n    const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(() => {\n        if (typeof window !== 'undefined') {\n            const saved = localStorage.getItem('routineDashboardColumnsVisibility');\n            if (saved) {\n                return JSON.parse(saved);\n            }\n        }\n        return {\n            id: true,\n            status: true,\n            routine_name: true,\n            asset_tag: true,\n            executor_name: true,\n            started_at: true,\n            duration_minutes: true,\n        };\n    });\n\n    // Column configuration for EntityDataTable\n    const columns: ColumnConfig[] = [\n        {\n            key: 'id',\n            label: 'ID',\n            sortable: true,\n            width: 'w-[80px]',\n            render: (value) => `#${value}`,\n        },\n        {\n            key: 'status',\n            label: 'Status',\n            sortable: true,\n            width: 'w-[120px]',\n            render: (value, row) => (\n                <Badge className={cn('flex w-fit items-center', getStatusColor(row.status))}>\n                    {getStatusIcon(row.status)}\n                    {row.status.replace('_', ' ')}\n                </Badge>\n            ),\n        },\n        {\n            key: 'routine_name',\n            label: 'Routine',\n            sortable: true,\n            width: 'w-[200px]',\n            render: (value) => value,\n        },\n        {\n            key: 'asset_tag',\n            label: 'Asset',\n            sortable: false,\n            width: 'w-[150px]',\n            render: (value) => value || 'N/A',\n        },\n        {\n            key: 'executor_name',\n            label: 'Executor',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value, row) => (\n                <div className=\"flex items-center gap-2\">\n                    <Avatar className=\"h-8 w-8\">\n                        <AvatarFallback>\n                            {row.executor_name\n                                .split(' ')\n                                .map((n: string) => n[0])\n                                .join('')}\n                        </AvatarFallback>\n                    </Avatar>\n                    <span>{row.executor_name}</span>\n                </div>\n            ),\n        },\n        {\n            key: 'started_at',\n            label: 'Started',\n            sortable: true,\n            width: 'w-[150px]',\n            render: (value) => getRelativeTime(value),\n        },\n        {\n            key: 'duration_minutes',\n            label: 'Duration',\n            sortable: true,\n            width: 'w-[100px]',\n            render: (value) => formatDuration(value),\n        },\n    ];\n\n    const getTrendIcon = (direction: string) => {\n        switch (direction) {\n            case 'up':\n                return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n            case 'down':\n                return <TrendingDown className=\"h-4 w-4 text-red-600\" />;\n            default:\n                return <Minus className=\"h-4 w-4 text-gray-600\" />;\n        }\n    };\n\n    const getStatusColor = (status: string) => {\n        switch (status) {\n            case 'completed':\n                return 'bg-green-100 text-green-800';\n            case 'in_progress':\n                return 'bg-blue-100 text-blue-800';\n            case 'pending':\n                return 'bg-yellow-100 text-yellow-800';\n            case 'cancelled':\n            case 'failed':\n                return 'bg-red-100 text-red-800';\n            default:\n                return 'bg-gray-100 text-gray-800';\n        }\n    };\n\n    const getStatusIcon = (status: string) => {\n        switch (status) {\n            case 'completed':\n                return <CheckCircle className=\"mr-1 h-4 w-4\" />;\n            case 'in_progress':\n                return <Clock className=\"mr-1 h-4 w-4\" />;\n            case 'failed':\n            case 'cancelled':\n                return <XCircle className=\"mr-1 h-4 w-4\" />;\n            default:\n                return <AlertCircle className=\"mr-1 h-4 w-4\" />;\n        }\n    };\n\n    // Transform dailyTrend data for the chart\n    const chartData =\n        dailyTrend?.map((day) => ({\n            date: day.date,\n            completed: day.completed || 0,\n            failed: day.failed || 0,\n        })) || [];\n\n    const handleExportReport = async () => {\n        setIsExporting(true);\n        try {\n            const executionIds = recentExecutions.slice(0, 10).map((e) => e.id);\n            const response = await fetch('/maintenance/routines/export/batch', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'X-CSRF-TOKEN': document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content') || '',\n                },\n                body: JSON.stringify({\n                    execution_ids: executionIds,\n                    format: 'pdf',\n                    template: 'summary',\n                    grouping: 'by_asset',\n                    include_cover_page: true,\n                    include_index: true,\n                    separate_files: false,\n                    include_images: true,\n                    compress_images: true,\n                    paper_size: 'A4',\n                    delivery: { method: 'download' },\n                }),\n            });\n\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.error || 'Export failed');\n\n            addExport({\n                id: data.export_id,\n                type: 'batch',\n                description: `Dashboard Report - ${executionIds.length} executions`,\n                status: 'processing',\n                progress: 0,\n            });\n\n            // Poll for status\n            const pollInterval = setInterval(async () => {\n                try {\n                    const statusResponse = await fetch(`/maintenance/routines/exports/${data.export_id}/status`, {\n                        headers: { 'X-Requested-With': 'XMLHttpRequest' },\n                    });\n                    const statusData = await statusResponse.json();\n\n                    if (statusData.progress_percentage) {\n                        updateExport(data.export_id, { progress: statusData.progress_percentage });\n                    }\n\n                    if (statusData.status === 'completed' && statusData.download_url) {\n                        clearInterval(pollInterval);\n                        updateExport(data.export_id, {\n                            status: 'completed',\n                            downloadUrl: statusData.download_url,\n                            completedAt: new Date(),\n                        });\n                    } else if (statusData.status === 'failed') {\n                        clearInterval(pollInterval);\n                        updateExport(data.export_id, {\n                            status: 'failed',\n                            error: 'Export failed. Please try again.',\n                        });\n                    }\n                } catch (error) {\n                    console.error('Status polling error:', error);\n                }\n            }, 2000);\n\n            setTimeout(() => clearInterval(pollInterval), 300000);\n        } catch (error) {\n            console.error('Export error:', error);\n            toast.error(error instanceof Error ? error.message : 'Failed to start export');\n        } finally {\n            setIsExporting(false);\n        }\n    };\n\n    const handleExportSingle = (executionId: number) => {\n        // TODO: Implement single export functionality\n        console.log('Export single:', executionId);\n    };\n\n    const handleSort = (columnKey: string) => {\n        // TODO: Implement sorting functionality\n        console.log('Sort:', columnKey);\n    };\n\n    const handleDateChange = (newDate: DateRange | undefined) => {\n        setDate(newDate);\n\n        // Update URL and refresh data\n        if (newDate?.from && newDate?.to) {\n            const params = new URLSearchParams(window.location.search);\n            params.set('date_from', newDate.from.toISOString().split('T')[0]);\n            params.set('date_to', newDate.to.toISOString().split('T')[0]);\n\n            // Keep existing filters\n            if (statusFilter !== 'All') {\n                params.set('status', statusFilter.toLowerCase());\n            }\n            if (searchQuery) {\n                params.set('search', searchQuery);\n            }\n\n            router.visit(`/maintenance/routine-dashboard?${params.toString()}`, {\n                preserveState: true,\n                preserveScroll: true,\n            });\n        }\n    };\n\n    const handleStatusFilterChange = (newStatus: string) => {\n        setStatusFilter(newStatus);\n\n        const params = new URLSearchParams();\n\n        // Add date range if set\n        if (date?.from && date?.to) {\n            params.set('date_from', date.from.toISOString().split('T')[0]);\n            params.set('date_to', date.to.toISOString().split('T')[0]);\n        }\n\n        // Add status filter if not \"All\"\n        if (newStatus !== 'All') {\n            params.set('status', newStatus.toLowerCase());\n        }\n\n        // Add search if set\n        if (searchQuery) {\n            params.set('search', searchQuery);\n        }\n\n        router.visit(`/maintenance/routine-dashboard?${params.toString()}`, {\n            preserveState: true,\n            preserveScroll: true,\n        });\n    };\n\n    const handleSearchChange = (newSearch: string) => {\n        setSearchQuery(newSearch);\n\n        // Debounce the search\n        setTimeout(() => {\n            const params = new URLSearchParams();\n\n            // Add date range if set\n            if (date?.from && date?.to) {\n                params.set('date_from', date.from.toISOString().split('T')[0]);\n                params.set('date_to', date.to.toISOString().split('T')[0]);\n            }\n\n            // Add status filter if not \"All\"\n            if (statusFilter !== 'All') {\n                params.set('status', statusFilter.toLowerCase());\n            }\n\n            // Add search if set\n            if (newSearch.trim()) {\n                params.set('search', newSearch.trim());\n            }\n\n            router.visit(`/maintenance/routine-dashboard?${params.toString()}`, {\n                preserveState: true,\n                preserveScroll: true,\n            });\n        }, 500);\n    };\n\n    // Filter executions based on search\n    const filteredExecutions = recentExecutions.filter((execution) => {\n        const matchesSearch =\n            searchQuery === '' ||\n            execution.routine_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            execution.executor_name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n            (execution.asset_tag && execution.asset_tag.toLowerCase().includes(searchQuery.toLowerCase()));\n\n        const matchesStatus = statusFilter === 'All' || execution.status === statusFilter.toLowerCase();\n\n        return matchesSearch && matchesStatus;\n    });\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Routine Dashboard - Maintenance\" />\n\n            <div className=\"bg-background h-full overflow-auto\">\n                {/* Header */}\n                <div className=\"border-border flex flex-col border-b px-4 py-4 md:px-6 md:py-6\">\n                    <div className=\"flex items-center justify-between gap-4\">\n                        <div>\n                            <h1 className=\"text-2xl font-bold tracking-tight md:text-3xl\">Routine Executions</h1>\n                            <p className=\"text-muted-foreground\">Track and analyze routine execution performance</p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                            <Button variant=\"outline\" onClick={() => router.visit('/maintenance/routines')}>\n                                <BarChart3 className=\"mr-2 h-4 w-4\" />\n                                <span className=\"hidden md:block\">View All</span>\n                            </Button>\n                            <Button variant=\"outline\" onClick={handleExportReport} disabled={isExporting}>\n                                <Download className=\"mr-2 h-4 w-4\" />\n                                <span className=\"hidden md:block\">{isExporting ? 'Exporting...' : 'Export'}</span>\n                            </Button>\n                            <Button onClick={() => router.visit('/maintenance/routines/create')}>\n                                <Plus className=\"mr-2 h-4 w-4\" />\n                                <span className=\"hidden md:block\">New Routine</span>\n                            </Button>\n                        </div>\n                    </div>\n                </div>\n\n                {/* Main content */}\n                <div className=\"flex flex-col gap-6 p-4 md:p-6\">\n                    {/* Date Range and Filters */}\n                    <div className=\"flex flex-col justify-between gap-4 lg:flex-row lg:items-center\">\n                        <div className=\"flex items-center gap-2\">\n                            <Popover>\n                                <PopoverTrigger asChild className=\"max-w-[300px]\">\n                                    <Button\n                                        variant=\"outline\"\n                                        className={cn('w-[300px] justify-start text-left font-normal', !date && 'text-muted-foreground')}\n                                    >\n                                        <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                                        {date?.from ? (\n                                            date.to ? (\n                                                <>\n                                                    {format(date.from, 'MMM dd, y')} - {format(date.to, 'MMM dd, y')}\n                                                </>\n                                            ) : (\n                                                format(date.from, 'MMM dd, y')\n                                            )\n                                        ) : (\n                                            <span>Pick a date range</span>\n                                        )}\n                                    </Button>\n                                </PopoverTrigger>\n                                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                                    <Calendar\n                                        initialFocus\n                                        mode=\"range\"\n                                        defaultMonth={date?.from}\n                                        selected={date}\n                                        onSelect={handleDateChange}\n                                        numberOfMonths={2}\n                                        className=\"rounded-md border\"\n                                        weekStartsOn={0}\n                                    />\n                                </PopoverContent>\n                            </Popover>\n                        </div>\n                        <div className=\"flex gap-3\">\n                            <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                    <Button variant=\"outline\">\n                                        Status: {statusFilter}\n                                        <ChevronDown className=\"ml-2 h-4 w-4\" />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent className=\"w-56\">\n                                    <DropdownMenuLabel>Filter by Status</DropdownMenuLabel>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuRadioGroup value={statusFilter} onValueChange={handleStatusFilterChange}>\n                                        <DropdownMenuRadioItem value=\"All\">All</DropdownMenuRadioItem>\n                                        <DropdownMenuRadioItem value=\"Completed\">Completed</DropdownMenuRadioItem>\n                                        <DropdownMenuRadioItem value=\"In_progress\">In Progress</DropdownMenuRadioItem>\n                                        <DropdownMenuRadioItem value=\"Failed\">Failed</DropdownMenuRadioItem>\n                                    </DropdownMenuRadioGroup>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                            <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                    <Button variant=\"outline\">\n                                        {timeframe}\n                                        <ChevronDown className=\"ml-2 h-4 w-4\" />\n                                    </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent className=\"w-56\">\n                                    <DropdownMenuLabel>Time Period</DropdownMenuLabel>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuRadioGroup value={timeframe} onValueChange={setTimeframe}>\n                                        <DropdownMenuRadioItem value=\"Daily\">Daily</DropdownMenuRadioItem>\n                                        <DropdownMenuRadioItem value=\"Weekly\">Weekly</DropdownMenuRadioItem>\n                                        <DropdownMenuRadioItem value=\"Monthly\">Monthly</DropdownMenuRadioItem>\n                                    </DropdownMenuRadioGroup>\n                                </DropdownMenuContent>\n                            </DropdownMenu>\n                        </div>\n                    </div>\n\n                    {/* Stats Cards */}\n                    <div className=\"grid grid-cols-1 items-center gap-4 sm:grid-cols-2 lg:flex lg:flex-row lg:gap-6\">\n                        <div className=\"flex flex-1 flex-col gap-2\">\n                            <p className=\"text-muted-foreground flex justify-between text-sm font-medium\">\n                                Total Executions\n                                <span\n                                    className={`${\n                                        stats.trend.direction === 'up'\n                                            ? 'text-green-600'\n                                            : stats.trend.direction === 'down'\n                                              ? 'text-red-600'\n                                              : 'text-gray-600'\n                                    }`}\n                                >\n                                    {stats.trend.percentage > 0 ? '+' : ''}\n                                    {stats.trend.percentage}%\n                                </span>\n                            </p>\n                            <p className=\"text-xl font-semibold md:text-3xl\">{stats.total.toLocaleString()}</p>\n                        </div>\n                        <Separator orientation=\"vertical\" className=\"hidden h-16! lg:block\" />\n                        <div className=\"flex flex-1 flex-col gap-2\">\n                            <p className=\"text-muted-foreground flex justify-between text-sm font-medium\">\n                                Completed\n                                <span className=\"text-green-600\">+{stats.completion_rate}%</span>\n                            </p>\n                            <p className=\"text-xl font-semibold md:text-3xl\">{stats.completed.toLocaleString()}</p>\n                        </div>\n                        <Separator orientation=\"vertical\" className=\"hidden h-16! lg:block\" />\n                        <div className=\"flex flex-1 flex-col gap-2\">\n                            <p className=\"text-muted-foreground flex justify-between text-sm font-medium\">\n                                In Progress\n                                <span className=\"text-blue-600\">+{stats.total > 0 ? ((stats.in_progress / stats.total) * 100).toFixed(1) : 0}%</span>\n                            </p>\n                            <p className=\"text-xl font-semibold md:text-3xl\">{stats.in_progress.toLocaleString()}</p>\n                        </div>\n                        <Separator orientation=\"vertical\" className=\"hidden h-16! lg:block\" />\n                        <div className=\"flex flex-1 flex-col gap-2\">\n                            <p className=\"text-muted-foreground flex justify-between text-sm font-medium\">\n                                Failed\n                                <span className=\"text-red-600\">+{stats.total > 0 ? ((stats.failed / stats.total) * 100).toFixed(1) : 0}%</span>\n                            </p>\n                            <p className=\"text-xl font-semibold md:text-3xl\">{stats.failed.toLocaleString()}</p>\n                        </div>\n                    </div>\n\n                    {/* Chart */}\n                    <ChartContainer config={chartConfig} className=\"max-h-[280px] w-full\">\n                        <AreaChart data={chartData} margin={{ left: 12, right: 12 }}>\n                            <CartesianGrid vertical={false} />\n                            <XAxis\n                                dataKey=\"date\"\n                                tickLine={false}\n                                axisLine={false}\n                                tickMargin={8}\n                                tickFormatter={(value) => new Date(value).toLocaleDateString()}\n                            />\n                            <ChartTooltip cursor={false} content={<ChartTooltipContent indicator=\"dot\" />} />\n                            <defs>\n                                <linearGradient id=\"fillCompleted\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor=\"var(--color-completed)\" stopOpacity={0.8} />\n                                    <stop offset=\"95%\" stopColor=\"var(--color-completed)\" stopOpacity={0.1} />\n                                </linearGradient>\n                                <linearGradient id=\"fillFailed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor=\"var(--color-failed)\" stopOpacity={0.8} />\n                                    <stop offset=\"95%\" stopColor=\"var(--color-failed)\" stopOpacity={0.1} />\n                                </linearGradient>\n                            </defs>\n                            <Area\n                                dataKey=\"completed\"\n                                type=\"natural\"\n                                fill=\"url(#fillCompleted)\"\n                                fillOpacity={0.4}\n                                stroke=\"var(--color-completed)\"\n                                stackId=\"a\"\n                            />\n                            <Area\n                                dataKey=\"failed\"\n                                type=\"natural\"\n                                fill=\"url(#fillFailed)\"\n                                fillOpacity={0.4}\n                                stroke=\"var(--color-failed)\"\n                                stackId=\"a\"\n                            />\n                        </AreaChart>\n                    </ChartContainer>\n\n                    <Separator />\n\n                    {/* Recent Executions Table */}\n                    <div className=\"space-y-4\">\n                        <div className=\"flex flex-col justify-between gap-4 lg:flex-row\">\n                            <div className=\"relative w-full md:w-[300px]\">\n                                <Search className=\"text-muted-foreground absolute top-1/2 left-3 h-4 w-4 -translate-y-1/2\" />\n                                <Input\n                                    placeholder=\"Search executions...\"\n                                    className=\"pl-8\"\n                                    value={searchQuery}\n                                    onChange={(e) => handleSearchChange(e.target.value)}\n                                />\n                            </div>\n                            <div className=\"flex gap-3\">\n                                <Button variant=\"outline\" onClick={handleExportReport} disabled={isExporting}>\n                                    <Download className=\"mr-2 h-4 w-4\" />\n                                    Export Results\n                                </Button>\n                            </div>\n                        </div>\n\n                        <EntityDataTable\n                            data={filteredExecutions}\n                            columns={columns}\n                            loading={false}\n                            onRowClick={(execution) => router.visit(`/maintenance/routines/${execution.id}`)}\n                            columnVisibility={columnVisibility}\n                            onSort={handleSort}\n                            actions={(execution) => (\n                                <EntityActionDropdown\n                                    additionalActions={[\n                                        {\n                                            label: 'View',\n                                            icon: <Eye className=\"h-4 w-4\" />,\n                                            onClick: () => router.visit(`/maintenance/routines/${execution.id}`),\n                                        },\n                                        {\n                                            label: 'Export',\n                                            icon: <FileText className=\"h-4 w-4\" />,\n                                            onClick: () => handleExportSingle(execution.id),\n                                        },\n                                    ]}\n                                />\n                            )}\n                        />\n                    </div>\n                </div>\n            </div>\n        </AppLayout>\n    );\n};\n\nexport default RoutineDashboard;\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/scheduler/auto-arrange-nodes.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/scheduler/route-editor.tsx",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-empty-object-type",
                "severity": 2,
                "message": "An empty interface declaration allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowInterfaces' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.",
                "line": 89,
                "column": 11,
                "nodeType": "Identifier",
                "messageId": "noEmptyInterface",
                "endLine": 89,
                "endColumn": 16,
                "suggestions": [
                    {
                        "messageId": "replaceEmptyInterface",
                        "data": {
                            "replacement": "object"
                        },
                        "fix": {
                            "range": [
                                2211,
                                2286
                            ],
                            "text": "type Props = object"
                        },
                        "desc": "Replace empty interface with `object`."
                    },
                    {
                        "messageId": "replaceEmptyInterface",
                        "data": {
                            "replacement": "unknown"
                        },
                        "fix": {
                            "range": [
                                2211,
                                2286
                            ],
                            "text": "type Props = unknown"
                        },
                        "desc": "Replace empty interface with `unknown`."
                    }
                ]
            },
            {
                "ruleId": "no-empty-pattern",
                "severity": 2,
                "message": "Unexpected empty object pattern.",
                "line": 93,
                "column": 37,
                "nodeType": "ObjectPattern",
                "messageId": "unexpected",
                "endLine": 93,
                "endColumn": 46
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 123,
                "column": 51,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 123,
                "endColumn": 54,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                3887,
                                3890
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                3887,
                                3890
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 229,
                "column": 37,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 229,
                "endColumn": 40,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                7435,
                                7438
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                7435,
                                7438
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 248,
                "column": 13,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 248,
                "endColumn": 16,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                8000,
                                8003
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                8000,
                                8003
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 273,
                "column": 31,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 273,
                "endColumn": 34,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                9030,
                                9033
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                9030,
                                9033
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 311,
                "column": 39,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 311,
                "endColumn": 42,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                10444,
                                10447
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                10444,
                                10447
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 7,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "import { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport AppLayout from '@/layouts/app-layout';\nimport { type BreadcrumbItem } from '@/types';\nimport { Head } from '@inertiajs/react';\nimport { ArrowDown, ArrowRight, HelpCircle, LayoutGrid, Move, PlusCircle, Save, Trash2, X } from 'lucide-react';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { toast } from 'sonner';\nimport { autoArrangeNodes } from './auto-arrange-nodes';\n\nconst breadcrumbs: BreadcrumbItem[] = [\n    {\n        title: 'Programação',\n        href: '/scheduler',\n    },\n    {\n        title: 'Editor de Rotas',\n        href: '/scheduler/route-editor',\n    },\n];\n\n// Tipos para workcells e nodes\ninterface Workcell {\n    id: string;\n    name: string;\n    color: string;\n    custom?: boolean;\n}\n\ninterface Node {\n    id: string;\n    type: string;\n    name: string;\n    color: string;\n    position: {\n        x: number;\n        y: number;\n    };\n}\n\ninterface Edge {\n    id: string;\n    source: string;\n    target: string;\n}\n\ninterface DraggingNode {\n    id: string;\n    offsetX: number;\n    offsetY: number;\n}\n\ninterface Position {\n    x: number;\n    y: number;\n}\n\n// Sample workcells that could be added to the manufacturing sequence\nconst AVAILABLE_WORKCELLS: Workcell[] = [\n    { id: 'cutting', name: 'Estação de Corte', color: '#e9d8fd' },\n    { id: 'welding', name: 'Estação de Solda', color: '#feebc8' },\n    { id: 'assembly', name: 'Linha de Montagem', color: '#c6f6d5' },\n    { id: 'painting', name: 'Cabine de Pintura', color: '#bee3f8' },\n    { id: 'quality', name: 'Controle de Qualidade', color: '#fed7d7' },\n    { id: 'packaging', name: 'Área de Embalagem', color: '#e2e8f0' },\n    { id: 'cnc', name: 'Máquina CNC', color: '#fbd38d' },\n    { id: 'molding', name: 'Moldagem por Injeção', color: '#b2f5ea' },\n];\n\n// Available colors for custom workcells\nconst WORKCELL_COLORS = [\n    '#e9d8fd',\n    '#feebc8',\n    '#c6f6d5',\n    '#bee3f8',\n    '#fed7d7',\n    '#e2e8f0',\n    '#fbd38d',\n    '#b2f5ea',\n    '#feb2b2',\n    '#fbd5e5',\n    '#c4f1f9',\n    '#b2f5ea',\n    '#c3dafe',\n    '#e9d8fd',\n    '#fefcbf',\n];\n\ninterface Props {\n    // Tipagem das props que serão recebidas do backend\n}\n\nexport default function RouteEditor({}: Props) {\n    // Estados para nodes (workcells) e edges (connections)\n    const [nodes, setNodes] = useState<Node[]>([]);\n    const [edges, setEdges] = useState<Edge[]>([]);\n    const [nextNodeId, setNextNodeId] = useState(1);\n\n    // Estados para operações ativas\n    const [draggingNode, setDraggingNode] = useState<DraggingNode | null>(null);\n    const [connectingFrom, setConnectingFrom] = useState<string | null>(null);\n    const [jsonOutput, setJsonOutput] = useState('');\n    const [showOutput, setShowOutput] = useState(false);\n    const [draggingWorkcell, setDraggingWorkcell] = useState<string | null>(null);\n    // Overlay visual para indicar estado de arrasto\n    const [isDraggingOver, setIsDraggingOver] = useState(false);\n    const [showAutoArrangeOptions, setShowAutoArrangeOptions] = useState(false);\n\n    // Estado para criação de workcells personalizados\n    const [customWorkcells, setCustomWorkcells] = useState<Workcell[]>([]);\n    const [showCustomForm, setShowCustomForm] = useState(false);\n    const [newWorkcellName, setNewWorkcellName] = useState('');\n    const [newWorkcellColor, setNewWorkcellColor] = useState(WORKCELL_COLORS[0]);\n\n    // Estado para rastrear posição do mouse durante a criação de conexão\n    const [tempConnectionPos, setTempConnectionPos] = useState<Position>({ x: 0, y: 0 });\n\n    // Referências\n    const boardRef = useRef<HTMLDivElement>(null);\n\n    // Efeito para escutar eventos de movimento do mouse durante criação de conexão\n    React.useEffect(() => {\n        const handleTempConnectionMouseMove = (e: any) => {\n            if (e.detail) {\n                setTempConnectionPos({ x: e.detail.x, y: e.detail.y });\n            }\n        };\n\n        document.addEventListener('mousemove:temp-connection', handleTempConnectionMouseMove);\n\n        return () => {\n            document.removeEventListener('mousemove:temp-connection', handleTempConnectionMouseMove);\n        };\n    }, []);\n\n    // Efeito para configurar eventos de drag and drop\n    React.useEffect(() => {\n        const handleDragOver = (e: DragEvent) => {\n            // Isso é necessário para eventos de arrasto funcionarem em vários navegadores\n            e.preventDefault();\n        };\n\n        // Adicionar manipulador de dragover global para garantir que o arrasto funcione em toda aplicação\n        document.addEventListener('dragover', handleDragOver);\n\n        return () => {\n            document.removeEventListener('dragover', handleDragOver);\n        };\n    }, []);\n\n    // Adicionar um workcell personalizado\n    const addCustomWorkcell = () => {\n        if (!newWorkcellName.trim()) return;\n\n        const id = `custom-${Date.now()}`;\n        const newCustomWorkcell: Workcell = {\n            id,\n            name: newWorkcellName.trim(),\n            color: newWorkcellColor,\n            custom: true,\n        };\n\n        setCustomWorkcells([...customWorkcells, newCustomWorkcell]);\n        setNewWorkcellName('');\n        setShowCustomForm(false);\n    };\n\n    // Calcular linha de conexão temporária ao criar uma conexão\n    const getTempConnectionPath = () => {\n        if (!connectingFrom) return null;\n\n        const sourceNode = nodes.find((n) => n.id === connectingFrom);\n        if (!sourceNode) return null;\n\n        // Obter centro da origem\n        const sourcePos = {\n            x: sourceNode.position.x + 100, // centro x\n            y: sourceNode.position.y + 40, // centro y\n        };\n\n        // Calcular ângulo para seta\n        const dx = tempConnectionPos.x - sourcePos.x;\n        const dy = tempConnectionPos.y - sourcePos.y;\n        const angle = (Math.atan2(dy, dx) * 180) / Math.PI;\n\n        // Desenhar apenas uma linha tracejada reta\n        return {\n            path: `M${sourcePos.x},${sourcePos.y} L${tempConnectionPos.x},${tempConnectionPos.y}`,\n            angle: angle,\n            source: sourcePos,\n            target: tempConnectionPos,\n        };\n    };\n\n    // Adicionar um novo node workcell ao board\n    const addNode = (workcellType: string, position: Position | null = null) => {\n        // Encontrar entre workcells padrão ou personalizados\n        let workcell = AVAILABLE_WORKCELLS.find((wc) => wc.id === workcellType);\n\n        if (!workcell) {\n            // Procurar nos workcells personalizados\n            const customWorkcell = customWorkcells.find((wc) => wc.id === workcellType);\n            if (customWorkcell) {\n                workcell = customWorkcell;\n            } else {\n                return; // Se não encontrar, retornar sem adicionar\n            }\n        }\n\n        // Usar posição fornecida ou padrão\n        const nodePosition = position || {\n            x: Math.random() * 200 + 50,\n            y: Math.random() * 200 + 50,\n        };\n\n        const newNode: Node = {\n            id: `node-${nextNodeId}`,\n            type: workcellType,\n            name: workcell.name,\n            color: workcell.color,\n            position: nodePosition,\n        };\n\n        setNodes([...nodes, newNode]);\n        setNextNodeId(nextNodeId + 1);\n    };\n\n    // Iniciar arrasto de node\n    const handleNodeDragStart = (e: any, nodeId: string) => {\n        e.stopPropagation();\n        const node = nodes.find((n) => n.id === nodeId);\n        if (!node) return;\n\n        // Calcular offset relativo ao node, não ao cursor\n        const rect = e.currentTarget.getBoundingClientRect();\n        const offsetX = e.clientX - rect.left;\n        const offsetY = e.clientY - rect.top;\n\n        setDraggingNode({\n            id: nodeId,\n            offsetX,\n            offsetY,\n        });\n    };\n\n    // Gerenciar movimento do mouse no board\n    const handleMouseMove = useCallback(\n        (e: any) => {\n            const boardRect = boardRef.current?.getBoundingClientRect();\n            if (!boardRect) return;\n\n            if (draggingNode) {\n                // Atualizar posição do node\n                const x = e.clientX - boardRect.left - draggingNode.offsetX;\n                const y = e.clientY - boardRect.top - draggingNode.offsetY;\n\n                setNodes(nodes.map((node) => (node.id === draggingNode.id ? { ...node, position: { x, y } } : node)));\n            }\n\n            // Atualizar posição da linha de conexão temporária ao criar uma conexão\n            if (connectingFrom) {\n                // Atualizar a posição diretamente em vez de usar eventos personalizados\n                setTempConnectionPos({\n                    x: e.clientX - boardRect.left,\n                    y: e.clientY - boardRect.top,\n                });\n            }\n        },\n        [draggingNode, nodes, connectingFrom],\n    );\n\n    // Gerenciar mouse up - potencialmente finalizando uma conexão\n    const handleMouseUp = (e: any) => {\n        if (draggingNode) {\n            setDraggingNode(null);\n            return;\n        }\n\n        // Verificar se estamos criando uma conexão\n        if (connectingFrom) {\n            // Obter coordenadas de posição relativas ao board\n            const boardRect = boardRef.current?.getBoundingClientRect();\n            if (!boardRect) return;\n\n            const mouseX = e.clientX - boardRect.left;\n            const mouseY = e.clientY - boardRect.top;\n\n            // Verificar cada node para ver se o mouse está sobre ele\n            const targetNode = nodes.find((node) => {\n                if (node.id === connectingFrom) return false; // Pular node de origem\n\n                const nodeLeft = node.position.x;\n                const nodeRight = node.position.x + 200; // largura do node\n                const nodeTop = node.position.y;\n                const nodeBottom = node.position.y + 80; // altura do node\n\n                return mouseX >= nodeLeft && mouseX <= nodeRight && mouseY >= nodeTop && mouseY <= nodeBottom;\n            });\n\n            if (targetNode) {\n                // Completar a conexão com o node alvo\n                handleConnectionEnd(targetNode.id);\n            } else {\n                // Cancelar a tentativa de conexão\n                setConnectingFrom(null);\n            }\n        }\n    };\n\n    // Iniciar conexão entre nodes\n    const handleConnectionStart = (e: any, nodeId: string) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        // Inicializar com a posição atual do mouse\n        const boardRect = boardRef.current?.getBoundingClientRect();\n        if (!boardRect) return;\n\n        setTempConnectionPos({\n            x: e.clientX - boardRect.left,\n            y: e.clientY - boardRect.top,\n        });\n\n        setConnectingFrom(nodeId);\n    };\n\n    // Completar uma conexão entre nodes\n    const handleConnectionEnd = (targetNodeId: string) => {\n        if (!connectingFrom || connectingFrom === targetNodeId) {\n            setConnectingFrom(null);\n            return;\n        }\n\n        // Verificar conexões existentes em qualquer direção entre esses nodes\n        const existingConnection = edges.some(\n            (edge) =>\n                (edge.source === connectingFrom && edge.target === targetNodeId) || (edge.source === targetNodeId && edge.target === connectingFrom),\n        );\n\n        // Se já existe uma conexão em qualquer direção, não criar outra\n        if (existingConnection) {\n            // Cancelar a tentativa de conexão e mostrar uma mensagem\n            setConnectingFrom(null);\n            toast.error(\n                'Já existe uma conexão entre estes postos de trabalho. Apenas uma conexão é permitida entre quaisquer dois postos de trabalho.',\n            );\n            return;\n        }\n\n        // Criar a nova conexão\n        const newEdge: Edge = {\n            id: `edge-${connectingFrom}-${targetNodeId}-${Date.now()}`,\n            source: connectingFrom,\n            target: targetNodeId,\n        };\n\n        setEdges([...edges, newEdge]);\n        setConnectingFrom(null);\n    };\n\n    // Excluir um node e suas conexões\n    const deleteNode = (nodeId: string) => {\n        setNodes(nodes.filter((node) => node.id !== nodeId));\n        setEdges(edges.filter((edge) => edge.source !== nodeId && edge.target !== nodeId));\n    };\n\n    // Excluir uma conexão\n    const deleteEdge = (edgeId: string) => {\n        setEdges(edges.filter((edge) => edge.id !== edgeId));\n    };\n\n    // Calcular posição para linhas de conexão\n    const getNodeCenter = (nodeId: string): Position => {\n        const node = nodes.find((n) => n.id === nodeId);\n        if (!node) return { x: 0, y: 0 };\n\n        return {\n            x: node.position.x + 100, // Metade da largura do node (200)\n            y: node.position.y + 40, // Metade da altura do node (80)\n        };\n    };\n\n    // Renderizar setas de conexão ao longo de um caminho\n    const renderConnectionArrows = (sourcePos: Position, targetPos: Position) => {\n        // Calcular ângulo para seta\n        const angle = (Math.atan2(targetPos.y - sourcePos.y, targetPos.x - sourcePos.x) * 180) / Math.PI;\n\n        // Calcular distância entre nodes para colocar marcadores\n        const dx = targetPos.x - sourcePos.x;\n        const dy = targetPos.y - sourcePos.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        // Calcular posições para indicadores de direção - garantir pelo menos 2 setas para qualquer conexão\n        const numArrows = Math.max(2, Math.min(Math.floor(distance / 40), 5)); // 2-5 setas com base na distância\n        const arrowElements: React.ReactNode[] = [];\n\n        for (let i = 1; i <= numArrows; i++) {\n            const ratio = i / (numArrows + 1);\n            const arrowX = sourcePos.x + dx * ratio;\n            const arrowY = sourcePos.y + dy * ratio;\n\n            // Criar setas mais visíveis com fundo\n            arrowElements.push(\n                <g key={`arrow-${i}`}>\n                    {/* Fundo branco para melhor visibilidade */}\n                    <polygon\n                        points=\"-12,-7 0,0 -12,7\"\n                        fill=\"white\"\n                        stroke=\"white\"\n                        strokeWidth=\"1\"\n                        transform={`translate(${arrowX},${arrowY}) rotate(${angle})`}\n                    />\n                    {/* Primeiro plano da seta */}\n                    <polygon points=\"-10,-6 0,0 -10,6\" fill=\"#2563eb\" transform={`translate(${arrowX},${arrowY}) rotate(${angle})`} />\n                </g>,\n            );\n        }\n\n        return {\n            arrowElements,\n            angle,\n        };\n    };\n\n    // Organizar os nodes no espaço de trabalho de forma limpa\n    const handleAutoArrangeNodes = (direction: string = 'horizontal') => {\n        if (nodes.length === 0) return;\n\n        const updatedNodes = autoArrangeNodes(nodes, edges, direction);\n        setNodes(updatedNodes);\n    };\n\n    // Gerar saída JSON da sequência de fabricação\n    const generateOutput = () => {\n        // Coletar todos os tipos de workcell usados no diagrama\n        const usedWorkcellTypes = new Set(nodes.map((node) => node.type));\n\n        // Criar um dicionário de tipos de workcell\n        const workcellTypes: Record<string, { name: string; color: string; custom?: boolean }> = {};\n\n        // Adicionar workcells padrão que são usados\n        AVAILABLE_WORKCELLS.forEach((wc) => {\n            if (usedWorkcellTypes.has(wc.id)) {\n                workcellTypes[wc.id] = {\n                    name: wc.name,\n                    color: wc.color,\n                };\n            }\n        });\n\n        // Adicionar workcells personalizados que são usados\n        customWorkcells.forEach((wc) => {\n            if (usedWorkcellTypes.has(wc.id)) {\n                workcellTypes[wc.id] = {\n                    name: wc.name,\n                    color: wc.color,\n                    custom: true,\n                };\n            }\n        });\n\n        const output = {\n            workcellTypes,\n            workcells: nodes.map((node) => ({\n                id: node.id,\n                type: node.type,\n                name: node.name,\n                position: node.position,\n            })),\n            connections: edges.map((edge) => ({\n                source: edge.source,\n                target: edge.target,\n            })),\n        };\n\n        setJsonOutput(JSON.stringify(output, null, 2));\n        setShowOutput(true);\n    };\n\n    return (\n        <AppLayout breadcrumbs={breadcrumbs}>\n            <Head title=\"Editor de Rotas\" />\n\n            <div className=\"flex h-full flex-col\">\n                {/* Toolbar */}\n                <div className=\"flex border-b border-gray-200 bg-gray-100 p-4\">\n                    <div className=\"flex-1\">\n                        <h2 className=\"font-bold\">Editor de Sequência de Produção</h2>\n                        <p className=\"text-sm text-gray-600\">Arraste e solte postos de trabalho para desenhar sua sequência de produção</p>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                        <div className=\"relative\">\n                            <Button\n                                variant=\"outline\"\n                                onClick={() => setShowAutoArrangeOptions(!showAutoArrangeOptions)}\n                                className=\"flex items-center gap-1\"\n                            >\n                                <LayoutGrid size={16} />\n                                <span>Auto Organizar</span>\n                            </Button>\n\n                            {showAutoArrangeOptions && (\n                                <div className=\"absolute right-0 z-50 mt-1 w-48 rounded border border-gray-200 bg-white shadow-lg\">\n                                    <Button\n                                        variant=\"ghost\"\n                                        className=\"h-auto w-full justify-start px-3 py-2\"\n                                        onClick={() => {\n                                            handleAutoArrangeNodes('horizontal');\n                                            setShowAutoArrangeOptions(false);\n                                        }}\n                                    >\n                                        <ArrowRight size={16} className=\"mr-2\" /> Fluxo Horizontal\n                                    </Button>\n                                    <Button\n                                        variant=\"ghost\"\n                                        className=\"h-auto w-full justify-start px-3 py-2\"\n                                        onClick={() => {\n                                            handleAutoArrangeNodes('vertical');\n                                            setShowAutoArrangeOptions(false);\n                                        }}\n                                    >\n                                        <ArrowDown size={16} className=\"mr-2\" /> Fluxo Vertical\n                                    </Button>\n                                </div>\n                            )}\n                        </div>\n\n                        <Button variant=\"default\" onClick={generateOutput} className=\"flex items-center gap-1\">\n                            <Save size={16} />\n                            <span>Salvar Sequência</span>\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"flex flex-1 overflow-hidden\">\n                    {/* Sidebar com workcells disponíveis */}\n                    <div className=\"w-64 overflow-y-auto border-r border-gray-200 bg-gray-50 p-4\">\n                        <h3 className=\"mb-3 font-semibold\">Postos de Trabalho Disponíveis</h3>\n\n                        {/* Workcells padrão */}\n                        {AVAILABLE_WORKCELLS.map((workcell) => (\n                            <div\n                                key={workcell.id}\n                                className={`mb-2 flex cursor-move items-center rounded border border-gray-200 bg-white p-3 transition-colors hover:bg-gray-50 ${draggingWorkcell === workcell.id ? 'border-blue-500 opacity-50' : ''}`}\n                                draggable=\"true\"\n                                onDragStart={(e) => {\n                                    e.dataTransfer.setData('text/plain', workcell.id);\n                                    e.dataTransfer.effectAllowed = 'copy';\n                                    setDraggingWorkcell(workcell.id);\n                                }}\n                                onDragEnd={() => setDraggingWorkcell(null)}\n                                style={{ borderLeftWidth: '4px', borderLeftColor: workcell.color }}\n                            >\n                                <div className=\"flex-1\">{workcell.name}</div>\n                                <Move size={16} className=\"text-gray-500\" />\n                            </div>\n                        ))}\n\n                        {/* Workcells personalizados */}\n                        {customWorkcells.length > 0 && (\n                            <>\n                                {customWorkcells.map((workcell) => (\n                                    <div\n                                        key={workcell.id}\n                                        className={`mb-2 flex cursor-move items-center rounded border border-gray-200 bg-white p-3 transition-colors hover:bg-gray-50 ${draggingWorkcell === workcell.id ? 'border-blue-500 opacity-50' : ''}`}\n                                        draggable=\"true\"\n                                        onDragStart={(e) => {\n                                            e.dataTransfer.setData('text/plain', workcell.id);\n                                            e.dataTransfer.effectAllowed = 'copy';\n                                            setDraggingWorkcell(workcell.id);\n                                        }}\n                                        onDragEnd={() => setDraggingWorkcell(null)}\n                                        style={{ borderLeftWidth: '4px', borderLeftColor: workcell.color }}\n                                    >\n                                        <div className=\"flex-1\">{workcell.name}</div>\n                                        <Move size={16} className=\"text-gray-500\" />\n                                    </div>\n                                ))}\n                            </>\n                        )}\n\n                        {/* Botão para adicionar workcell personalizado */}\n                        {!showCustomForm ? (\n                            <Button\n                                variant=\"outline\"\n                                className=\"mt-3 w-full border-green-300 bg-green-50 py-5 text-green-800 hover:bg-green-100\"\n                                onClick={() => setShowCustomForm(true)}\n                            >\n                                <PlusCircle size={16} className=\"mr-2\" /> Adicionar Posto de Trabalho\n                            </Button>\n                        ) : (\n                            <div className=\"mt-3 rounded border border-gray-200 bg-white p-3\">\n                                <h4 className=\"mb-2 font-medium\">Novo Posto de Trabalho</h4>\n                                <input\n                                    type=\"text\"\n                                    className=\"mb-2 w-full rounded border border-gray-300 p-2\"\n                                    placeholder=\"Nome do posto de trabalho\"\n                                    value={newWorkcellName}\n                                    onChange={(e) => setNewWorkcellName(e.target.value)}\n                                />\n\n                                <div className=\"mb-2\">\n                                    <label className=\"mb-1 block text-sm\">Cor:</label>\n                                    <div className=\"flex flex-wrap gap-1\">\n                                        {WORKCELL_COLORS.map((color, index) => (\n                                            <div\n                                                key={index}\n                                                className={`h-6 w-6 cursor-pointer rounded-full border ${newWorkcellColor === color ? 'border-black' : 'border-gray-300'}`}\n                                                style={{ backgroundColor: color }}\n                                                onClick={() => setNewWorkcellColor(color)}\n                                            />\n                                        ))}\n                                    </div>\n                                </div>\n\n                                <div className=\"flex gap-2\">\n                                    <Button variant=\"default\" className=\"flex-1 bg-green-600 hover:bg-green-700\" onClick={addCustomWorkcell}>\n                                        Criar\n                                    </Button>\n                                    <Button\n                                        variant=\"outline\"\n                                        className=\"flex-1\"\n                                        onClick={() => {\n                                            setShowCustomForm(false);\n                                            setNewWorkcellName('');\n                                        }}\n                                    >\n                                        Cancelar\n                                    </Button>\n                                </div>\n                            </div>\n                        )}\n\n                        <div className=\"mt-6\">\n                            <Dialog>\n                                <DialogTrigger asChild>\n                                    <Button variant=\"outline\" className=\"flex w-full items-center justify-center gap-2\">\n                                        <HelpCircle size={16} />\n                                        <span>Instruções de Uso</span>\n                                    </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"sm:max-w-md\">\n                                    <DialogHeader>\n                                        <DialogTitle>Instruções do Editor de Rotas</DialogTitle>\n                                    </DialogHeader>\n                                    <div className=\"mt-4\">\n                                        <h3 className=\"mb-2 font-semibold\">Como usar:</h3>\n                                        <ul className=\"space-y-2 text-sm text-gray-600\">\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">1</div>\n                                                <span>Arraste postos da barra lateral para o quadro</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">2</div>\n                                                <span>Crie postos personalizados conforme necessário</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">3</div>\n                                                <span>Arraste postos existentes para reposicioná-los</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">4</div>\n                                                <span>Arraste a partir do ponto azul para criar conexões</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">5</div>\n                                                <span>Apenas uma conexão permitida entre quaisquer dois postos</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">6</div>\n                                                <span>Use Auto Organizar para layouts horizontais ou verticais</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">7</div>\n                                                <span>As setas em negrito mostram a direção do fluxo</span>\n                                            </li>\n                                            <li className=\"flex items-start gap-2\">\n                                                <div className=\"mt-0.5 rounded bg-blue-100 p-1 text-blue-600\">8</div>\n                                                <span>Clique em \"Salvar Sequência\" para gerar JSON</span>\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </DialogContent>\n                            </Dialog>\n                        </div>\n                    </div>\n\n                    <div\n                        className={`relative flex-1 overflow-auto bg-gray-50 transition-all duration-200 ${isDraggingOver ? 'scale-[0.99] border-2 border-dashed border-blue-300 bg-blue-50' : ''}`}\n                        ref={boardRef}\n                        onMouseMove={handleMouseMove}\n                        onMouseUp={handleMouseUp}\n                        onMouseLeave={() => {\n                            setDraggingNode(null);\n                            setConnectingFrom(null);\n                        }}\n                        style={{ userSelect: 'none' }}\n                        onDragOver={(e) => {\n                            // This is needed for drag events to work in many browsers\n                            e.preventDefault();\n                            // Set dropEffect to show it's a copy operation\n                            e.dataTransfer.dropEffect = 'copy';\n                            setIsDraggingOver(true);\n                        }}\n                        onDragEnter={(e) => {\n                            e.preventDefault();\n                            setIsDraggingOver(true);\n                        }}\n                        onDragLeave={(e) => {\n                            e.preventDefault();\n                            setIsDraggingOver(false);\n                        }}\n                        onDrop={(e) => {\n                            e.preventDefault();\n                            setIsDraggingOver(false);\n\n                            // Get the workcell type from the dataTransfer\n                            const workcellType = e.dataTransfer.getData('text/plain');\n\n                            if (workcellType) {\n                                // Calculate drop position relative to the board\n                                const boardRect = boardRef.current?.getBoundingClientRect();\n                                if (!boardRect) return;\n\n                                const x = e.clientX - boardRect.left;\n                                const y = e.clientY - boardRect.top;\n\n                                // Add the node at the drop position\n                                addNode(workcellType, { x, y });\n\n                                // Mostrar feedback visual\n                                toast.success('Posto de trabalho adicionado');\n                            }\n                        }}\n                    >\n                        {/* Mensagem de ajuda quando estiver arrastando */}\n                        {isDraggingOver && (\n                            <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n                                <div className=\"rounded-lg bg-white p-4 text-center shadow-lg\">\n                                    <Move size={32} className=\"mx-auto mb-2 text-blue-500\" />\n                                    <p className=\"text-lg font-medium\">Solte para adicionar o posto de trabalho</p>\n                                </div>\n                            </div>\n                        )}\n\n                        {/* Camada SVG para conexões */}\n                        <svg className=\"absolute inset-0 h-full w-full\" style={{ zIndex: 1 }}>\n                            {/* Conexões existentes */}\n                            {edges.map((edge) => {\n                                const sourceNode = nodes.find((n) => n.id === edge.source);\n                                const targetNode = nodes.find((n) => n.id === edge.target);\n\n                                if (!sourceNode || !targetNode) return null;\n\n                                // Obter posições de origem e destino\n                                const sourcePos = getNodeCenter(edge.source);\n\n                                const targetPos = getNodeCenter(edge.target);\n\n                                // Obter setas e ângulo\n                                const { arrowElements, angle } = renderConnectionArrows(sourcePos, targetPos);\n\n                                return (\n                                    <g key={edge.id}>\n                                        {/* Caminho com cor gradiente */}\n                                        <defs>\n                                            <linearGradient\n                                                id={`gradient-${edge.id}`}\n                                                gradientUnits=\"userSpaceOnUse\"\n                                                x1={sourcePos.x}\n                                                y1={sourcePos.y}\n                                                x2={targetPos.x}\n                                                y2={targetPos.y}\n                                            >\n                                                <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                                                <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                                            </linearGradient>\n                                        </defs>\n\n                                        <path\n                                            d={`M${sourcePos.x},${sourcePos.y} L${targetPos.x},${targetPos.y}`}\n                                            stroke={`url(#gradient-${edge.id})`}\n                                            strokeWidth=\"3\"\n                                            fill=\"none\"\n                                        />\n\n                                        {/* Indicadores de direção ao longo do caminho */}\n                                        {arrowElements}\n\n                                        {/* Seta final no destino - maior e mais visível */}\n                                        <g>\n                                            {/* Contorno branco para melhor visibilidade */}\n                                            <polygon\n                                                points=\"-16,-9 0,0 -16,9\"\n                                                fill=\"white\"\n                                                stroke=\"white\"\n                                                strokeWidth=\"1\"\n                                                transform={`translate(${targetPos.x},${targetPos.y}) rotate(${angle})`}\n                                            />\n                                            {/* Primeiro plano da seta */}\n                                            <polygon\n                                                points=\"-14,-8 0,0 -14,8\"\n                                                fill=\"#1d4ed8\"\n                                                transform={`translate(${targetPos.x},${targetPos.y}) rotate(${angle})`}\n                                            />\n                                        </g>\n\n                                        {/* Indicador de origem - círculo maior com contorno */}\n                                        <circle cx={sourcePos.x} cy={sourcePos.y} r={5} fill=\"white\" stroke=\"#3b82f6\" strokeWidth=\"2\" />\n\n                                        {/* Botão para excluir edge */}\n                                        <foreignObject\n                                            x={(sourcePos.x + targetPos.x) / 2 - 10}\n                                            y={(sourcePos.y + targetPos.y) / 2 - 10}\n                                            width=\"20\"\n                                            height=\"20\"\n                                        >\n                                            <div\n                                                className=\"flex h-5 w-5 cursor-pointer items-center justify-center rounded-full border border-gray-300 bg-white hover:bg-red-100\"\n                                                onClick={() => deleteEdge(edge.id)}\n                                            >\n                                                <X size={12} className=\"text-red-500\" />\n                                            </div>\n                                        </foreignObject>\n                                    </g>\n                                );\n                            })}\n\n                            {/* Conexão ativa sendo criada */}\n                            {connectingFrom &&\n                                (() => {\n                                    const tempPath = getTempConnectionPath();\n\n                                    if (!tempPath) return null;\n\n                                    // Calcular distância para criar setas intermediárias\n                                    const dx = tempPath.target.x - tempPath.source.x;\n                                    const dy = tempPath.target.y - tempPath.source.y;\n                                    const distance = Math.sqrt(dx * dx + dy * dy);\n\n                                    if (distance < 30) return null; // Não desenhar se estiver muito próximo\n\n                                    // Obter setas para a conexão temporária\n                                    const { arrowElements } = renderConnectionArrows(tempPath.source, tempPath.target);\n\n                                    return (\n                                        <g>\n                                            {/* Linha tracejada */}\n                                            <path d={tempPath.path} stroke=\"#2563eb\" strokeWidth=\"3\" strokeDasharray=\"6\" fill=\"none\" />\n\n                                            {/* Indicador de origem - círculo com contorno */}\n                                            <circle\n                                                cx={tempPath.source.x}\n                                                cy={tempPath.source.y}\n                                                r={5}\n                                                fill=\"white\"\n                                                stroke=\"#3b82f6\"\n                                                strokeWidth=\"2\"\n                                            />\n\n                                            {/* Setas de direção ao longo do caminho */}\n                                            {arrowElements}\n\n                                            {/* Seta no final - maior e mais visível */}\n                                            <g>\n                                                {/* Contorno branco */}\n                                                <polygon\n                                                    points=\"-16,-9 0,0 -16,9\"\n                                                    fill=\"white\"\n                                                    stroke=\"white\"\n                                                    strokeWidth=\"1\"\n                                                    transform={`translate(${tempPath.target.x},${tempPath.target.y}) rotate(${tempPath.angle})`}\n                                                />\n                                                {/* Seta azul */}\n                                                <polygon\n                                                    points=\"-14,-8 0,0 -14,8\"\n                                                    fill=\"#1d4ed8\"\n                                                    transform={`translate(${tempPath.target.x},${tempPath.target.y}) rotate(${tempPath.angle})`}\n                                                />\n                                            </g>\n                                        </g>\n                                    );\n                                })()}\n                        </svg>\n\n                        {/* Elementos de node */}\n                        {nodes.map((node) => (\n                            <div\n                                key={node.id}\n                                className=\"absolute flex cursor-move flex-col rounded-md border bg-white shadow-md\"\n                                style={{\n                                    left: node.position.x,\n                                    top: node.position.y,\n                                    width: '200px',\n                                    height: '100px',\n                                    zIndex: draggingNode?.id === node.id ? 100 : 10,\n                                }}\n                                onMouseDown={(e) => handleNodeDragStart(e, node.id)}\n                                draggable=\"false\"\n                            >\n                                <div\n                                    className=\"flex items-center justify-between border-b p-2\"\n                                    style={{ backgroundColor: node.color + '30' }}\n                                    draggable=\"false\"\n                                >\n                                    <span className=\"font-regular truncate\" draggable=\"false\">\n                                        {node.name}\n                                    </span>\n                                    <Button\n                                        variant=\"ghost\"\n                                        size=\"icon\"\n                                        onClick={() => deleteNode(node.id)}\n                                        className=\"h-6 w-6 p-0 text-gray-500 hover:text-red-500\"\n                                    >\n                                        <Trash2 size={14} />\n                                    </Button>\n                                </div>\n                                <div className=\"flex flex-col p-2 text-sm text-gray-600\" draggable=\"false\">\n                                    <span draggable=\"false\">ID: {node.id}</span>\n                                    <span className=\"text-xs text-gray-500\" draggable=\"false\">\n                                        Entrada: {edges.filter((e) => e.target === node.id).length} / Saída:{' '}\n                                        {edges.filter((e) => e.source === node.id).length}\n                                    </span>\n                                </div>\n\n                                {/* Alça de conexão - área ampla clicável com indicador visual */}\n                                <div\n                                    className=\"absolute h-10 w-full cursor-pointer\"\n                                    style={{ bottom: '-10px', left: '0', zIndex: 20 }}\n                                    onMouseDown={(e) => handleConnectionStart(e, node.id)}\n                                    draggable=\"false\"\n                                >\n                                    {/* Indicador visual no meio */}\n                                    <div\n                                        className=\"absolute flex h-6 w-6 items-center justify-center rounded-full border-2 border-white bg-blue-500\"\n                                        style={{ bottom: '0', left: '50%', transform: 'translateX(-50%)' }}\n                                        draggable=\"false\"\n                                    >\n                                        <div className=\"h-2 w-2 rounded-full bg-white\" draggable=\"false\"></div>\n                                    </div>\n                                </div>\n\n                                {/* Área alvo de conexão (mostrar apenas se estiver conectando) */}\n                                {connectingFrom && connectingFrom !== node.id && (\n                                    <div className=\"absolute inset-0 z-30 border-2 border-blue-400 bg-blue-100 opacity-30\" />\n                                )}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n\n                {/* Modal de Saída JSON */}\n                {showOutput && (\n                    <div className=\"bg-opacity-50 fixed inset-0 z-50 flex items-center justify-center bg-black\">\n                        <div className=\"flex max-h-2/3 w-2/3 flex-col rounded-lg bg-white shadow-xl\">\n                            <div className=\"flex items-center justify-between border-b p-4\">\n                                <h3 className=\"font-bold\">JSON da Sequência de Produção</h3>\n                                <Button variant=\"ghost\" size=\"icon\" onClick={() => setShowOutput(false)} className=\"h-8 w-8\">\n                                    <X size={18} />\n                                </Button>\n                            </div>\n                            <div className=\"flex-1 overflow-auto p-4\">\n                                <pre className=\"overflow-auto rounded border border-gray-200 bg-gray-50 p-4 text-sm\">{jsonOutput}</pre>\n                            </div>\n                            <div className=\"flex justify-end border-t p-4\">\n                                <Button variant=\"outline\" className=\"mr-2\" onClick={() => setShowOutput(false)}>\n                                    Fechar\n                                </Button>\n                                <Button\n                                    variant=\"default\"\n                                    onClick={() => {\n                                        navigator.clipboard.writeText(jsonOutput);\n                                        toast.success('JSON copiado para a área de transferência!');\n                                    }}\n                                >\n                                    Copiar para Área de Transferência\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </AppLayout>\n    );\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/settings/appearance.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/settings/password.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/settings/profile.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/pages/welcome.tsx",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/ssr.tsx",
        "messages": [],
        "suppressedMessages": [
            {
                "ruleId": "@typescript-eslint/ban-ts-comment",
                "severity": 2,
                "message": "Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.",
                "line": 17,
                "column": 13,
                "nodeType": "Line",
                "messageId": "tsDirectiveCommentRequiresDescription",
                "endLine": 17,
                "endColumn": 32,
                "suppressions": [
                    {
                        "kind": "directive",
                        "justification": ""
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 19,
                "column": 39,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 19,
                "endColumn": 42,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                814,
                                817
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                814,
                                817
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ],
                "suppressions": [
                    {
                        "kind": "directive",
                        "justification": ""
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/ban-ts-comment",
                "severity": 2,
                "message": "Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.",
                "line": 20,
                "column": 21,
                "nodeType": "Line",
                "messageId": "tsDirectiveCommentRequiresDescription",
                "endLine": 20,
                "endColumn": 40,
                "suppressions": [
                    {
                        "kind": "directive",
                        "justification": ""
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/ban-ts-comment",
                "severity": 2,
                "message": "Include a description after the \"@ts-expect-error\" directive to explain why the @ts-expect-error is necessary. The description must be 3 characters or longer.",
                "line": 22,
                "column": 21,
                "nodeType": "Line",
                "messageId": "tsDirectiveCommentRequiresDescription",
                "endLine": 22,
                "endColumn": 40,
                "suppressions": [
                    {
                        "kind": "directive",
                        "justification": ""
                    }
                ]
            }
        ],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/asset-hierarchy.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 135,
                "column": 20,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 135,
                "endColumn": 23,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                2951,
                                2954
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                2951,
                                2954
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export interface Manufacturer {\n    id: number;\n    name: string;\n    website?: string | null;\n    email?: string | null;\n    phone?: string | null;\n    country?: string | null;\n    notes?: string | null;\n}\n\nexport interface Asset {\n    id: number;\n    tag: string;\n    serial_number: string | null;\n    part_number: string | null;\n    description: string | null;\n    manufacturing_year: number | null;\n    photo_path: string | null;\n    manufacturer: Manufacturer | null;\n    manufacturer_id: number | null;\n    asset_type: AssetType | null;\n    asset_type_id: number | null;\n    area: Area | null;\n    area_id: number | null;\n    sector?: Sector | null;\n    sector_id?: number | null;\n    plant?: Plant | null;\n    plant_id?: number | null;\n    shift?: Shift | null;\n    shift_id?: number | null;\n    routines_count?: number;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface AssetForm {\n    tag: string;\n    serial_number: string;\n    part_number: string;\n    asset_type_id: number | string;\n    description: string;\n    manufacturer: string;\n    manufacturer_id: number | string;\n    manufacturing_year: string;\n    area_id: number | string;\n    plant_id?: number | string;\n    sector_id?: number | string;\n    photo: File | null;\n    photo_path?: string | null;\n    [key: string]: string | number | File | null | undefined;\n}\n\nexport interface AssetType {\n    id: number;\n    name: string;\n    description: string | null;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface AssetTypeForm {\n    name: string;\n    description: string;\n    [key: string]: string | undefined;\n}\n\nexport interface Area {\n    id: number;\n    name: string;\n    factory_id: number | null;\n    parent_area_id: number | null;\n    factory?: Factory;\n    parentArea?: Area;\n    sectors?: Sector[];\n    plant?: Plant;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface Sector {\n    id: number;\n    name: string;\n    area_id: number;\n    area: Area;\n    plant?: Plant;\n    created_at: string;\n    updated_at: string;\n}\n\nexport interface SectorForm {\n    name: string;\n    area_id: string;\n    [key: string]: string | undefined;\n}\n\nexport interface Plant {\n    id: number;\n    name: string;\n    description?: string | null;\n    areas?: Area[];\n    created_at?: string;\n    updated_at?: string;\n}\n\nexport interface Shift {\n    id: number;\n    name: string;\n    timezone?: string;\n    created_at?: string;\n    updated_at?: string;\n}\n\nexport interface Factory {\n    id: number;\n    name: string;\n    description?: string | null;\n    created_at?: string;\n    updated_at?: string;\n}\n\nexport interface ShiftForm {\n    name: string;\n    schedules: {\n        weekday: string;\n        shifts: {\n            start_time: string;\n            end_time: string;\n            active: boolean;\n            breaks: {\n                start_time: string;\n                end_time: string;\n            }[];\n        }[];\n    }[];\n    [key: string]: any;\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/area.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/asset-type.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/assetType.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/manufacturer.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/plant.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/entities/sector.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/global.d.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/index.d.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/maintenance.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 64,
                "column": 35,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 64,
                "endColumn": 38,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1388,
                                1391
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1388,
                                1391
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 77,
                "column": 12,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 77,
                "endColumn": 15,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                1615,
                                1618
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                1615,
                                1618
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 2,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export interface RoutineExecution {\n    id: number;\n    routine: {\n        id: number;\n        name: string;\n        description?: string;\n    };\n    assets: Asset[];\n    executor: {\n        id: number;\n        name: string;\n    };\n    form_execution?: {\n        id: number;\n        form_version: {\n            id: number;\n            version_number: number;\n            published_at: string;\n        };\n    };\n    status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\n    progress: number;\n    started_at: string | null;\n    completed_at: string | null;\n    duration_minutes: number | null;\n    notes: string | null;\n    task_summary: {\n        total: number;\n        completed: number;\n        with_issues: number;\n    };\n    timeline: ExecutionTimelineEvent[];\n    primary_asset_tag: string | null;\n}\n\nexport interface Asset {\n    id: number;\n    tag: string;\n    description: string;\n}\n\nexport interface ExecutionTimelineEvent {\n    timestamp: string;\n    event: string;\n    description: string;\n    user?: string;\n    task_id?: number;\n    task_type?: string;\n}\n\nexport interface TaskResponse {\n    id: number;\n    task: FormTask;\n    response: FormattedResponse;\n    is_completed: boolean;\n    responded_at: string | null;\n}\n\nexport interface FormTask {\n    id: number;\n    type: string;\n    description: string;\n    is_required: boolean;\n    configuration: Record<string, any>;\n    instructions: TaskInstruction[];\n}\n\nexport interface TaskInstruction {\n    id: number;\n    type: string;\n    content: string;\n    position: number;\n}\n\nexport interface FormattedResponse {\n    type: string;\n    value: any;\n    display_value: string;\n    status: 'success' | 'warning' | 'incomplete' | 'error';\n\n    // Measurement-specific\n    unit?: string;\n    is_within_range?: boolean;\n    range_info?: {\n        min: number;\n        max: number;\n        target?: number;\n        range_text: string;\n    };\n\n    // Choice-specific\n    options?: Array<{ value: string; label: string }>;\n    selected_count?: number;\n    values?: string[];\n\n    // Text-specific\n    word_count?: number;\n    character_count?: number;\n\n    // Photo/File-specific\n    photos?: Photo[];\n    files?: FileAttachment[];\n    photo_count?: number;\n    file_count?: number;\n\n    // Code reader-specific\n    code_type?: string;\n}\n\nexport interface Photo {\n    id: number;\n    filename: string;\n    file_path: string;\n    url: string;\n    thumbnail_url: string;\n    uploaded_at: string;\n    file_size: number | null;\n}\n\nexport interface FileAttachment {\n    id: number;\n    filename: string;\n    file_path: string;\n    url: string;\n    uploaded_at: string;\n    file_size: number | null;\n    file_type: string;\n}\n\nexport interface ExecutionStats {\n    total: number;\n    completed: number;\n    in_progress: number;\n    failed: number;\n    completion_rate: number;\n    trend: {\n        direction: 'up' | 'down' | 'stable';\n        percentage: number;\n    };\n}\n\nexport interface ExecutionSummary {\n    id: number;\n    routine_name: string;\n    asset_tag: string | null;\n    executor_name: string;\n    status: string;\n    started_at: string;\n    duration_minutes: number | null;\n    progress: number;\n}\n\nexport interface DailyTrendData {\n    date: string;\n    count: number;\n    completed: number;\n    failed: number;\n}\n\nexport interface ExecutionFilters {\n    search?: string;\n    date_from?: string;\n    date_to?: string;\n    date_preset?: string;\n    asset_ids?: number[];\n    routine_ids?: number[];\n    executor_ids?: number[];\n    status?: string[];\n}\n\nexport interface FilterOption {\n    value: string | number;\n    label: string;\n}\n\nexport interface SortOption {\n    value: string;\n    label: string;\n}\n\nexport interface ExportOptions {\n    format: 'pdf' | 'csv' | 'excel';\n    template?: 'standard' | 'summary' | 'detailed';\n    include_images?: boolean;\n    compress_images?: boolean;\n    include_signatures?: boolean;\n    paper_size?: 'A4' | 'Letter';\n    grouping?: 'none' | 'by_asset' | 'by_routine';\n    include_cover_page?: boolean;\n    include_index?: boolean;\n    separate_files?: boolean;\n    delivery: {\n        method: 'download' | 'email';\n        email?: string;\n    };\n}\n\nexport interface ExecutionExport {\n    id: number;\n    export_type: 'single' | 'batch';\n    export_format: 'pdf' | 'csv' | 'excel';\n    execution_count: number;\n    status: 'pending' | 'processing' | 'completed' | 'failed';\n    created_at: string;\n    completed_at: string | null;\n    estimated_size_kb: number;\n    can_download: boolean;\n}\n\nexport interface ExportProgress {\n    export_id: number;\n    status: 'pending' | 'processing' | 'completed' | 'failed';\n    created_at: string;\n    completed_at: string | null;\n    download_url: string | null;\n    file_size_kb: number | null;\n    progress_percentage: number;\n}\n\nexport interface PerformanceMetrics {\n    average_duration_minutes: number;\n    median_duration_minutes: number;\n    fastest_execution_minutes: number;\n    slowest_execution_minutes: number;\n    total_execution_time_hours: number;\n}\n\nexport interface AssetExecutionSummary {\n    asset_id: number;\n    asset_tag: string;\n    asset_description: string;\n    total_executions: number;\n    completed_executions: number;\n    completion_rate: number;\n    avg_duration_minutes: number | null;\n}\n\nexport interface PaginatedExecutions {\n    data: RoutineExecution[];\n    current_page: number;\n    last_page: number;\n    per_page: number;\n    total: number;\n    from: number | null;\n    to: number | null;\n}\n\nexport interface ExecutionHistoryPageProps {\n    stats: ExecutionStats;\n    recentExecutions: ExecutionSummary[];\n    dailyTrend: DailyTrendData[];\n    performanceMetrics: PerformanceMetrics;\n    filters: ExecutionFilters;\n    filterOptions: {\n        assets: FilterOption[];\n        routines: FilterOption[];\n        executors: FilterOption[];\n        statuses: FilterOption[];\n        datePresets: FilterOption[];\n    };\n}\n\nexport interface ExecutionIndexPageProps {\n    executions: PaginatedExecutions;\n    filters: ExecutionFilters;\n    filterOptions: {\n        assets: FilterOption[];\n        routines: FilterOption[];\n        executors: FilterOption[];\n        statuses: FilterOption[];\n    };\n    sortOptions: SortOption[];\n    currentSort: {\n        column: string;\n        direction: 'asc' | 'desc';\n    };\n}\n\nexport interface ExecutionShowPageProps {\n    execution: RoutineExecution;\n    taskResponses: TaskResponse[];\n    canExport: boolean;\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/shared.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 25,
                "column": 32,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 25,
                "endColumn": 35,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                644,
                                647
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                644,
                                647
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 37,
                "column": 22,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 37,
                "endColumn": 25,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                842,
                                845
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                842,
                                845
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            },
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 37,
                "column": 32,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 37,
                "endColumn": 35,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                852,
                                855
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                852,
                                855
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 3,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "// Shared type definitions for the entity management system\n\nexport interface PaginationMeta {\n    current_page: number;\n    from: number | null;\n    last_page: number;\n    per_page: number;\n    to: number | null;\n    total: number;\n}\n\nexport interface DependencyResult {\n    can_delete: boolean;\n    has_dependencies?: boolean;\n    dependencies: {\n        [key: string]: {\n            total?: number;\n            count?: number;\n            label?: string;\n            items?: Array<{\n                id: number;\n                name?: string;\n                tag?: string;\n                description?: string;\n                [key: string]: any;\n            }>;\n        };\n    };\n}\n\nexport interface ColumnConfig {\n    key: string;\n    label: string;\n    sortable?: boolean;\n    visible?: boolean;\n    width?: string;\n    render?: (value: any, row: any) => React.ReactNode;\n}\n\nexport interface BaseEntity {\n    id: number;\n    created_at?: string;\n    updated_at?: string;\n}\n\nexport interface FormErrors {\n    [key: string]: string | string[];\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/task.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/units.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/types/vite-env.d.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/utils/date.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/utils/download.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-unused-vars",
                "severity": 2,
                "message": "'e' is defined but never used.",
                "line": 23,
                "column": 14,
                "nodeType": null,
                "messageId": "unusedVar",
                "endLine": 23,
                "endColumn": 15
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "/**\n * Triggers a file download with save dialog\n * @param url - The URL to download from\n * @param filename - Optional filename suggestion\n */\nexport function downloadFile(url: string, filename?: string): void {\n    // Create a temporary anchor element\n    const link = document.createElement('a');\n    link.href = url;\n\n    // Set download attribute to trigger save dialog\n    // Empty string or specific filename both work\n    link.download = filename || '';\n\n    // For cross-origin downloads, we might need to open in new tab\n    // Check if URL is from the same origin\n    try {\n        const urlObj = new URL(url, window.location.origin);\n        if (urlObj.origin !== window.location.origin) {\n            link.target = '_blank';\n            link.rel = 'noopener noreferrer';\n        }\n    } catch (e) {\n        // If URL parsing fails, assume it's a relative URL\n    }\n\n    // Hide the link\n    link.style.display = 'none';\n\n    // Add to body, click, and remove\n    document.body.appendChild(link);\n\n    // Use a small timeout to ensure the link is in the DOM\n    setTimeout(() => {\n        link.click();\n\n        // Clean up after a delay\n        setTimeout(() => {\n            document.body.removeChild(link);\n        }, 100);\n    }, 0);\n}\n\n/**\n * Downloads a file using fetch API (for better control and error handling)\n * @param url - The URL to download from\n * @param filename - Filename for the download\n */\nexport async function downloadFileWithFetch(url: string, filename: string): Promise<void> {\n    try {\n        const response = await fetch(url, {\n            method: 'GET',\n            credentials: 'same-origin',\n            headers: {\n                'X-Requested-With': 'XMLHttpRequest',\n            },\n        });\n\n        if (!response.ok) {\n            throw new Error(`Download failed: ${response.statusText}`);\n        }\n\n        // Get the blob from the response\n        const blob = await response.blob();\n\n        // Create object URL\n        const objectUrl = window.URL.createObjectURL(blob);\n\n        // Trigger download\n        downloadFile(objectUrl, filename);\n\n        // Clean up object URL after a delay\n        setTimeout(() => {\n            window.URL.revokeObjectURL(objectUrl);\n        }, 1000);\n    } catch (error) {\n        console.error('Download error:', error);\n        throw error;\n    }\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/utils/route.ts",
        "messages": [
            {
                "ruleId": "@typescript-eslint/no-explicit-any",
                "severity": 2,
                "message": "Unexpected any. Specify a different type.",
                "line": 1,
                "column": 60,
                "nodeType": "TSAnyKeyword",
                "messageId": "unexpectedAny",
                "endLine": 1,
                "endColumn": 63,
                "suggestions": [
                    {
                        "messageId": "suggestUnknown",
                        "fix": {
                            "range": [
                                59,
                                62
                            ],
                            "text": "unknown"
                        },
                        "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
                    },
                    {
                        "messageId": "suggestNever",
                        "fix": {
                            "range": [
                                59,
                                62
                            ],
                            "text": "never"
                        },
                        "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 1,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "export function route(name: string, params: Record<string, any> = {}): string {\n    // Converte o nome da rota em um caminho\n    // Exemplo: 'asset-hierarchy.setores' -> '/asset-hierarchy/setores'\n    const path = name.replace(/\\./g, '/');\n\n    const url = new URL(window.location.origin);\n    url.pathname = path;\n\n    Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n            url.searchParams.append(key, value.toString());\n        }\n    });\n\n    return url.toString();\n}\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/resources/js/ziggy.js",
        "messages": [
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 28,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 29,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                27,
                                28
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                27,
                                27
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 30,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 31,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                29,
                                30
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                29,
                                29
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 97,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 98,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                96,
                                97
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                96,
                                96
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 205,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 206,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                204,
                                205
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                204,
                                204
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 275,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 276,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                274,
                                275
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                274,
                                274
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 349,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 350,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                348,
                                349
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                348,
                                348
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 416,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 417,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                415,
                                416
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                415,
                                415
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 481,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 482,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                480,
                                481
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                480,
                                480
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 553,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 554,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                552,
                                553
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                552,
                                552
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 613,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 614,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                612,
                                613
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                612,
                                612
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 928,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 929,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                927,
                                928
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                927,
                                927
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1161,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1162,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1160,
                                1161
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1160,
                                1160
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1167,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1168,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1166,
                                1167
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1166,
                                1166
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1263,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1264,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1262,
                                1263
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1262,
                                1262
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1515,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1516,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1514,
                                1515
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1514,
                                1514
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1629,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1630,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1628,
                                1629
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1628,
                                1628
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1638,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1639,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1637,
                                1638
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1637,
                                1637
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1753,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1754,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1752,
                                1753
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1752,
                                1752
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1863,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1864,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1862,
                                1863
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1862,
                                1862
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 1975,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 1976,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                1974,
                                1975
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                1974,
                                1974
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2051,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2052,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2050,
                                2051
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2050,
                                2050
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2061,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2062,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2060,
                                2061
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2060,
                                2060
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2128,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2129,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2127,
                                2128
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2127,
                                2127
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2138,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2139,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2137,
                                2138
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2137,
                                2137
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2215,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2216,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2214,
                                2215
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2214,
                                2214
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2306,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2307,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2305,
                                2306
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2305,
                                2305
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2314,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2315,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2313,
                                2314
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2313,
                                2313
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2404,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2405,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2403,
                                2404
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2403,
                                2403
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2489,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2490,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2488,
                                2489
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2488,
                                2488
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2497,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2498,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2496,
                                2497
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2496,
                                2496
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2598,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2599,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2597,
                                2598
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2597,
                                2597
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2606,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2607,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2605,
                                2606
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2605,
                                2605
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2616,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2617,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2615,
                                2616
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2615,
                                2615
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2708,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2709,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2707,
                                2708
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2707,
                                2707
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2716,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2717,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2715,
                                2716
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2715,
                                2715
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2726,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2727,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2725,
                                2726
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2725,
                                2725
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2819,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2820,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2818,
                                2819
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2818,
                                2818
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2827,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2828,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2826,
                                2827
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2826,
                                2826
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2837,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2838,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2836,
                                2837
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2836,
                                2836
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2931,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2932,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2930,
                                2931
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2930,
                                2930
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 2939,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 2940,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                2938,
                                2939
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                2938,
                                2938
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3037,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3038,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3036,
                                3037
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3036,
                                3036
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3045,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3046,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3044,
                                3045
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3044,
                                3044
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3141,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3142,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3140,
                                3141
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3140,
                                3140
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3149,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3150,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3148,
                                3149
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3148,
                                3148
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3159,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3160,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3158,
                                3159
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3158,
                                3158
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3278,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3279,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3277,
                                3278
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3277,
                                3277
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3286,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3287,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3285,
                                3286
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3285,
                                3285
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3399,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3400,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3398,
                                3399
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3398,
                                3398
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3407,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3408,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3406,
                                3407
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3406,
                                3406
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3416,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3417,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3415,
                                3416
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3415,
                                3415
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3554,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3555,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3553,
                                3554
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3553,
                                3553
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3562,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3563,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3561,
                                3562
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3561,
                                3561
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3699,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3700,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3698,
                                3699
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3698,
                                3698
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3707,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3708,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3706,
                                3707
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3706,
                                3706
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3850,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3851,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3849,
                                3850
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3849,
                                3849
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3858,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3859,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3857,
                                3858
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3857,
                                3857
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 3867,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 3868,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                3866,
                                3867
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                3866,
                                3866
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4003,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4004,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4002,
                                4003
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4002,
                                4002
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4011,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4012,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4010,
                                4011
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4010,
                                4010
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4020,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4021,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4019,
                                4020
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4019,
                                4019
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4169,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4170,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4168,
                                4169
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4168,
                                4168
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4177,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4178,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4176,
                                4177
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4176,
                                4176
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4186,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4187,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4185,
                                4186
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4185,
                                4185
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4330,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4331,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4329,
                                4330
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4329,
                                4329
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4338,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4339,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4337,
                                4338
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4337,
                                4337
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4347,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4348,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4346,
                                4347
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4346,
                                4346
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4356,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4357,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4355,
                                4356
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4355,
                                4355
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4518,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4519,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4517,
                                4518
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4517,
                                4517
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4526,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4527,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4525,
                                4526
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4525,
                                4525
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4535,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4536,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4534,
                                4535
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4534,
                                4534
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4544,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4545,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4543,
                                4544
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4543,
                                4543
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4708,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4709,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4707,
                                4708
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4707,
                                4707
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4716,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4717,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4715,
                                4716
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4715,
                                4715
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4725,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4726,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4724,
                                4725
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4724,
                                4724
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4734,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4735,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4733,
                                4734
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4733,
                                4733
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4871,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4872,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4870,
                                4871
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4870,
                                4870
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4964,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4965,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4963,
                                4964
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4963,
                                4963
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 4973,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 4974,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                4972,
                                4973
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                4972,
                                4972
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5064,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5065,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5063,
                                5064
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5063,
                                5063
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5149,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5150,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5148,
                                5149
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5148,
                                5148
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5158,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5159,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5157,
                                5158
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5157,
                                5157
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5298,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5299,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5297,
                                5298
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5297,
                                5297
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5307,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5308,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5306,
                                5307
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5306,
                                5306
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5316,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5317,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5315,
                                5316
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5315,
                                5315
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5455,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5456,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5454,
                                5455
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5454,
                                5454
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5464,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5465,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5463,
                                5464
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5463,
                                5463
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5600,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5601,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5599,
                                5600
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5599,
                                5599
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5609,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5610,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5608,
                                5609
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5608,
                                5608
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5759,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5760,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5758,
                                5759
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5758,
                                5758
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5768,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5769,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5767,
                                5768
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5767,
                                5767
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5777,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5778,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5776,
                                5777
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5776,
                                5776
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 5921,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 5922,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                5920,
                                5921
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                5920,
                                5920
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6010,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6011,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6009,
                                6010
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6009,
                                6009
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6017,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6018,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6016,
                                6017
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6016,
                                6016
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6106,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6107,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6105,
                                6106
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6105,
                                6105
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6187,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6188,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6186,
                                6187
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6186,
                                6186
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6194,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6195,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6193,
                                6194
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6193,
                                6193
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6329,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6330,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6328,
                                6329
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6328,
                                6328
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6336,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6337,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6335,
                                6336
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6335,
                                6335
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6344,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6345,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6343,
                                6344
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6343,
                                6343
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6479,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6480,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6478,
                                6479
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6478,
                                6478
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6486,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6487,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6485,
                                6486
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6485,
                                6485
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6617,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6618,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6616,
                                6617
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6616,
                                6616
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6624,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6625,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6623,
                                6624
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6623,
                                6623
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6769,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6770,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6768,
                                6769
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6768,
                                6768
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6776,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6777,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6775,
                                6776
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6775,
                                6775
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6784,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6785,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6783,
                                6784
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6783,
                                6783
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 6928,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 6929,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                6927,
                                6928
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                6927,
                                6927
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7020,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7021,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7019,
                                7020
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7019,
                                7019
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7105,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7106,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7104,
                                7105
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7104,
                                7104
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7114,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7115,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7113,
                                7114
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7113,
                                7113
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7256,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7257,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7255,
                                7256
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7255,
                                7255
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7265,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7266,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7264,
                                7265
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7264,
                                7264
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7401,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7402,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7400,
                                7401
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7400,
                                7400
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7410,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7411,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7409,
                                7410
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7409,
                                7409
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7560,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7561,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7559,
                                7560
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7559,
                                7559
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7569,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7570,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7568,
                                7569
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7568,
                                7568
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7578,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7579,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7577,
                                7578
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7577,
                                7577
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7728,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7729,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7727,
                                7728
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7727,
                                7727
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7829,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7830,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7828,
                                7829
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7828,
                                7828
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7842,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7843,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7841,
                                7842
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7841,
                                7841
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 7937,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 7938,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                7936,
                                7937
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                7936,
                                7936
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8030,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8031,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8029,
                                8030
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8029,
                                8029
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8043,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8044,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8042,
                                8043
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8042,
                                8042
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8199,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8200,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8198,
                                8199
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8198,
                                8198
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8212,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8213,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8211,
                                8212
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8211,
                                8211
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8225,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8226,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8224,
                                8225
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8224,
                                8224
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8376,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8377,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8375,
                                8376
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8375,
                                8375
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8389,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8390,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8388,
                                8389
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8388,
                                8388
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8541,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8542,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8540,
                                8541
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8540,
                                8540
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8554,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8555,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8553,
                                8554
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8553,
                                8553
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8720,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8721,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8719,
                                8720
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8719,
                                8719
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8733,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8734,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8732,
                                8733
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8732,
                                8732
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8746,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8747,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8745,
                                8746
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8745,
                                8745
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8899,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8900,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8898,
                                8899
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8898,
                                8898
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 8996,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 8997,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                8995,
                                8996
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                8995,
                                8995
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9004,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9005,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9003,
                                9004
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9003,
                                9003
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9100,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9101,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9099,
                                9100
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9099,
                                9099
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9183,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9184,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9182,
                                9183
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9182,
                                9182
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9191,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9192,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9190,
                                9191
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9190,
                                9190
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9330,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9331,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9329,
                                9330
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9329,
                                9329
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9338,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9339,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9337,
                                9338
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9337,
                                9337
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9347,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9348,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9346,
                                9347
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9346,
                                9346
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9485,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9486,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9484,
                                9485
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9484,
                                9484
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9493,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9494,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9492,
                                9493
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9492,
                                9492
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9628,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9629,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9627,
                                9628
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9627,
                                9627
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9636,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9637,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9635,
                                9636
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9635,
                                9635
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9785,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9786,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9784,
                                9785
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9784,
                                9784
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9793,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9794,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9792,
                                9793
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9792,
                                9792
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9802,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9803,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9801,
                                9802
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9801,
                                9801
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9954,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9955,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9953,
                                9954
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9953,
                                9953
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9962,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9963,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9961,
                                9962
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9961,
                                9961
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 9971,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 9972,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                9970,
                                9971
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                9970,
                                9970
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10120,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10121,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10119,
                                10120
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10119,
                                10119
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10128,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10129,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10127,
                                10128
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10127,
                                10127
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10137,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10138,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10136,
                                10137
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10136,
                                10136
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10280,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10281,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10279,
                                10280
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10279,
                                10279
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10382,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10383,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10381,
                                10382
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10381,
                                10381
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10397,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10398,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10396,
                                10397
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10396,
                                10396
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10491,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10492,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10490,
                                10491
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10490,
                                10490
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10588,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10589,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10587,
                                10588
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10587,
                                10587
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10603,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10604,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10602,
                                10603
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10602,
                                10602
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10770,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10771,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10769,
                                10770
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10769,
                                10769
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10785,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10786,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10784,
                                10785
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10784,
                                10784
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10801,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10802,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10800,
                                10801
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10800,
                                10800
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10960,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10961,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10959,
                                10960
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10959,
                                10959
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 10975,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 10976,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                10974,
                                10975
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                10974,
                                10974
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11138,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11139,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11137,
                                11138
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11137,
                                11137
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11153,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11154,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11152,
                                11153
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11152,
                                11152
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11318,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11319,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11317,
                                11318
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11317,
                                11317
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11333,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11334,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11332,
                                11333
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11332,
                                11332
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11349,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11350,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11348,
                                11349
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11348,
                                11348
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11491,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11492,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11490,
                                11491
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11490,
                                11490
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11578,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11579,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11577,
                                11578
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11577,
                                11577
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11665,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11666,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11664,
                                11665
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11664,
                                11664
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11675,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11676,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11674,
                                11675
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11674,
                                11674
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11759,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11760,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11758,
                                11759
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11758,
                                11758
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11838,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11839,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11837,
                                11838
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11837,
                                11837
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11848,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11849,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11847,
                                11848
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11847,
                                11847
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11987,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11988,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11986,
                                11987
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11986,
                                11986
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 11997,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 11998,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                11996,
                                11997
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                11996,
                                11996
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12008,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12009,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12007,
                                12008
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12007,
                                12007
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12144,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12145,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12143,
                                12144
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12143,
                                12143
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12154,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12155,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12153,
                                12154
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12153,
                                12153
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12289,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12290,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12288,
                                12289
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12288,
                                12288
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12299,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12300,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12298,
                                12299
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12298,
                                12298
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12446,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12447,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12445,
                                12446
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12445,
                                12445
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12456,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12457,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12455,
                                12456
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12455,
                                12455
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12467,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12468,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12466,
                                12467
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12466,
                                12466
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12607,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12608,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12606,
                                12607
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12606,
                                12606
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12617,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12618,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12616,
                                12617
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12616,
                                12616
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12628,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12629,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12627,
                                12628
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12627,
                                12627
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12775,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12776,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12774,
                                12775
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12774,
                                12774
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12785,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12786,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12784,
                                12785
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12784,
                                12784
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12796,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12797,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12795,
                                12796
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12795,
                                12795
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12944,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12945,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12943,
                                12944
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12943,
                                12943
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12954,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12955,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12953,
                                12954
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12953,
                                12953
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 12965,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 12966,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                12964,
                                12965
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                12964,
                                12964
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13102,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13103,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13101,
                                13102
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13101,
                                13101
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13110,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13111,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13109,
                                13110
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13109,
                                13109
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13119,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13120,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13118,
                                13119
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13118,
                                13118
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13261,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13262,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13260,
                                13261
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13260,
                                13260
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13269,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13270,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13268,
                                13269
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13268,
                                13268
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13278,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13279,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13277,
                                13278
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13277,
                                13277
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13415,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13416,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13414,
                                13415
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13414,
                                13414
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13423,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13424,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13422,
                                13423
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13422,
                                13422
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13432,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13433,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13431,
                                13432
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13431,
                                13431
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13442,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13443,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13441,
                                13442
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13441,
                                13441
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13605,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13606,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13604,
                                13605
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13604,
                                13604
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13613,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13614,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13612,
                                13613
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13612,
                                13612
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13622,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13623,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13621,
                                13622
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13621,
                                13621
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13632,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13633,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13631,
                                13632
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13631,
                                13631
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13802,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13803,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13801,
                                13802
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13801,
                                13801
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13810,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13811,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13809,
                                13810
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13809,
                                13809
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13819,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13820,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13818,
                                13819
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13818,
                                13818
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13829,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13830,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13828,
                                13829
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13828,
                                13828
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 13840,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 13841,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                13839,
                                13840
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                13839,
                                13839
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14016,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14017,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14015,
                                14016
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14015,
                                14015
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14024,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14025,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14023,
                                14024
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14023,
                                14023
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14033,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14034,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14032,
                                14033
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14032,
                                14032
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14043,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14044,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14042,
                                14043
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14042,
                                14042
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14054,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14055,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14053,
                                14054
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14053,
                                14053
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14211,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14212,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14210,
                                14211
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14210,
                                14210
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14219,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14220,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14218,
                                14219
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14218,
                                14218
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14228,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14229,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14227,
                                14228
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14227,
                                14227
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14238,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14239,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14237,
                                14238
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14237,
                                14237
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14249,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14250,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14248,
                                14249
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14248,
                                14248
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14416,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14417,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14415,
                                14416
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14415,
                                14415
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14424,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14425,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14423,
                                14424
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14423,
                                14423
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14433,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14434,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14432,
                                14433
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14432,
                                14432
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14443,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14444,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14442,
                                14443
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14442,
                                14442
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14454,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14455,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14453,
                                14454
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14453,
                                14453
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14626,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14627,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14625,
                                14626
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14625,
                                14625
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14634,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14635,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14633,
                                14634
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14633,
                                14633
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14643,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14644,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14642,
                                14643
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14642,
                                14642
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14653,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14654,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14652,
                                14653
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14652,
                                14652
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14664,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14665,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14663,
                                14664
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14663,
                                14663
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14837,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14838,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14836,
                                14837
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14836,
                                14836
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14845,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14846,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14844,
                                14845
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14844,
                                14844
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14854,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14855,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14853,
                                14854
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14853,
                                14853
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14864,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14865,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14863,
                                14864
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14863,
                                14863
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 14875,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 14876,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                14874,
                                14875
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                14874,
                                14874
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15055,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15056,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15054,
                                15055
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15054,
                                15054
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15063,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15064,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15062,
                                15063
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15062,
                                15062
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15072,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15073,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15071,
                                15072
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15071,
                                15071
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15082,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15083,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15081,
                                15082
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15081,
                                15081
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15093,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15094,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15092,
                                15093
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15092,
                                15092
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15243,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15244,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15242,
                                15243
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15242,
                                15242
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15317,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15318,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15316,
                                15317
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15316,
                                15316
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            },
            {
                "ruleId": "no-useless-escape",
                "severity": 2,
                "message": "Unnecessary escape character: \\/.",
                "line": 1,
                "column": 15388,
                "nodeType": "Literal",
                "messageId": "unnecessaryEscape",
                "endLine": 1,
                "endColumn": 15389,
                "suggestions": [
                    {
                        "messageId": "removeEscape",
                        "fix": {
                            "range": [
                                15387,
                                15388
                            ],
                            "text": ""
                        },
                        "desc": "Remove the `\\`. This maintains the current functionality."
                    },
                    {
                        "messageId": "escapeBackslash",
                        "fix": {
                            "range": [
                                15387,
                                15387
                            ],
                            "text": "\\"
                        },
                        "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
                    }
                ]
            }
        ],
        "suppressedMessages": [],
        "errorCount": 251,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "source": "const Ziggy = {\"url\":\"http:\\/\\/localhost\",\"port\":null,\"defaults\":{},\"routes\":{\"welcome\":{\"uri\":\"\\/\",\"methods\":[\"GET\",\"HEAD\"]},\"home\":{\"uri\":\"home\",\"methods\":[\"GET\",\"HEAD\"]},\"profile.edit\":{\"uri\":\"settings\\/profile\",\"methods\":[\"GET\",\"HEAD\"]},\"profile.update\":{\"uri\":\"settings\\/profile\",\"methods\":[\"PATCH\"]},\"profile.update.timezone\":{\"uri\":\"settings\\/timezone\",\"methods\":[\"PATCH\"]},\"profile.destroy\":{\"uri\":\"settings\\/profile\",\"methods\":[\"DELETE\"]},\"password.edit\":{\"uri\":\"settings\\/password\",\"methods\":[\"GET\",\"HEAD\"]},\"password.update\":{\"uri\":\"settings\\/password\",\"methods\":[\"PUT\"]},\"appearance\":{\"uri\":\"settings\\/appearance\",\"methods\":[\"GET\",\"HEAD\"]},\"register\":{\"uri\":\"register\",\"methods\":[\"GET\",\"HEAD\"]},\"login\":{\"uri\":\"login\",\"methods\":[\"GET\",\"HEAD\"]},\"password.request\":{\"uri\":\"forgot-password\",\"methods\":[\"GET\",\"HEAD\"]},\"password.email\":{\"uri\":\"forgot-password\",\"methods\":[\"POST\"]},\"password.reset\":{\"uri\":\"reset-password\\/{token}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"token\"]},\"password.store\":{\"uri\":\"reset-password\",\"methods\":[\"POST\"]},\"verification.notice\":{\"uri\":\"verify-email\",\"methods\":[\"GET\",\"HEAD\"]},\"verification.verify\":{\"uri\":\"verify-email\\/{id}\\/{hash}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"id\",\"hash\"]},\"verification.send\":{\"uri\":\"email\\/verification-notification\",\"methods\":[\"POST\"]},\"password.confirm\":{\"uri\":\"confirm-password\",\"methods\":[\"GET\",\"HEAD\"]},\"logout\":{\"uri\":\"logout\",\"methods\":[\"POST\"]},\"assets.index\":{\"uri\":\"assets\",\"methods\":[\"GET\",\"HEAD\"]},\"assets.create\":{\"uri\":\"assets\\/criar\",\"methods\":[\"GET\",\"HEAD\"]},\"assets.store\":{\"uri\":\"assets\",\"methods\":[\"POST\"]},\"assets.edit\":{\"uri\":\"assets\\/{asset}\\/editar\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"assets.update\":{\"uri\":\"assets\\/{asset}\",\"methods\":[\"PUT\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"assets.destroy\":{\"uri\":\"assets\\/{asset}\",\"methods\":[\"DELETE\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"assets.import\":{\"uri\":\"assets\\/importar\",\"methods\":[\"GET\",\"HEAD\"]},\"assets.import.analyze\":{\"uri\":\"assets\\/importar\\/analisar\",\"methods\":[\"POST\"]},\"assets.import.data\":{\"uri\":\"assets\\/importar\\/dados\",\"methods\":[\"POST\"]},\"asset-hierarchy.assets\":{\"uri\":\"asset-hierarchy\\/assets\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.assets.create\":{\"uri\":\"asset-hierarchy\\/assets\\/create\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.assets.store\":{\"uri\":\"asset-hierarchy\\/assets\",\"methods\":[\"POST\"]},\"asset-hierarchy.assets.import\":{\"uri\":\"asset-hierarchy\\/assets\\/importar\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.assets.import.analyze\":{\"uri\":\"asset-hierarchy\\/assets\\/importar\\/analisar\",\"methods\":[\"POST\"]},\"asset-hierarchy.assets.import.data\":{\"uri\":\"asset-hierarchy\\/assets\\/importar\\/dados\",\"methods\":[\"POST\"]},\"asset-hierarchy.assets.import.progress\":{\"uri\":\"asset-hierarchy\\/assets\\/importar\\/progresso\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.assets.export\":{\"uri\":\"asset-hierarchy\\/assets\\/exportar\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.assets.export.data\":{\"uri\":\"asset-hierarchy\\/assets\\/exportar\",\"methods\":[\"POST\"]},\"asset-hierarchy.assets.export.download\":{\"uri\":\"asset-hierarchy\\/assets\\/exportar\\/{filename}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"filename\"]},\"asset-hierarchy.assets.show\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"]},\"asset-hierarchy.assets.edit\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.update\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\",\"methods\":[\"PATCH\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.destroy\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\",\"methods\":[\"DELETE\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.remove-photo\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/photo\",\"methods\":[\"DELETE\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.runtime\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/runtime\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.runtime.report\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/runtime\",\"methods\":[\"POST\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.runtime.history\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/runtime\\/history\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.runtime.calculation-details\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/runtime\\/calculation-details\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.assets.runtime.breakdown\":{\"uri\":\"asset-hierarchy\\/assets\\/{asset}\\/runtime\\/breakdown\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"asset-hierarchy.setores\":{\"uri\":\"asset-hierarchy\\/setores\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.setores.create\":{\"uri\":\"asset-hierarchy\\/setores\\/create\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.setores.store\":{\"uri\":\"asset-hierarchy\\/setores\",\"methods\":[\"POST\"]},\"asset-hierarchy.setores.show\":{\"uri\":\"asset-hierarchy\\/setores\\/{setor}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"setor\"],\"bindings\":{\"setor\":\"id\"}},\"asset-hierarchy.setores.edit\":{\"uri\":\"asset-hierarchy\\/setores\\/{setor}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"setor\"],\"bindings\":{\"setor\":\"id\"}},\"asset-hierarchy.setores.update\":{\"uri\":\"asset-hierarchy\\/setores\\/{setor}\",\"methods\":[\"PUT\"],\"parameters\":[\"setor\"],\"bindings\":{\"setor\":\"id\"}},\"asset-hierarchy.setores.destroy\":{\"uri\":\"asset-hierarchy\\/setores\\/{setor}\",\"methods\":[\"DELETE\"],\"parameters\":[\"setor\"],\"bindings\":{\"setor\":\"id\"}},\"asset-hierarchy.setores.check-dependencies\":{\"uri\":\"asset-hierarchy\\/setores\\/{setor}\\/check-dependencies\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"setor\"],\"bindings\":{\"setor\":\"id\"}},\"asset-hierarchy.areas\":{\"uri\":\"asset-hierarchy\\/areas\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.areas.create\":{\"uri\":\"asset-hierarchy\\/areas\\/create\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.areas.store\":{\"uri\":\"asset-hierarchy\\/areas\",\"methods\":[\"POST\"]},\"asset-hierarchy.areas.show\":{\"uri\":\"asset-hierarchy\\/areas\\/{area}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"area\"],\"bindings\":{\"area\":\"id\"}},\"asset-hierarchy.areas.edit\":{\"uri\":\"asset-hierarchy\\/areas\\/{area}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"area\"],\"bindings\":{\"area\":\"id\"}},\"asset-hierarchy.areas.update\":{\"uri\":\"asset-hierarchy\\/areas\\/{area}\",\"methods\":[\"PUT\"],\"parameters\":[\"area\"],\"bindings\":{\"area\":\"id\"}},\"asset-hierarchy.areas.destroy\":{\"uri\":\"asset-hierarchy\\/areas\\/{area}\",\"methods\":[\"DELETE\"],\"parameters\":[\"area\"],\"bindings\":{\"area\":\"id\"}},\"asset-hierarchy.areas.check-dependencies\":{\"uri\":\"asset-hierarchy\\/areas\\/{area}\\/check-dependencies\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"area\"],\"bindings\":{\"area\":\"id\"}},\"asset-hierarchy.plantas\":{\"uri\":\"asset-hierarchy\\/plantas\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.plantas.store\":{\"uri\":\"asset-hierarchy\\/plantas\",\"methods\":[\"POST\"]},\"asset-hierarchy.plantas.show\":{\"uri\":\"asset-hierarchy\\/plantas\\/{plant}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"plant\"],\"bindings\":{\"plant\":\"id\"}},\"asset-hierarchy.plantas.update\":{\"uri\":\"asset-hierarchy\\/plantas\\/{plant}\",\"methods\":[\"PUT\"],\"parameters\":[\"plant\"],\"bindings\":{\"plant\":\"id\"}},\"asset-hierarchy.plantas.destroy\":{\"uri\":\"asset-hierarchy\\/plantas\\/{plant}\",\"methods\":[\"DELETE\"],\"parameters\":[\"plant\"],\"bindings\":{\"plant\":\"id\"}},\"asset-hierarchy.plantas.check-dependencies\":{\"uri\":\"asset-hierarchy\\/plantas\\/{plant}\\/check-dependencies\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"plant\"],\"bindings\":{\"plant\":\"id\"}},\"asset-hierarchy.tipos-ativo\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.tipos-ativo.create\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/create\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.tipos-ativo.store\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\",\"methods\":[\"POST\"]},\"asset-hierarchy.tipos-ativo.show\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/{assetType}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"assetType\"],\"bindings\":{\"assetType\":\"id\"}},\"asset-hierarchy.tipos-ativo.edit\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/{assetType}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"assetType\"],\"bindings\":{\"assetType\":\"id\"}},\"asset-hierarchy.tipos-ativo.update\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/{assetType}\",\"methods\":[\"PUT\"],\"parameters\":[\"assetType\"],\"bindings\":{\"assetType\":\"id\"}},\"asset-hierarchy.tipos-ativo.destroy\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/{assetType}\",\"methods\":[\"DELETE\"],\"parameters\":[\"assetType\"],\"bindings\":{\"assetType\":\"id\"}},\"asset-hierarchy.tipos-ativo.check-dependencies\":{\"uri\":\"asset-hierarchy\\/tipos-ativo\\/{assetType}\\/check-dependencies\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"assetType\"],\"bindings\":{\"assetType\":\"id\"}},\"asset-hierarchy.shifts\":{\"uri\":\"asset-hierarchy\\/shifts\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.shifts.shift-editor\":{\"uri\":\"asset-hierarchy\\/shifts\\/shift-editor\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.shifts.store\":{\"uri\":\"asset-hierarchy\\/shifts\",\"methods\":[\"POST\"]},\"asset-hierarchy.shifts.show\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.edit\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.update\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\",\"methods\":[\"PUT\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.destroy\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\",\"methods\":[\"DELETE\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.check-dependencies\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\\/check-dependencies\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.assets\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\\/assets\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.shifts.copy-and-update\":{\"uri\":\"asset-hierarchy\\/shifts\\/{shift}\\/copy-and-update\",\"methods\":[\"POST\"],\"parameters\":[\"shift\"],\"bindings\":{\"shift\":\"id\"}},\"asset-hierarchy.manufacturers\":{\"uri\":\"asset-hierarchy\\/manufacturers\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.manufacturers.all\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/all\",\"methods\":[\"GET\",\"HEAD\"]},\"asset-hierarchy.manufacturers.store\":{\"uri\":\"asset-hierarchy\\/manufacturers\",\"methods\":[\"POST\"]},\"asset-hierarchy.manufacturers.show\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/{manufacturer}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"manufacturer\"],\"bindings\":{\"manufacturer\":\"id\"}},\"asset-hierarchy.manufacturers.edit\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/{manufacturer}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"manufacturer\"],\"bindings\":{\"manufacturer\":\"id\"}},\"asset-hierarchy.manufacturers.update\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/{manufacturer}\",\"methods\":[\"PUT\"],\"parameters\":[\"manufacturer\"],\"bindings\":{\"manufacturer\":\"id\"}},\"asset-hierarchy.manufacturers.destroy\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/{manufacturer}\",\"methods\":[\"DELETE\"],\"parameters\":[\"manufacturer\"],\"bindings\":{\"manufacturer\":\"id\"}},\"asset-hierarchy.manufacturers.assets\":{\"uri\":\"asset-hierarchy\\/manufacturers\\/{manufacturer}\\/assets\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"manufacturer\"],\"bindings\":{\"manufacturer\":\"id\"}},\"maintenance.dashboard\":{\"uri\":\"maintenance\\/dashboard\",\"methods\":[\"GET\",\"HEAD\"]},\"maintenance.routines.index\":{\"uri\":\"maintenance\\/routines\",\"methods\":[\"GET\",\"HEAD\"]},\"maintenance.routines.create\":{\"uri\":\"maintenance\\/routines\\/create\",\"methods\":[\"GET\",\"HEAD\"]},\"maintenance.routines.store\":{\"uri\":\"maintenance\\/routines\",\"methods\":[\"POST\"]},\"maintenance.routines.show\":{\"uri\":\"maintenance\\/routines\\/{routine}\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.edit\":{\"uri\":\"maintenance\\/routines\\/{routine}\\/edit\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.update\":{\"uri\":\"maintenance\\/routines\\/{routine}\",\"methods\":[\"PUT\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.destroy\":{\"uri\":\"maintenance\\/routines\\/{routine}\",\"methods\":[\"DELETE\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.create-execution\":{\"uri\":\"maintenance\\/routines\\/{routine}\\/executions\",\"methods\":[\"POST\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.executions\":{\"uri\":\"maintenance\\/routines\\/{routine}\\/executions\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.form-editor\":{\"uri\":\"maintenance\\/routines\\/{routine}\\/form-editor\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.routines.forms.store\":{\"uri\":\"maintenance\\/routines\\/{routine}\\/forms\",\"methods\":[\"POST\"],\"parameters\":[\"routine\"],\"bindings\":{\"routine\":\"id\"}},\"maintenance.assets.routines.index\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"maintenance.assets.routines.store\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\",\"methods\":[\"POST\"],\"parameters\":[\"asset\"],\"bindings\":{\"asset\":\"id\"}},\"maintenance.assets.routines.update\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\",\"methods\":[\"PUT\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.destroy\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\",\"methods\":[\"DELETE\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.form-editor\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/form-editor\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.forms.store\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/forms\",\"methods\":[\"POST\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.form\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/form\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.form-view\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/form-view\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.form-fill\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/form-fill\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.executions\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/executions\",\"methods\":[\"GET\",\"HEAD\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"maintenance.assets.routines.executions.store\":{\"uri\":\"maintenance\\/assets\\/{asset}\\/routines\\/{routine}\\/executions\",\"methods\":[\"POST\"],\"parameters\":[\"asset\",\"routine\"],\"bindings\":{\"asset\":\"id\",\"routine\":\"id\"}},\"scheduler.route-editor\":{\"uri\":\"scheduler\\/route-editor\",\"methods\":[\"GET\",\"HEAD\"]},\"items.bom-config\":{\"uri\":\"items\\/bom-config\",\"methods\":[\"GET\",\"HEAD\"]},\"storage.local\":{\"uri\":\"storage\\/{path}\",\"methods\":[\"GET\",\"HEAD\"],\"wheres\":{\"path\":\".*\"},\"parameters\":[\"path\"]}}};\nif (typeof window !== 'undefined' && typeof window.Ziggy !== 'undefined') {\n  Object.assign(Ziggy.routes, window.Ziggy.routes);\n}\nexport { Ziggy };\n",
        "usedDeprecatedRules": []
    },
    {
        "filePath": "/workspace/vite.config.ts",
        "messages": [],
        "suppressedMessages": [],
        "errorCount": 0,
        "fatalErrorCount": 0,
        "warningCount": 0,
        "fixableErrorCount": 0,
        "fixableWarningCount": 0,
        "usedDeprecatedRules": []
    }
]